# `clangd` setup

[`clangd`](https://clangd.llvm.org/) is a tool provided by the Clang project that will enhance Objective-C syntax highlighting, displays documentation for Objective-C classes in a popup, shows errors on your code in a popup, and more.

## Installation

On Debian, Ubuntu, Raspbian, and related OSes, you can simply type into the terminal:

```bash
sudo apt install clangd-11 bear
```

On other operating systems, please see the [clangd documentation](https://clangd.llvm.org/installation) to learn how to install `clangd`.

## Installing the VSCode extension

Open VSCodium and press <kbd>Ctrl</kbd>+<kbd>P</kbd>. Then type in the following (and press <kbd>Enter</kbd>):

```bash
ext install llvm-vs-code-extensions.vscode-clangd
```

### Configuring the extension

Go to the bottom left of VSCodium and click on the cog icon. Click on  **Settings**. The Settings page will show. Type `clangd.path` into the search bar. The following screen will show up:

```{figure} 1.2_nfig1.png
The `clangd.path` configuration setting
```

Next, change the value of the setting. By default it is set to `clangd`. On Debian, you have to change it to `clangd-11`. If you're not on Debian,open the terminal (menu item <u>Terminal</u>&rarr;<u>New Terminal</u>) and try different commands to see which one works. It might turn out that it's just `clangd`, in which case you're good to go!

## Setting up your project

Whenever you add a new file to your project or change your `GNUmakefile`, you should run the following:

```bash
make clean; bear -- make
```

This will build your project and update the `compile_commands.json` file, which tells `clangd` the build settings for your project. You don't need to run `make` again to build.

Please make sure the root of the workspace is the same as the root of your project.

## Known GNUstep-specific issues

* Clangd cannot find anything under `<GNUstepBase/`, which means the availability macros are unavailable
* Class documentation written with GSDoc shows the raw GSDoc markup.
