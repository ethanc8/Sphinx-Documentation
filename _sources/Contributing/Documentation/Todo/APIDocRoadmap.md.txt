# API Documentation Roadmap

The current API documentation is convoluted, disorganized, and aesthetically unpleasing.

In my opinion, we should create an API documentation page looking similar to the ones generated by [`pgi-docgen`](https://github.com/pygobject/pgi-docgen) -- see the documentation for [`Gtk.Button`](https://lazka.github.io/pgi-docs/#Gtk-3.0/classes/Button.html#Gtk.Button). This is one of the most usable interfaces I've seen.

However, currently we have multiple options to create better API documentation.

* Improve Autogsdoc
* Use Etoile Documentation Generator (`etdocgen`)
    * [Github repository](https://github.com/etoile/DocGenerator)
    * [Example - EtoileFoundation](http://etoileos.com/dev/api/EtoileFoundation/README.html)
    * This one colorizes the APIs and organizes by topic.
    * However, it needs some tweaks -- which might be possible in CSS -- to increase the font size and overall appearance
    * Not actively developed
* Use `appledoc`
    * [Archived website](https://web.archive.org/web/20131120063634if_/http://gentlebytes.com/appledoc)
    * [Example](https://web.archive.org/web/20140402163707if_/http://cocoadocs.org/docsets/AFNetworking/1.3.1/Classes/AFHTTPClient.html)
    * [Github repository](https://github.com/tomaz/appledoc)
    * Might not compile on GNUstep.
* Otis
    * [Github repository](https://github.com/brynbellomy/otis)
    * [Javascript example](http://brynbellomy.github.io/otis/lib/otis.js.html)
    * Supports Objective-C, but I have no idea how that looks.
* Doxygen
    * Not the most intuitive output by default, but extremely customizable.
    * We could use Breathe or Exhale to convert to Sphinx, but right now they don't have good support for Objective-C, because Sphinx doesn't have good support.
    * Also doesn't look good, but there's multiple great themes:
        * [m.css theme](https://mcss.mosra.cz/documentation/doxygen/)
            * [Example](https://doc.magnum.graphics/magnum/)
        * [Doxygen Awesome theme w/ example](https://jothepro.github.io/doxygen-awesome-css/index.html#autotoc_md9)
        * [Doxygen Materialized](https://2bndy5.github.io/doxygen-materialized/)
        * [ADC theme](https://github.com/nnen/doxygen-theme)
            * [Example](https://web.archive.org/web/20150809022718if_/http://milik.cz/~jan/cppapp/docs/namespacecppapp.html)
        * [Metro theme](https://github.com/nafSadh/doxygen-theme-metro)
            * [Example](http://nafsadh.github.io/scire/doc/d3/de4/classscire_1_1_a_container.html)
        * [Bootstrap theme](https://github.com/Velron/doxygen-bootstrapped)
            * [Example](https://biogearsengine.com/documentation/index.html)
* Use HeaderDoc
* Use XSDocGen based on HeaderDoc
    * [Github repository](https://github.com/macmade/XSDocgen)
    * [Example](https://doc.xs-labs.com/ClangKit/)
* Projects without much info
    * [ASDoc based on HeaderDoc](https://github.com/darricktheprogrammer/ASDoc)
    * [HeaderDoc to Markdown](https://github.com/MetamediaTechnology/objective-c-markdown-document-generator)
* Other non-Objective-C systems that might be good to take inspiration from
    * [Swift Biome](https://github.com/kelvin13/swift-biome) - looks like DocC / Apple output
        * [Example - Swift Stdlib](https://swiftinit.org/reference/swift)
        * [Example - Swift JPEG](https://kelvin13.github.io/jpeg/)
        * Has great search system!