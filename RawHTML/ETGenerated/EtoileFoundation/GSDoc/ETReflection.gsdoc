<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="ETReflection">
  <head>
    <title>ETReflection class documentation</title>
    <author name="Generated by pi"></author>
    <copy>2009 Eric Wasylishen</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the ETReflection class
      </heading>
      <class name="ETReflection" super="NSObject">
        <declared>ETReflection.h</declared>
        <desc>
          <p>
            @group Reflection @abstract Mirror-based reflection
            for Etoile.
          </p>
        </desc>
        <method type="NSArray*" factory="yes">
          <sel>reflectAllRootClasses</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETClassMirror&gt;" factory="yes">
          <sel>reflectClass:</sel>
          <arg type="Class">aClass</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETClassMirror&gt;" factory="yes">
          <sel>reflectClassWithName:</sel>
          <arg type="NSString*">className</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETObjectMirror&gt;" factory="yes">
          <sel>reflectObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETProtocolMirror&gt;" factory="yes">
          <sel>reflectProtocol:</sel>
          <arg type="Protocol*">aProtocol</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETProtocolMirror&gt;" factory="yes">
          <sel>reflectProtocolWithName:</sel>
          <arg type="NSString*">protocolName</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the ETClassMirror protocol
      </heading>
      <protocol name="ETClassMirror">
        <declared>ETReflection.h</declared>
        <conform>ETMirror</conform>
        <conform>ETCollection</conform>
        <desc>
          <p>
            @group Reflection @abstract Protocol for a mirror
            that represents a class.
          </p>
        </desc>
        <method type="NSArray*">
          <sel>adoptedProtocolMirrors</sel>
          <desc>
            <p>
              Returns those protocols explicitly adopted by
              this class.
            </p>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allAdoptedProtocolMirrors</sel>
          <desc>
            <p>
              Returns all protocols adopted by this class,
              including those adopted by means of class
              inheritance and by protocol inheritance.
            </p>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allInstanceVariableMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allInstanceVariableMirrorsWithOwnerMirror:</sel>
          <arg type="id&lt;ETMirror&gt;">aMirror</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allMethodMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allSubclassMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>instanceVariableMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>instanceVariableMirrorsWithOwnerMirror:</sel>
          <arg type="id&lt;ETMirror&gt;">aMirror</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isMetaClass</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>methodMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>subclassMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETClassMirror&gt;">
          <sel>superclassMirror</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </protocol>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        ETInstanceVariableMirror protocol
      </heading>
      <protocol name="ETInstanceVariableMirror">
        <declared>ETReflection.h</declared>
        <conform>ETMirror</conform>
        <desc>
          <p>
            @group Reflection @abstract Protocol for a mirror
            that represents an instance variable.
          </p>
        </desc>
      </protocol>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the ETMethodMirror protocol
      </heading>
      <protocol name="ETMethodMirror">
        <declared>ETReflection.h</declared>
        <conform>ETMirror</conform>
        <desc>
          <p>
            @group Reflection @abstract Protocol for a mirror
            that represents a method.
          </p>
        </desc>
        <method type="BOOL">
          <sel>isClassMethod</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </protocol>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the ETMirror protocol
      </heading>
      <protocol name="ETMirror">
        <declared>ETReflection.h</declared>
        <conform>NSObject</conform>
        <desc>
          <p>
            @group Reflection @abstract Base protocol for all
            mirror classes that represent introspected language
            constructs.
          </p>
        </desc>
        <method type="NSString*">
          <sel>name</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="ETUTI*">
          <sel>type</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </protocol>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the ETObjectMirror protocol
      </heading>
      <protocol name="ETObjectMirror">
        <declared>ETReflection.h</declared>
        <conform>ETMirror</conform>
        <conform>ETCollection</conform>
        <desc>
          <p>
            @group Reflection @abstract Protocol for a mirror
            that represents an object.
          </p>
        </desc>
        <method type="NSArray*">
          <sel>allInstanceVariableMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allMethodMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allSlotMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETClassMirror&gt;">
          <sel>classMirror</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>instanceVariableMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isPrototype</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>methodMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETObjectMirror&gt;">
          <sel>prototypeMirror</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id">
          <sel>representedObject</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>slotMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id&lt;ETClassMirror&gt;">
          <sel>superclassMirror</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </protocol>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the ETProtocolMirror
        protocol
      </heading>
      <protocol name="ETProtocolMirror">
        <declared>ETReflection.h</declared>
        <conform>ETMirror</conform>
        <conform>ETCollection</conform>
        <desc>
          <p>
            @group Reflection @abstract Protocol for a mirror
            that represents a protocol.
          </p>
        </desc>
        <method type="NSArray*">
          <sel>allAncestorProtocolMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>allMethodMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>ancestorProtocolMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>methodMirrors</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </protocol>
    </chapter>
    <chapter>
      <heading>ETReflection functions</heading>
      <p></p>
      <function type="BOOL" name="ETGetInstanceVariableValueForKey">
        <arg type="id">object</arg>
        <arg type="id*">value</arg>
        <arg type="NSString*">key</arg>
        <desc>
          <p>
            Returns the <var>value</var> into the
            <var>object</var> instance variable by looking it up
            with the Key Value Coding semantics based on the
            <var>key</var>, and returns <code>YES</code> on
            success.
          </p>
          <p>
            For a <var>key</var> equal to 'variable', Key Value
            Coding search pattern to access instance variables
            happens in the order below:
          </p>
          <list>
            <item>_variable</item> <item>_isVariable</item>
            <item>variable</item> <item>isVariable</item>
          </list>
          <p>
            Valid values are all the supported Key Value Coding
            types such as <strong>id</strong>,
            <strong>float</strong> or NSRect boxed in a
            NSValue etc.
          </p>
          <p>
            If no matching instance variable is found, returns
            <code>NO</code>. Which means that either the
            <var>key</var> is invalid or the declared ivar type
            is not supported by Key Value Coding.
          </p>
          <p>
            This function won't invoke -[NSObject
            valueForUndefinedKey:]. <br /> To
            implement these extra Key Value Coding behaviors,
            check whether <code>NO</code> is returned (to call
            -valueForUndefinedKey:).
          </p>
        </desc>
      </function>
      <function type="BOOL" name="ETSetInstanceVariableValueForKey">
        <arg type="id">object</arg>
        <arg type="id">value</arg>
        <arg type="NSString*">key</arg>
        <desc>
          <p>
            Sets the <var>value</var> into the <var>object</var>
            instance variable by looking it up with the Key
            Value Coding semantics based on the <var>key</var>,
            and returns <code>YES</code> on success.
          </p>
          <p>
            For a <var>key</var> equal to 'variable', Key Value
            Coding search pattern to access instance variables
            happens in the order below:
          </p>
          <list>
            <item>_variable</item> <item>_isVariable</item>
            <item>variable</item> <item>isVariable</item>
          </list>
          <p>
            Valid values are all the supported Key Value Coding
            types such as <strong>id</strong>,
            <strong>float</strong> or NSRect boxed in a
            NSValue etc.
          </p>
          <p>
            If no matching instance variable is found, returns
            <code>NO</code>. Which means that either the
            <var>key</var> is invalid or the declared ivar type
            is not supported by Key Value Coding.
          </p>
          <p>
            This function won't invoke -[NSObject
            setValue:forUndefinedKey:] and
            -[NSObject setNilValueForKey:]. <br /> To
            implement these extra Key Value Coding behaviors,
            check <code>nil</code> and NSNull <var>value</var>
            before calling this function (to call
            -setNilValueForKey:), and check
            whether <code>NO</code> is returned (to call
            -setValue:forUndefinedKey:).
          </p>
        </desc>
      </function>
    </chapter>
  </body>
</gsdoc>
