<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="ETException">
  <head>
    <title>ETException documentation</title>
    <author name="Generated by pi"></author>
    <copy>2008 David Chisnall</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the
        NSException(ETException) category
      </heading>
      <category name="ETException" class="NSException">
        <declared>ETException.h</declared>
        <desc>
          <p>
            @group Language Extensions @abstract Objective-C
            resumable and restartable exception support.
          </p>
        </desc>
        <method type="void" factory="yes">
          <sel>enableEtoileExceptions</sel>
          <desc>
            <p>
              Enable resumable and restartable exception
              handling. This only needs to be called once;
              subsequent calls will have no effect. If it is
              not called, then [NSException raise] will have the
              default behaviour.
            </p>
            <p>
              Note: The OS X implementation of NSException does
              not conform to the documented behaviour. Resumable
              and restartable exceptions are not supported when
              using Apple's Foundation framework, unless
              exceptions are raised by creating an
              NSException object and then sending it a
              <ref type="method" id="-raise">
                -raise
              </ref>
              message.
            </p>
          </desc>
        </method>
        <method type="void" factory="yes">
          <sel>popHandlerForException:</sel>
          <arg type="NSString*">aName</arg>
          <desc>
            <p>
              Removes the top exception handler from the stack
              corresponding to the name.
            </p>
          </desc>
        </method>
        <method type="void" factory="yes">
          <sel>pushHandler:</sel>
          <arg type="ETHandler">aHandler</arg>
          <sel>forException:</sel>
          <arg type="NSString*">aName</arg>
          <desc>
            <p>
              Adds <var>aHandler</var> to the top of the exception
              handling stack for exceptions named
              <var>aName</var>. Any exceptions called with the
              specified name will cause this handler to be
              invoked while it is on top of the exception
              handling stack.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>ETException types</heading>
      <p></p>
      <type type="enum ..." name="ETExceptionType">
        <desc>
          <p>
            Type of exception. Used as the return type from
            exception handlers. Abort causes stack unwinding.
            Resume continues execution after the line that
            raised the exception and retry causes the block that
            caused the exception to be retried, if it was
            declared as restartable.
          </p>
          <deflist>
            <term><em>EXCEPTION_ABORT</em></term> <desc></desc>
            <term><em>EXCEPTION_RESUME</em></term> <desc></desc>
            <term><em>EXCEPTION_RETRY</em></term> <desc></desc>
          </deflist>
        </desc>
      </type>
      <type type="ETExceptionType(*" name="ETHandler">
        <desc>
          <p>
            Prototype for exception handler function.
          </p>
        </desc>
      </type>
    </chapter>
    <chapter>
      <heading>ETException macros</heading>
      <p></p>
      <macro name="NS_RESTARTABLE_DURING">
        <desc>
          <p>
            Version of NS_DURING which permits restarts to
            occur if restartable exception is issued. In the
            event of a restartable exception being raised,
            control will jump to the start of this block. Care
            must be taken to avoid infinite loops and memory
            leaks.
          </p>
        </desc>
      </macro>
      <macro name="NS_RESTARTABLE_HANDLER">
        <desc>
          <p>
            End a restartable exception block. Equivalent to
            NS_HANDLER to be used with
            NS_RESTARTABLE_DURING.
          </p>
        </desc>
      </macro>
      <macro name="SET_HANDLER">
        <arg>exception</arg>
        <arg>handler</arg>
        <desc>
          <p>
            Adds the specified <var>handler</var> for the named
            <var>exception</var> for the duraction of the current
            lexical scope.
          </p>
        </desc>
      </macro>
    </chapter>
    <chapter>
      <heading>ETException variables</heading>
      <p></p>
      <variable type="ETExceptionType" name="GLOBAL_EXCEPTION_STATE">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </variable>
    </chapter>
    <chapter>
      <heading>ETException functions</heading>
      <p></p>
      <function type="void" name="pophandler">
        <arg type="void*">exception</arg>
        <desc>
          <p>
            Function installed as a cleanup function by
            SET_HANDLER to pop the added
            <var>exception</var> off the stack when the current
            lexical scope is exited.
          </p>
        </desc>
      </function>
    </chapter>
  </body>
</gsdoc>
