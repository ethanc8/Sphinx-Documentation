<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="ETPropertyDescription">
  <head>
    <title>ETPropertyDescription class documentation</title>
    <author name="Generated by pi"></author>
    <copy>2009 Eric Wasylishen, Quentin Mathe</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the ETPropertyDescription
        class
      </heading>
      <class name="ETPropertyDescription" super="ETModelElementDescription">
        <declared>ETPropertyDescription.h</declared>
        <desc>
          <p>
            @group Metamodel @abstract Description of an
            entity's property.
          </p>
          <p>
            A property description represents either an attribute or
            a relationship that belongs to an entity. Whether a
            property represents an attribute or relationships
            depends on the
            <ref type="method" id="-type">
              -type
            </ref>
            (the entity description for the propery value).
          </p>
          <p>
            For a primitive type (see -[ETEntityDescription
            isPrimitive]), the property is an attribute.
            For a non-primitive type, it is a relationship. For
            more explanations,
            <ref type="method" id="-isAttribute">
              -isAttribute
            </ref>
            and
            <ref type="method" id="-isRelationship">
              -isRelationship
            </ref>
            .
          </p>
          <p>
            @section Conceptual Model
          </p>
          <p>
            For a Metamodel overview, see
            ETModelElementDescription.
          </p>
          <p>
            @section Model Description
          </p>
          <p>
            ETPropertyDescription provides a
            large number of properties to describe the model,
            these properties can be split into three categories:
          </p>
          <deflist>
            <term>Model Specification</term>
            <desc>
              Properties to describe new and existing model
              and metamodel (the FAME-based metamodel)
            </desc>
            <term>Persistency Specification</term>
            <desc>
              Properties to describe persistent model and
              persistency rules (can be leveraged or not by
              a Persistency framework e.g. CoreObject)
            </desc>
            <term>Model Presentation Specification</term>
            <desc>
              Properties to describe model presentation in
              the UI, and model-driven generation (can be leveraged
              or not by a UI or Model Generation framework)
            </desc>
          </deflist>
          <p>
            The Model Specification properties must be edited to
            get working metamodel.
          </p>
          <p>
            Both Persistency and Model Presentation Specifications
            are optional. These additional specifications are
            usually generic enough to be reused by Persistency
            and UI frameworks other than CoreObject and EtoileUI.
          </p>
          <p>
            Warning: For now, CoreObject validation rules are
            hardcoded into -[ETPropertyDescription
            checkConstraints:], and this limits the
            possibility to reuse the Persistency
            Specification without CoreObject.
          </p>
          <p>
            Additional properties or specification can be
            added by subclassing ETPropertyDescription. In the
            future, we will probably support extending the
            metamodel dynamically at run-time too.
          </p>
          <p>
            @section Role and Validation
          </p>
          <p>
            A role can be set to provide validation rules that
            describe attribute or relationship constraints in
            a particular metamodel. The role must be compatible with
            the current <ref type="method" id="-type">-type</ref>.
            For example, when
            <ref type="method" id="-isRelationship">
              -isRelationship
            </ref>
            is <code>NO</code>, setting a ETRelationshipRole will
            cause a warning in
            <ref type="method" id="-checkConstraints">
              -checkConstraints
            </ref>
            .
          </p>
          <p>
            The validation is delegated to the role by
            <ref type="method" id="-validateValue:forKey:">
              -validateValue:forKey:
            </ref>
            .
          </p>
          <p>
            @section Multivalues
          </p>
          <p>
            Both attributes and relationships can be univalued or
            multivalued. A multivalued relationship is a
            too-many relationship, while a univalued
            relationship is a to-one relationship. A
            multivalued attribute is a value object
            collection (multivalued relationships are entity
            object collections).
          </p>
          <p>
            @section Late-Bound References
          </p>
          <p>
            For easily creating property descriptions that refer to
            each other or entity descriptions, without worrying
            about the dependencies accross all the model element
            descriptions, ETPropertyDescriptions includes
            properties such as
            <ref type="method" id="-setOppositeName:">
              -setOppositeName:
            </ref>
            or
            <ref type="method" id="-setTypeName:">
              -setTypeName:
            </ref>
            that can be used to refer to other
            ETModelElementDescription objects
            by their <ref type="method" id="-name">-name</ref> or
            <ref type="method" id="-fullName">
              -fullName
            </ref>
            .
          </p>
          <p>
            When all these related descriptions are added to a
            repository with -[ETModelDescriptionRepository
            addUnresolvedDescription:],
            -[ETModelDescriptionRepository
            resolveNamedObjectReferences]
            can be called to resolve the name references to their
            real objects.
          </p>
          <p>
            For example, the
            <ref type="method" id="-opposite">
              -opposite
            </ref>
            is set based on the ETPropertyDescription object
            returned by -[ETModelDescriptionRepository
            descriptionForName:] for
            <ref type="method" id="-oppositeName">
              -oppositeName
            </ref>
            .
          </p>
          <p>
            For properties descriptions added to entity
            descriptions returned by +[NSObject
            newEntityDescription], all these
            model element descriptions are collected and resolved
            in the main repository. For other repositories or entity
            descriptions created outside of +[NSObject
            newEntityDescription], you must call
            -[ETModelDescriptionRepository
            resolveNamedObjectReferences]
            manually.
          </p>
          <p>
            @section Freezing
          </p>
          <p>
            If
            <ref type="method" id="-isPersistent">
              -isPersistent
            </ref>
            returns <code>NO</code> and the opposite is not
            persistent either, the property description
            won't be frozen when the owner is, and mutating the
            property description state will remain possible
            (except turning it into a persistent property
            description).
          </p>
          <p>
            If <ref type="method" id="-isFrozen">-isFrozen</ref> is
            <code>YES</code>, the property description is
            largely immutable, only the properties declared in
            Model Presentation remains mutable (to support
            customizing the UI generation for persistent
            objects at run-time).
          </p>
        </desc>
        <method type="ETPropertyDescription*" factory="yes">
          <sel>descriptionWithName:</sel>
          <arg type="NSString*">aName</arg>
          <sel>type:</sel>
          <arg type="ETEntityDescription*">aType</arg>
          <desc>
            <p>
              @taskunit Initialization
            </p>
            <p>
              Returns an autoreleased property description.
            </p>
            <p>
              The given name and type must not be <code>nil</code>,
              otherwise an NSInvalidArgumentException is
              raised.
            </p>
          </desc>
        </method>
        <method type="ETPropertyDescription*" factory="yes">
          <sel>descriptionWithName:</sel>
          <arg type="NSString*">aName</arg>
          <sel>typeName:</sel>
          <arg type="NSString*">aTypeName</arg>
          <desc>
            <p>
              Returns an autoreleased property description.
            </p>
            <p>
              The given name and type name must not be
              <code>nil</code>, otherwise an
              NSInvalidArgumentException is
              raised.
            </p>
          </desc>
        </method>
        <method type="ETEntityDescription*" factory="yes">
          <sel>newEntityDescription</sel>
          <desc>
            <p>
              @taskunit Metamodel Description
            </p>
            <p>
              Self-description (aka meta-metamodel).
            </p>
          </desc>
        </method>
        <method type="void" override="subclass">
          <sel>makeFrozen</sel>
          <desc>
            <p>
              Pass a block which takes one argument (the value
              being validated) and returns an ETValidationResult
            </p>
            <p>
              @taskunit Internal
            </p>
            <p>
              Marks the receiver as frozen. From this point, if
              <ref type="method" id="-isPersistent">
                -isPersistent
              </ref>
              returns <code>YES</code> and the owner is frozen,
              the receiver is immutable and any attempt to mutate
              it will cause an exception to be thrown.
            </p>
          </desc>
        </method>
        <method type="ETValidationResult*">
          <sel>validateValue:</sel>
          <arg type="id">value</arg>
          <sel>forKey:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <p>
              @taskunit Validation
            </p>
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
