<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSObject+DoubleDispatch">
  <head>
    <title>NSObject+DoubleDispatch documentation</title>
    <author name="Generated by pi"></author>
    <copy>2007 Quentin Mathe</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the
        NSObject(ETDoubleDispatch) category
      </heading>
      <category name="ETDoubleDispatch" class="NSObject">
        <declared>NSObject+DoubleDispatch.h</declared>
        <desc>
          <p>
            @group Language Extensions @abstract Objective-C
            <strong>double</strong> dispatch support.
          </p>
          <p>
            This category provides a visitor which supports
            double-dispatch on all visited objects
            without implementing extra methods (such as
            <em>accept:</em> on the visited object side).
          </p>
          <p>
            For a more detailed discussion, see
            <ref type="method" id="-visit:">
              -visit:
            </ref>
            .
          </p>
          <p>
            Here is a visitor example:
          </p>
<example>

@interface ETView : NSView
@end

@interface UIVisitor : NSObject
@end

@implementation ETView

+ (NSString *) typePrefix
{
    return @"ET";
}

@end

// To start using the visitor, instantiate a visitor and do [visitor visit: someWindow]
@implementation UIVisitor

// visitXXX methods return id, but returning void would be valid

- (id) visitWindow: (NSWindow *)aWindow
{
    NSLog(@"Visiting window %@", aWindow);
    return [self visit: [aWindow contentView]];
}

- (id) visitView: (NSView *)aView
{
    NSLog(@"Visiting view %@", aView);
    for (NSView *subview in [aView subviews])
    {
        [self visit: subview];
    }
    return nil;
}

// Show how you can include the class name prefix and how such a method has 
// priority over a method without any type prefix such as -visitView:.
- (id) visitETView: (ETView *)aSpecialView
{
    NSLog(@"Visiting special view %@", aSpecialView);
    return nil;
}

@end
</example>
        </desc>
        <method type="NSString*" override="dummy">
          <sel>doubleDispatchPrefix</sel>
          <desc>
            <p>
              Returns the method name prefix used to build the
              method name to be invoked by the
              <strong>double</strong> dispatch.
            </p>
            <p>
              By default, returns <em>visit</em>.
            </p>
            <p>
              Can be overriden to return a custom prefix such as
              <em>visit</em>.
            </p>
            <p>
              See also
              <ref type="method" id="-visit:">
                -visit:
              </ref>
              .
            </p>
          </desc>
        </method>
        <method type="SEL" override="dummy">
          <sel>doubleDispatchSelectorWithObject:</sel>
          <arg type="id">object</arg>
          <sel>ofType:</sel>
          <arg type="NSString*">aType</arg>
          <desc>
            <p>
              Builds and returns the selector to be invoked for
              a <strong>double</strong> dispatch on the given type.
            </p>
            <p>
              For a detailed example, see
              <ref type="method" id="-visit:">
                -visit:
              </ref>
              .
            </p>
            <p>
              Can be overriden in subclasses to implement an
              alternative strategy to build the method
              names targeted by the <strong>double</strong>
              dispatch.
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>supportsDoubleDispatchWithObject:</sel>
          <arg type="id">object</arg>
          <desc>
            <p>
              Returns whether the receiver implements a
              <strong>double</strong> dispatch method that
              corresponds to the given <var>object</var>
              type.
            </p>
            <p>
              This method serves a similar purpose than -[NSObject
              respondsToSelector:].
            </p>
            <p>
              See also
              <ref type="method" id="-visit:">
                -visit:
              </ref>
              .
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>tryToPerformSelector:</sel>
          <arg type="SEL">selector</arg>
          <sel>withObject:</sel>
          <arg type="id">object</arg>
          <sel>result:</sel>
          <arg type="BOOL*">performed</arg>
          <desc>
            <p>
              Tries to invoke the <var>selector</var> with the
              given <var>object</var> as first argument, and
              returns either the value returned by the invoked
              method or <code>nil</code>.
            </p>
            <p>
              If the receiver doesn't respond to the
              <var>selector</var>, <var>performed</var> is set to
              <code>NO</code> and <code>nil</code> is returned,
              otherwise <var>performed</var> is set
              <code>YES</code>.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>visit:</sel>
          <arg type="id">object</arg>
          <desc>
            <p>
              Tries to build a method name based on the given
              <var>object</var> type and invoke it.
            </p>
            <p>
              For example, if you have a NSView, and you pass it as
              an argument to
              <ref type="method" id="-visit:">
                -visit:
              </ref>
              , the selector <em>visitNSView:</em> is built and
              invoked with the given view on the receiver. If
              the receiver doesn't respond to <em>visitNSView:</em>
              , then <em>visitView:</em> is built by trimming the
              class name prefix, and invoked. If the receiver
              still doesn't respond the last built selector, then
              it fails silently and returns <code>nil</code>. <br />
              <strong>Class</strong> name prefix are trimmed
              based on the value returned by +[NSObject(Etoile)
              typePrefix]. You can override this last
              method to return a custom prefix, by default it
              returns <em>NS</em>.
            </p>
            <p>
              If you want to use another method name prefix than
              <em>visit</em> (e.g. to build a selector such as
              <em>renderView:</em>),
              <ref type="method" id="-doubleDispatchPrefix">
                -doubleDispatchPrefix
              </ref>
              can be overriden.
            </p>
            <p>
              Subclasses can override this method, if they
              want to customize the double-dispatch behavior.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>visit:</sel>
          <arg type="id">object</arg>
          <sel>result:</sel>
          <arg type="BOOL*">performed</arg>
          <desc>
            <p>
              Does the same than
              <ref type="method" id="-visit:">
                -visit:
              </ref>
              but reports whether a double-dispatch method was
              succesfully invoked by setting
              <var>performed</var> to <code>YES</code>, or
              <code>NO</code> when no such method was found.
            </p>
            <p>
              See also
              <ref type="method" id="-visit:">
                -visit:
              </ref>
              and
              <ref type="method" id="-supportsDoubleDispatchWithObject:">-supportsDoubleDispatchWithObject:</ref>.
            </p>
            <p>
              This method is called by
              <ref type="method" id="-visit:">
                -visit:
              </ref>
              and implements the double-dispatch logic.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
