<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="ETModelDescriptionRepository">
  <head>
    <title>ETModelDescriptionRepository class documentation</title>
    <author name="Generated by pi"></author>
    <copy>2010 Quentin Mathe</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the
        ETModelDescriptionRepository class
      </heading>
      <class name="ETModelDescriptionRepository" super="NSObject">
        <declared>ETModelDescriptionRepository.h</declared>
        <conform>ETCollection</conform>
        <conform>ETCollectionMutation</conform>
        <desc>
          <p>
            @group Metamodel @abstract Repository used to store
            the entity descriptions at runtime.
          </p>
          <p>
            Each repository manages a closed model description
            graph. Model element descriptions present in a
            repository must only reference objects that
            belong to the same repository.
          </p>
          <p>
            The repository contains three type of element
            descriptions:
          </p>
          <list>
            <item>ETPackageDescription</item>
            <item>ETEntityDescription</item>
            <item>ETPropertyDescription</item>
          </list>
          <p>
            @section Main and Additional Repositories
          </p>
          <p>
            A
            <ref type="method" id="+mainRepository">
              +mainRepository
            </ref>
            is created in every tool or application at launch time.
            In addition to the core metamodel (Object, String,
            Number etc.) present in all repositories, it
            contains the meta-metamodel right from the start.
          </p>
          <p>
            Additional repositories can be created. For
            example, to store variations on the main
            repository data model.
          </p>
          <p>
            All repositories are mostly empty initially. You can
            collect entity descriptions provided through
            +[NSObject newEntityDescription] in additional
            repositories with
            <ref type="method" id="-collectEntityDescriptionsFromClass:excludedClasses:resolvedNow:">-collectEntityDescriptionsFromClass:excludedClasses:resolvedNow:</ref> or <ref type="method" id="-registerEntityDescriptionsForClasses:resolveNow:">-registerEntityDescriptionsForClasses:resolveNow:</ref>. Both methods will automatically attempt to invoke <ref type="method" id="+newEntityDescription">+newEntityDescription</ref> on unknown property or parent types, and register these additional entity descriptions. Don't forget to call <ref type="method" id="-checkConstraints:">-checkConstraints:</ref> before using the repository.
          </p>
          <p>
            @section Registering Model Description
          </p>
          <p>
            To register an entity description, you must register the
            entity and its property descriptions, and do the
            same for the parent entity in case it is not
            registered yet.
          </p>
<example>
[repo addDescription: entityDesc];
[repo addDescriptions: [entityDesc propertyDescriptions]];

[repo addDescription: [entityDesc parentEntity]];
[repo addDescriptions: [[entityDesc parentEntity] propertyDescriptions]];

// and so on
</example>
          <p>
            You must also register at the same time any entity
            description used as -[ETPropertyDescription
            type] or -[ETPropertyDescription persistentType], and
            any property description referred to by
            -[ETPropertyDescription opposite].
            If this last property description itself belongs to an
            unregisted entity, you must register this entity
            description as described previously and so on.
          </p>
          <p>
            To register a package description, you must register the
            entities (and all the property and entity
            descriptions they refer to) and the property
            extensions in a way similar to the previous
            example.
          </p>
          <p>
            Note: If the entity describes a class, once
            registered, you usually bind it to its class as
            described in the section Entity and
            <strong>Class</strong> Description Binding.
          </p>
          <p>
            @section Resolving Named References
          </p>
          <p>
            If your model element descriptions contains named
            references (rather than explicit ones to the
            real objects) e.g. -[ETProprertyDescription
            oppositeName], these descriptions must be
            added with
            <ref type="method" id="-addUnresolvedDescription:">
              -addUnresolvedDescription:
            </ref>
            , and
            <ref type="method" id="-resolveNamedObjectReferences">
              -resolveNamedObjectReferences
            </ref>
            must be called once you don't need to call
            <ref type="method" id="-addDescription:">
              -addDescription:
            </ref>
            and
            <ref type="method" id="-addUnresolvedDescription:">
              -addUnresolvedDescription:
            </ref>
            anymore.
          </p>
          <p>
            For references pointing to a package name
            -[ETEntityDescription ownerName] and
            -[ETPropertyDescription
            packageName],
            <ref type="method" id="-resolveNamedObjectReferences">
              -resolveNamedObjectReferences
            </ref>
            will automatically create and register the missing
            package descriptions.
          </p>
          <p>
            @section Entity and <strong>Class</strong>
            Description Binding
          </p>
          <p>
            By default, a repository can contain entity descriptions
            that apply to:
          </p>
          <list>
            <item>
              a prototype or a similar object (a free-standing entity
              is usually used with ETAdaptiveModelObject)
            </item>
            <item>a class</item>
          </list>
          <p>
            For entity descriptions describing a class, the two-way
            binding is established with
            <ref type="method" id="-setEntityDescription:forClass:">
              -setEntityDescription:forClass:
            </ref>
            .
          </p>
          <p>
            If no bound entity description or class can be found,
            <ref type="method" id="-entityDescriptionForClass:">
              -entityDescriptionForClass:
            </ref>
            and
            <ref type="method" id="-classForEntityDescription">
              -classForEntityDescription
            </ref>
            both attempt to return a parent entity or superclass.
          </p>
          <p>
            @section Consistency Checking
          </p>
          <p>
            Every time entity or package descriptions are added
            to the repository, you must check the model description
            graph consistency with
            <ref type="method" id="-checkConstraints:">
              -checkConstraints:
            </ref>
            .
          </p>
          <p>
            It is up to you to do it, because the repository has no
            way to know when you are done adding descriptions and
            the repository content is in a coherent state that
            won't raise warnings.
          </p>
        </desc>
        <method type="id" factory="yes">
          <sel>mainRepository</sel>
          <desc>
            <p>
              @taskunit Initialization
            </p>
            <p>
              Returns the initial repository that exists in
              each process.
            </p>
            <p>
              When this repository is created, entity descriptions
              that make up the meta-metamodel are collected by
              invoking
              <ref type="method" id="+newEntityDescription">
                +newEntityDescription
              </ref>
              on every ETModelElementDescription subclass and bound
              to the class that provided the description. See
              <ref type="method" id="-setEntityDescription:forClass:">
                -setEntityDescription:forClass:
              </ref>
              .
            </p>
            <p>
              After collecting the entity descriptions,
              <ref type="method" id="-checkConstraints:">
                -checkConstraints:
              </ref>
              is called and must return no warnings, otherwise a
              NSInternalInconsistencyException
              is raised.
            </p>
          </desc>
        </method>
        <method type="ETEntityDescription*" factory="yes">
          <sel>newEntityDescription</sel>
          <desc>
            <p>
              @taskunit Metamodel Description
            </p>
            <p>
              Self-description (aka meta-metamodel).
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>addDescription:</sel>
          <arg type="ETModelElementDescription*">aDescription</arg>
          <desc>
            <p>
              Adds the given package, entity or property
              description to the repository.
            </p>
            <p>
              If the given description is an entity description
              whose owner is <code>nil</code>,
              <ref type="method" id="-anonymousPackageDescription">
                -anonymousPackageDescription
              </ref>
              becomes its owner, and it gets registered under
              the full name 'Anonymous.MyEntityName'.
            </p>
            <p>
              When you are done adding and removing descriptions,
              don't forget to call
              <ref type="method" id="-checkConstraints:">
                -checkConstraints:
              </ref>
              . If the added or removed descriptions include any
              entity descriptions, use also
              <ref type="method" id="-setEntityDescription:forClass:">
                -setEntityDescription:forClass:
              </ref>
              to update the bindings between classes and entity
              descriptions.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>addUnresolvedDescription:</sel>
          <arg type="ETModelElementDescription*">aDescription</arg>
          <desc>
            <p>
              Adds the given package, entity or property
              description to the repository.
            </p>
            <p>
              Full names can be set as late-bound references to
              other ETModelElementDescription objects, in all the
              following properties:
            </p>
            <list>
              <item>
                ownerName (ETPropertyDescription and
                ETEntityDescription) -> owner
              </item>
              <item>
                packageName (ETPropertyDescription and
                ETEntityDescription) -> package
              </item>
              <item>
                parentName (ETEntityDescription) -> parent
              </item>
              <item>
                oppositeName (ETPropertyDescription) ->
                opposite
              </item>
              <item>
                typeName (ETPropertyDescription) -> type
              </item>
              <item>
                persistentTypeName
                (ETPropertyDescription) ->
                persistentType
              </item>
            </list>
            <p>
              Note: the name that follows the arrow is the
              property to be set.
            </p>
            <p>
              For example,
              <code>
                [anEntityDesc setParentName:
                @"MyPackage.MySuperEntity"]
              </code>
              or
              <code>
                [aPropertyDesc setOppositeName:
                @"MyPackage.MyEntity.whatever"]
              </code>
              . For entity descriptions that belong to the anonymous
              package, the <em>Anonymous</em> prefix can be
              ommitted. For example, <em>@"NSDate"</em> is
              interpreted as <em>@"Anonymous.NSDate"</em>
              in
              <ref type="method" id="-resolveNamedObjectReferences">
                -resolveNamedObjectReferences
              </ref>
              .
            </p>
            <p>
              Once all the descriptions (unresolved or not) are
              registered to ensure a valid repository state,
              if any unresolved description was added, you must call
              <ref type="method" id="-resolveNamedObjectReferences">
                -resolveNamedObjectReferences
              </ref>
              on the repository before using it or any registered
              description. If the added entity description
              is equal to a previously registered entity (based on a
              full name comparison), raises an exception.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>checkConstraints:</sel>
          <arg type="NSMutableArray*">warnings</arg>
          <desc>
            <p>
              @taskunit Runtime Consistency Check
            </p>
            <p>
              Checks the receiver content conforms to the FM3
              constraint spec and adds a
              <strong>short</strong> warning to the given
              array for each failure.
            </p>
          </desc>
        </method>
        <method type="Class">
          <sel>classForEntityDescription:</sel>
          <arg type="ETEntityDescription*">anEntityDescription</arg>
          <desc>
            <p>
              @taskunit Binding Descriptions to
              <strong>Class</strong> Instances and Prototypes
            </p>
            <p>
              Returns the class bound to the given entity
              description.
            </p>
            <p>
              If no class is explicitly bound, returns the first
              bound class in the parent entity chain (by checking
              recursively until reaching the root entity
              whether the parent entity is bound to a class).
            </p>
            <p>
              See
              <ref type="method" id="-entityDescriptionForClass:">
                -entityDescriptionForClass:
              </ref>
              and
              <ref type="method" id="-setEntityDescription:forClass:">
                -setEntityDescription:forClass:
              </ref>
              .
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>collectEntityDescriptionsFromClass:</sel>
          <arg type="Class">aClass</arg>
          <sel>excludedClasses:</sel>
          <arg type="NSSet*">excludedClasses</arg>
          <sel>resolveNow:</sel>
          <arg type="BOOL">resolve</arg>
          <desc>
            <p>
              @taskunit Collecting Entity Descriptions in
              <strong>Class</strong> Hierarchy
            </p>
            <p>
              Traverses the class hierarchy downwards to
              collect the entity descriptions by invoking
              <ref type="method" id="+newEntityDescription">
                +newEntityDescription
              </ref>
              on each class (including the given class) and bind
              each entity description to the class that provided
              it. See
              <ref type="method" id="-setEntityDescription:forClass:">
                -setEntityDescription:forClass:
              </ref>
              .
            </p>
            <p>
              If <var>resolve</var> is <code>YES</code>, the named
              references that exists between the
              descriptions are resolved immediately with
              <ref type="method" id="-resolveNamedObjectReferences">
                -resolveNamedObjectReferences
              </ref>
              . Otherwise they are not and the repository remain in
              an invalid state until
              <ref type="method" id="-resolveNamedObjectReferences">
                -resolveNamedObjectReferences
              </ref>
              is called. See also
              <ref type="method" id="-registerEntityDescriptionsForClasses:resolveNow:">-registerEntityDescriptionsForClasses:resolveNow:</ref>.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>descriptionForName:</sel>
          <arg type="NSString*">aFullName</arg>
          <desc>
            <p>
              Returns a package, entity or property description
              registered for the given full name.
            </p>
            <p>
              e.g. <em>Anonymous.NSObject</em> for NSObject
              entity. For model element descriptions that
              belong to the anonymous package, the
              <em>Anonymous</em> prefix can be ommitted. For
              example,
              <em>@"ETModelElementDescription.name"</em> is
              interpreted as
              <em>@"Anonymous.ETModelDescription.name"</em>.
            </p>
          </desc>
        </method>
        <method type="ETEntityDescription*">
          <sel>entityDescriptionForClass:</sel>
          <arg type="Class">aClass</arg>
          <desc>
            <p>
              Returns the entity description bound to the given
              class.
            </p>
            <p>
              If no entity description is explicitly bound, returns
              the first bound entity in the superclass chain (by
              checking recursively until reaching the root
              class whether the superclass is bound to an
              entity).
            </p>
            <p>
              See
              <ref type="method" id="-classForEntityDescription:">
                -classForEntityDescription:
              </ref>
              and
              <ref type="method" id="-setEntityDescription:forClass:">
                -setEntityDescription:forClass:
              </ref>
              .
            </p>
          </desc>
        </method>
        <method type="id" init="yes">
          <sel>init</sel>
          <desc>
            <p>
              Returns a new repository that just contains the
              core metamodel (Object, Number, Boolean, String,
              Date, Value) and additional primitive entity
              descriptions (e.g. NSInteger, NSPoint etc.).
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>registerEntityDescriptionsForClasses:</sel>
          <arg type="NSSet*">classes</arg>
          <sel>resolveNow:</sel>
          <arg type="BOOL">resolve</arg>
          <desc>
            <p>
              Collects the entity descriptions by invoking
              <ref type="method" id="+newEntityDescription">
                +newEntityDescription
              </ref>
              on each given class and bind each entity description
              to the class that provided it. See
              <ref type="method" id="-setEntityDescription:forClass:">
                -setEntityDescription:forClass:
              </ref>
              . For resolveNow, see
              <ref type="method" id="-collectEntityDescriptionsFromClass:excludedClasses:resolveNow:">-collectEntityDescriptionsFromClass:excludedClasses:resolveNow:</ref>.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>removeDescription:</sel>
          <arg type="ETModelElementDescription*">aDescription</arg>
          <desc>
            <p>
              Removes the given package, entity or property
              description from the repository.
            </p>
            <p>
              When you are done adding and removing descriptions,
              don't forget to call
              <ref type="method" id="-checkConstraints:">
                -checkConstraints:
              </ref>
              . If the added or removed descriptions include any
              entity descriptions, use also
              <ref type="method" id="-setEntityDescription:forClass:">
                -setEntityDescription:forClass:
              </ref>
              to update the bindings between classes and entity
              descriptions.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>resolveNamedObjectReferences</sel>
          <desc>
            <p>
              @taskunit Resolving References Between Entity
              Descriptions
            </p>
            <p>
              Resolves named references for all the
              description properties listed in
              <ref type="method" id="-addUnresolvedDescription:">
                -addUnresolvedDescription:
              </ref>
              . The package descriptions missing in the repository
              are also created based on -[ETEntityDescription
              ownerName] for the unresolved entity
              descriptions. By default, -[NSObject
              newBasicEntityDescription]
              sets the package name to the bundle identifier
              owning the class returning the entity description.
            </p>
            <p>
              For more details, you should also read Named
              References section in ETPropertyDescription
              class description.
            </p>
            <p>
              When you are done resolving references, don't forget
              to call
              <ref type="method" id="-checkConstraints:">
                -checkConstraints:
              </ref>
              . If the added or removed descriptions include any
              entity descriptions, use also
              <ref type="method" id="-setEntityDescription:forClass:">
                -setEntityDescription:forClass:
              </ref>
              to update the bindings between classes and entity
              descriptions.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>setEntityDescription:</sel>
          <arg type="ETEntityDescription*">anEntityDescription</arg>
          <sel>forClass:</sel>
          <arg type="Class">aClass</arg>
          <desc>
            <p>
              Creates a two-way binding between the given
              entity description and class.
            </p>
            <p>
              For entity descriptions not created in +[NSObject
              newEntityDescription] and not
              registered in the
              <ref type="method" id="+mainRepository">
                +mainRepository
              </ref>
              , this method must be invoked explicitly.
            </p>
            <p>
              See
              <ref type="method" id="-entityDescriptionForClass:">
                -entityDescriptionForClass:
              </ref>
              and
              <ref type="method" id="-classForEntityDescription:">
                -classForEntityDescription:
              </ref>
              .
            </p>
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
