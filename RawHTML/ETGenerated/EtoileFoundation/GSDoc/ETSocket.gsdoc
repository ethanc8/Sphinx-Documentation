<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="ETSocket">
  <head>
    <title>ETSocket documentation</title>
    <author name="Generated by pi"></author>
    <copy>2009 David Chisnall</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the ETListenSocket class
      </heading>
      <class name="ETListenSocket" super="ETSocket">
        <declared>ETSocket.h</declared>
        <desc>
          <p>
            @group Network and Communication @abstract A server
            socket that accepts incoming connections.
          </p>
        </desc>
        <ivariable type="BOOL" name="hasAccept" validity="protected">
          <desc>
            <p>
              Tracks whether the socket is already accepting
              connections.
            </p>
          </desc>
        </ivariable>
        <method type="id" factory="yes">
          <sel>listenSocketForAddress:</sel>
          <arg type="NSString*">anAddress</arg>
          <sel>onPort:</sel>
          <arg type="unsigned short">aPort</arg>
          <desc>
            <p>
              Returns a socket listening on <var>aPort</var>
              for the address specified by <var>anAddress</var>.
            </p>
          </desc>
        </method>
        <method type="id" factory="yes">
          <sel>listenSocketOnPort:</sel>
          <arg type="unsigned short">aPort</arg>
          <desc>
            <p>
              Returns a socket listening <var>aPort</var> for
              an address of the local machine.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>initForAddress:</sel>
          <arg type="NSString*">anAddress</arg>
          <sel>onPort:</sel>
          <arg type="unsigned short">aPort</arg>
          <desc>
            <p>
              Initializes the socket to listen on
              <var>aPort</var> for the address specified by
              <var>anAddress</var>.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>initOnPort:</sel>
          <arg type="unsigned short">aPort</arg>
          <desc>
            <p>
              Initializes the socket to listen on
              <var>aPort</var> for an address of the local
              machine.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>initWithSocketAddress:</sel>
          <arg type="NSData*">socketAddress</arg>
          <desc>
            <p>
              Initializes a listening socket with the
              contents of a sockaddr_* structure encapsulated
              in the NSData object <var>socketAddress</var>.
            </p>
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the ETSocket class
      </heading>
      <class name="ETSocket" super="NSObject">
        <declared>ETSocket.h</declared>
        <desc>
          <p>
            @group Network and Communication @abstract The
            ETSocket class provides a simple wrapper around a
            socket.
          </p>
          <p>
            The socket is opened when the object is created, and
            closed when it is destroyed.
          </p>
        </desc>
        <ivariable type="unsigned char" name="buffer" validity="protected">
          <desc>
            <p>
              Buffer used for receiving data.
            </p>
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="connectionIsBroken" validity="protected">
          <desc>
            <p>
              <code>YES</code> if the connection is broken,
              <code>NO</code> otherwise
            </p>
          </desc>
        </ivariable>
        <ivariable type="id" name="delegate" validity="protected">
          <desc>
            <p>
              Reference to the delegate.
            </p>
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="eofCounter" validity="protected">
          <desc>
            <p>
              EOF Counter
            </p>
          </desc>
        </ivariable>
        <ivariable type="NSFileHandle*" name="handle" validity="protected">
          <desc>
            <p>
              File handle encapsulating the socket. Used for
              runloop integration.
            </p>
          </desc>
        </ivariable>
        <ivariable type="NSMutableArray*" name="inFilters" validity="protected">
          <desc>
            <p>
              Array of filters used for filtering the input.
            </p>
          </desc>
        </ivariable>
        <ivariable type="NSMutableArray*" name="outFilters" validity="protected">
          <desc>
            <p>
              Array of filters used for filtering the output.
            </p>
          </desc>
        </ivariable>
        <ivariable type="void*" name="ssl" validity="protected">
          <desc>
            <p>
              OpenSSL context.
            </p>
          </desc>
        </ivariable>
        <ivariable type="void*" name="sslContext" validity="protected">
          <desc>
            <p>
              OpenSSL context.
            </p>
          </desc>
        </ivariable>
        <method type="id" factory="yes">
          <sel>socketConnectedToRemoteHost:</sel>
          <arg type="NSString*">aHost</arg>
          <sel>forService:</sel>
          <arg type="NSString*">aService</arg>
          <desc>
            <p>
              Returns a new socket connected to the specified
              host, with the specified service name on the first
              protocol to respond.
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>negotiateSSL</sel>
          <desc>
            <p>
              Negotiates an SSL (client) connection. Returns
              <code>YES</code> on success.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>sendData:</sel>
          <arg type="NSData*">data</arg>
          <desc>
            <p>
              Sends the specified <var>data</var> through the
              socket. Throw ETSocketException if sending
              failed.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>setDelegate:</sel>
          <arg type="id">aDelegate</arg>
          <desc>
            <p>
              Sets the delegate.
            </p>
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSObject(ETListenSocketDelegate)
        informal protocol
      </heading>
      <category name="ETListenSocketDelegate" class="NSObject">
        <declared>ETSocket.h</declared>
        <desc>
          <p>
            @group Network and Communication @abstract Informal
            protocol for delegates to listening sockets.
          </p>
        </desc>
        <method type="void">
          <sel>newConnection:</sel>
          <arg type="ETSocket*">aSocket</arg>
          <sel>fromSocket:</sel>
          <arg type="ETSocket*">listenerSocket</arg>
          <desc>
            <p>
              Handle a new connection request received by
              <var>listenerSocket</var>.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSObject(ETSocketDelegate) informal
        protocol
      </heading>
      <category name="ETSocketDelegate" class="NSObject">
        <declared>ETSocket.h</declared>
        <desc>
          <p>
            @group Network and Communication @abstract Informal
            protocol for socket delegates.
          </p>
        </desc>
        <method type="void">
          <sel>receivedData:</sel>
          <arg type="NSData*">aData</arg>
          <sel>fromSocket:</sel>
          <arg type="ETSocket*">aSocket</arg>
          <desc>
            <p>
              Handle data received over the specified socket.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the ETSocketFilter protocol
      </heading>
      <protocol name="ETSocketFilter">
        <declared>ETSocket.h</declared>
        <desc>
          <p>
            @group Network and Communication @abstract Protocol
            for socket data filters.
          </p>
          <p>
            Data sent or received by an ETSocket instance will be
            pushed through a chain of filters conforming to this
            protocol.
          </p>
        </desc>
        <method type="NSMutableData*">
          <sel>filterData:</sel>
          <arg type="NSMutableData*">aData</arg>
          <desc>
            <p>
              Filter the data and return the result. The caller
              must not retain a reference to the argument; filters
              are permitted to modify the data in-place and return
              the argument.
            </p>
          </desc>
        </method>
      </protocol>
    </chapter>
    <chapter>
      <heading>ETSocket variables</heading>
      <p></p>
      <variable type="NSString*" name="ETSocketException">
        <desc>
          <p>
            Exception thrown on abrupt termination.
          </p>
        </desc>
      </variable>
    </chapter>
  </body>
</gsdoc>
