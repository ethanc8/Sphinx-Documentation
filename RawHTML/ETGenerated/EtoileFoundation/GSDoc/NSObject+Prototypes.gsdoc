<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSObject+Prototypes">
  <head>
    <title>NSObject+Prototypes documentation</title>
    <author name="Generated by pi"></author>
    <copy>2008 David Chisnall</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSObject(ETPrototypes)
        category
      </heading>
      <category name="ETPrototypes" class="NSObject">
        <declared>NSObject+Prototypes.h</declared>
        <desc>
          <p>
            @group Language Extensions @abstract Objective-C
            prototype support.
          </p>
        </desc>
        <method type="BOOL" factory="yes">
          <sel>addClassMethod:</sel>
          <arg type="SEL">aSelector</arg>
          <sel>fromBlock:</sel>
          <arg type="id">aBlock</arg>
          <desc>
            <p>
              Adds a class method to the class, using the
              specified block. The types for the method are
              inferred from the block.
            </p>
            <p>
              The block must take an object (self) as the first
              argument. Any subsequent arguments are the
              explicit arguments to the method. The _cmd
              argument is not available for methods added in
              this way.
            </p>
          </desc>
        </method>
        <method type="BOOL" factory="yes">
          <sel>addInstanceMethod:</sel>
          <arg type="SEL">aSelector</arg>
          <sel>fromBlock:</sel>
          <arg type="id">aBlock</arg>
          <desc>
            <p>
              Adds an instance method to the class, using the
              specified block. The types for the method are
              inferred from the block.
            </p>
            <p>
              The block must take an object (self) as the first
              argument. Any subsequent arguments are the
              explicit arguments to the method. The _cmd
              argument is not available for methods added in
              this way.
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>addMethod:</sel>
          <arg type="SEL">aSelector</arg>
          <sel>fromBlock:</sel>
          <arg type="id">aBlock</arg>
          <desc>
            <p>
              Adds a method to the receiver, using the specified
              block. The types for the method are inferred from
              the block.
            </p>
            <p>
              The block must take an object (self) as the first
              argument. Any subsequent arguments are the
              explicit arguments to the method. The _cmd
              argument is not available for methods added in
              this way.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>clone</sel>
          <desc>
            <p>
              Returns a clone of the object. The clone will
              inherit all methods and associated objects. To
              copy instance variables, you must override this
              method.
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isPrototype</sel>
          <desc>
            <p>
              Returns <code>YES</code> if this object inherits
              from another object.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>prototype</sel>
          <desc>
            <p>
              Returns the prototype for this object, or
              <code>nil</code> if this object does not have one.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>setMethod:</sel>
          <arg type="IMP">aMethod</arg>
          <sel>forSelector:</sel>
          <arg type="SEL">aSelector</arg>
          <desc>
            <p>
              Adds the specified method to this instance. Objects
              modified in this way get a hidden dictionary for
              non-indexed instance variables, allowing them
              to use KVC to set arbitrary objects on self.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>slotValueForKey:</sel>
          <arg type="NSString*">aKey</arg>
          <desc>
            <p>
              Does the same as valueForKey:, except when this
              object is a prototype and a block closure is
              associated with the supplied key. The block
              closure is then returned without being invoked.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
