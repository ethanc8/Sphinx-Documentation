<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="EcHost">
  <head>
    <title>EcHost documentation</title>
    <author name="Richard Frith-Macdonald">
      <email address="rfm@gnu.org">
        rfm@gnu.org
      </email>
    </author>
    <copy>2012 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSHost(EcHost) category
      </heading>
      <category name="EcHost" class="NSHost">
        <declared>EcHost.h</declared>
        <desc>
          <p>
            This category provides additional methods to
            standardise host names so that software can
            consistently refer to a host by a single well
            known name. <br /> This mechanism, as well as
            ensuring naming consistency, can be used to work
            with logical names for hosts when the actual naming of
            the hosts (ie in the domain name system) is not under
            your control.
          </p>
          <p>
            This operates by managing a map from the various names
            and addresses a host may be known by, to a single well
            known name. This host name may, but need not, be a
            public domain name.
          </p>
          <p>
            The well known name methods are thread-safe, and on
            initial use the NSUserDefaults system is queried to
            set up two well known names automatically: <br /> The
            value of EcCurrentHost specifies the well known name
            for the current host (the machine on which the software
            is running). <br /> The value of EcControlHost specifies
            the well known name for the control host (the machine
            on which control functions for your software are
            centralised). If this is specified without
            EcControlDomain, it is used as both the
            well known name and the domain name. <br /> The value
            of EcControlDomain specifies the fully qualified domain
            name (ie the name provided by the operating system) of
            the control host. If it is specified without
            EcControlHost, then it is used as the well
            known name for the control host. <br /> NB. the
            defaults system is accessed via EcUserDefaults, so
            if a defaults prefix other than Ec has been set, these
            keys will use that alternative prefix.
          </p>
        </desc>
        <method type="NSString*" factory="yes">
          <sel>controlWellKnownName</sel>
          <desc>
            Returns the well known name of the 'control' host
            as obtained from the NSUserDefaults system. <br /> If
            EcControlHost is defined, the well known name
            is the string specified by EcControlHost. <br /> If
            EcControlHost is undefined but
            EcHostControlDomain is defined, the
            well known name is the value of EcHostControlDomain.
            <br /> If neither is defined, this method returns
            <code>nil</code>.
          </desc>
        </method>
        <method type="NSHost*" factory="yes">
          <sel>hostWithWellKnownName:</sel>
          <arg type="NSString*">aName</arg>
          <desc>
            Returns a host previously established as having the
            well known name, or <code>nil</code> if no such
            association exists.
          </desc>
        </method>
        <method type="void" factory="yes">
          <sel>setWellKnownNames:</sel>
          <arg type="NSDictionary*">map</arg>
          <desc>
            Establishes mappings from a variety of host
            names (the dictionary keys) to well known names (the
            dictionary values). <br /> The keys and values
            may be (and often are) identical in the case where the
            well known name for a host is the same as one of its
            normal names (eg its fully qualified domain name).
            <br /> It is possible to set a well known name for a
            host which does not yet exist... in which case the
            mapping will be established and will take effect
            later, when the host is set up.
          </desc>
        </method>
        <method type="void">
          <sel>setWellKnownName:</sel>
          <arg type="NSString*">aName</arg>
          <desc>
            Sets the well known name for the receiver. <br /> This
            replaces any previous well known name for the
            receiver and, if the name is already in use,
            removes any associations of that well known name
            with other hosts.
          </desc>
        </method>
        <method type="NSString*">
          <sel>wellKnownName</sel>
          <desc>
            Returns the well known name for the receiver (or
            any name of the receiver if no well known name has been
            set for it).
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
