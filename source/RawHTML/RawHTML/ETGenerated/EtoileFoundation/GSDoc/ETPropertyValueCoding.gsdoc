<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="ETPropertyValueCoding">
  <head>
    <title>ETPropertyValueCoding documentation</title>
    <author name="Generated by pi"></author>
    <copy>2007 Quentin Mathe</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the
        NSDictionary(ETPropertyValueCoding)
        category
      </heading>
      <category name="ETPropertyValueCoding" class="NSDictionary">
        <declared>ETPropertyValueCoding.h</declared>
        <desc>
          <p>
            @group Model Additions @abstract Property reading
            support for NSDictionary.
          </p>
        </desc>
        <method type="NSArray*">
          <sel>propertyNames</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL">
          <sel>setValue:</sel>
          <arg type="id">value</arg>
          <sel>forProperty:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id">
          <sel>valueForProperty:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSMutableDictionary(ETMutablePropertyValueCoding)
        category
      </heading>
      <category name="ETMutablePropertyValueCoding" class="NSMutableDictionary">
        <declared>ETPropertyValueCoding.h</declared>
        <desc>
          <p>
            @group Model Additions @abstract Property writing
            support for NSMutableDictionary.
          </p>
        </desc>
        <method type="BOOL">
          <sel>setValue:</sel>
          <arg type="id">value</arg>
          <sel>forProperty:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSObject(ETPropertyValueCoding)
        category
      </heading>
      <category name="ETPropertyValueCoding" class="NSObject">
        <declared>ETPropertyValueCoding.h</declared>
        <desc>
          <p>
            @group Model Additions @abstract Protocol to read
            and write properties.
          </p>
          <p>
            Property-Value Coding allows to access
            properties of objects in a uniform manner, while
            still supporting Key-Value Coding.
          </p>
          <p>
            Key-Value Coding is similar but tends to be
            overriden in many subclasses. As a result,
            <code>-[NSDictionary valueForKey: @"count"]</code>
            doesn't return the count value, but attemps to look
            a value using [NSDictionary objectForKey: @"count"]. So
            Key-Value Coding doesn't constitute a mechanism
            versatile enough to introspect or access object
            properties. In addition,
            <ref type="method" id="-valueForKey:">
              -valueForKey:
            </ref>
            doesn't accept invalid key unlike
            <ref type="method" id="-valueForProperty:">
              -valueForProperty:
            </ref>
            . This is important for presenting unrelated objects in a
            table UI (mapping properties to columns) where each
            object has its own property set. More generally this
            matters for manipulating properties of unrelated
            objects using the same code.
          </p>
          <p>
            ETPropertyValueCoding protocol is
            usually adopted by root object classes such as
            NSObject and overriden in subclasses. See
            NSObject(Model).
          </p>
          <p>
            The basic behavior of the Property-Value-Coding is
            implemented in NSObject(ETModelAdditions), but
            few classes such as ETMutableObjectViewpoint and
            ETLayoutItem in EtoileUI overrides the
            NSObject semantic for
            <ref type="method" id="-valueForProperty:">
              -valueForProperty:
            </ref>
            and
            <ref type="method" id="-setValue:forProperty:">
              -setValue:forProperty:
            </ref>
            .
          </p>
        </desc>
        <method type="NSArray*">
          <sel>propertyNames</sel>
          <desc>
            <p>
              Returns the names of the properties exposed by
              the receiver through
              <ref type="method" id="-valueForProperty:">
                -valueForProperty:
              </ref>
              and
              <ref type="method" id="-setValue:forProperty:">
                -setValue:forProperty:
              </ref>
              , or
              <ref type="method" id="-valueForKey:">
                -valueForKey:
              </ref>
              and
              <ref type="method" id="-setValue:forKey:">
                -setValue:forKey:
              </ref>
              if
              <ref type="method" id="-requiresKeyValueCodingForAccessingProperties">-requiresKeyValueCodingForAccessingProperties</ref> returns <code>YES</code>.
            </p>
            <p>
              Returns both the property names bound to the
              object entity description and the basic property
              names.
            </p>
            <p>
              +[ETModelDescriptionRepository
              mainRepository] is used to look up the
              entity description.
            </p>
            <p>
              To be exposed through Property Value Coding, the
              receiver properties must be listed among the
              returned properties.
            </p>
            <p>
              Can be overriden to return property names bound to
              entity descriptions that don't belong to the main
              repository, or filter some properties out. In
              the overriden method, you should usually return
              <ref type="method" id="-basicPropertyNames">
                -basicPropertyNames
              </ref>
              along the property description names.
            </p>
            <p>
              For a NSObject subclass not bound to an entity
              description, the property names related to
              the closest superclass bound to an entity description
              are returned through a recursive lookup in
              <ref type="method" id="-entityDescriptionForClass:">
                -entityDescriptionForClass:
              </ref>
              .
            </p>
            <p>
              See
              <ref type="method" id="-basicPropertyNames">
                -basicPropertyNames
              </ref>
              ,
              <ref type="method" id="-valueForProperty:">
                -valueForProperty:
              </ref>
              and
              <ref type="method" id="-setValue:forProperty:">
                -setValue:forProperty:
              </ref>
              . See also -[ETPropertyValueCoding propertyNames].
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>requiresKeyValueCodingForAccessingProperties</sel>
          <desc>
            <p>
              Can be overriden to return <code>YES</code> in order
              to support exposing properties, in case
              <ref type="method" id="-valueForProperty:">
                -valueForProperty:
              </ref>
              and
              <ref type="method" id="-setValue:forProperty:">
                -setValue:forProperty:
              </ref>
              access another object and not the receiver.
            </p>
            <p>
              This method is used by ETMutableObjectViewpoint to
              determine whether the receiver represented
              property can be accessed through
              <ref type="method" id="-valueForProperty:">
                -valueForProperty:
              </ref>
              or
              <ref type="method" id="-valueForKey:">
                -valueForKey:
              </ref>
              .
            </p>
            <p>
              By default, returns <code>NO</code>.
            </p>
            <p>
              If
              <ref type="method" id="-valueForProperty:">
                -valueForProperty:
              </ref>
              and
              <ref type="method" id="-setValue:forProperty:">
                -setValue:forProperty:
              </ref>
              don't access a represented object, there is not
              need to override this method to return
              <code>YES</code> in subclasses. You usually never
              need to override this method unless you adopt
              ETPropertyViewpoint protocol.
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>setValue:</sel>
          <arg type="id">value</arg>
          <sel>forProperty:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <p>
              Sets the <var>value</var> of the property and
              returns <code>YES</code> if the <var>value</var>
              was successfully set.
            </p>
            <p>
              If the property doesn't exist, returns <code>NO</code>
              but must not raise an exception.
            </p>
            <p>
              The method precise semantic is under the control of
              the class implementing the protocol.
            </p>
            <p>
              See also -[NSObject setValue:forProperty:] and
              -[ETPropertyViewpoint
              setValue:forProperty:].
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>setValue:</sel>
          <arg type="id">aValue</arg>
          <sel>forPropertyPath:</sel>
          <arg type="NSString*">aPropertyPath</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id">
          <sel>valueForProperty:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <p>
              Returns the value of the property.
            </p>
            <p>
              If the property doesn't exist, returns
              <code>nil</code> but must not raise an exception.
            </p>
            <p>
              The method precise semantic is under the control of
              the class implementing the protocol. For example, the
              property can belong to another object than the
              receiver.
            </p>
            <p>
              See also -[NSObject valueForProperty:] and
              -[ETPropertyViewpoint
              valueForProperty:].
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>valueForPropertyPath:</sel>
          <arg type="NSString*">aPropertyPath</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
