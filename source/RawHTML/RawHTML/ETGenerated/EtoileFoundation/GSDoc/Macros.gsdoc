<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="Macros">
  <head>
    <title>Macros documentation</title>
    <author name="Generated by pi"></author>
    <copy>
      2005 David Chisnall, Quentin Mathe, Eric Wasylishen
    </copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>Macros macros</heading>
      <p></p>
      <macro name="A">
        <vararg />
        <desc>
          <p>
            Shortcut macro to create a NSArray. Same as
            +[NSArray dictionaryWithObjects:].
          </p>
        </desc>
      </macro>
      <macro name="D">
        <vararg />
        <desc>
          <p>
            Shortcut macro to create a NSDictionary. Same as
            +[NSDictionary
            dictionaryWithObjectsAndKeys:].
          </p>
        </desc>
      </macro>
      <macro name="ETAssert">
        <arg>condition</arg>
        <desc>
          <p>
            Basic assertion macro that just reports the tested
            <var>condition</var> when it fails. It is similar to
            NSParameterAssert but not limited to
            checking the arguments.
          </p>
        </desc>
      </macro>
      <macro name="ETAssertUnreachable">
        <desc>
          <p>
            Assertion macro to mark code portion that should
            never be reached. e.g. the default case in a switch
            statement.
          </p>
        </desc>
      </macro>
      <macro name="FOREACH">
        <arg>collection</arg>
        <arg>object</arg>
        <arg>type</arg>
        <desc>
          <p>
            Macro providing a foreach statement on collections,
            with IMP caching.
          </p>
          <p>
            @param <var>type</var> An element <var>type</var>
            such as 'NSString *' to typecheck the messages sent to
            the elements in the code block.
          </p>
        </desc>
      </macro>
      <macro name="FOREACHE">
        <arg>collection</arg>
        <arg>object</arg>
        <arg>type</arg>
        <arg>enumerator</arg>
        <desc>
          <p>
            Macro providing a foreach statement on collections,
            with IMP caching.
          </p>
          <p>
            @param <var>collection</var> Can be <code>nil</code>
            , this argument is ignored. @param <var>type</var> An
            element <var>type</var> such as 'NSString *' to
            typecheck the messages sent to the elements in
            the code block. @param <var>enumerator</var> A custom
            <var>enumerator</var> <var>object</var> to use to
            iterate over the <var>collection</var>.
          </p>
        </desc>
      </macro>
      <macro name="FOREACHI">
        <arg>collection</arg>
        <arg>object</arg>
        <desc>
          <p>
            Macro providing a foreach statement on collections,
            with IMP caching.
          </p>
          <p>
            You should rather use FOREACH that provides basic
            typechecking.
          </p>
        </desc>
      </macro>
      <macro name="INDEXSET">
        <vararg />
        <desc>
          <p>
            Shortcut macro to create a NSIndexSet.
          </p>
        </desc>
      </macro>
      <macro name="INVALIDARG_EXCEPTION_TEST">
        <arg>arg</arg>
        <arg>condition</arg>
        <desc>
          <p>
            Exception macro to check whether the given
            argument respects a <var>condition</var>. <br />
            When the <var>condition</var> evaluates to
            <code>NO</code>, an NSInvalidArgumentException is
            raised.
          </p>
        </desc>
      </macro>
      <macro name="LOCAL_AUTORELEASE_POOL">
        <desc>
          <p>
            Create a temporary autorelease pool that is
            destroyed when the scope exits.
          </p>
        </desc>
      </macro>
      <macro name="LOCK_FOR_SCOPE">
        <arg>x</arg>
        <desc>
          <p>
            Macro that sends a
            <ref type="method" id="-lock">
              -lock
            </ref>
            message to the argument immediately, and then an
            <ref type="method" id="-unlock">
              -unlock
            </ref>
            message when the variable goes out of scope
            (including if an exception causes this stack
            frame to be unwound).
          </p>
        </desc>
      </macro>
      <macro name="NILARG_EXCEPTION_TEST">
        <arg>arg</arg>
        <desc>
          <p>
            Exception macro to check the given argument is
            not <code>nil</code>, otherwise an
            NSInvalidArgumentException is
            raised.
          </p>
        </desc>
      </macro>
      <macro name="S">
        <vararg />
        <desc>
          <p>
            Shortcut macro to create a NSSet. Same as +[NSSet
            setWithObjects:].
          </p>
        </desc>
      </macro>
      <macro name="SELFINIT">
        <desc>
          <p>
            Deprecated. You should use the designated
            initializer rule. Simple macro for safely
            initialising the current class.
          </p>
        </desc>
      </macro>
      <macro name="SUPERINIT">
        <desc>
          <p>
            Simple macro for safely initialising the superclass.
          </p>
        </desc>
      </macro>
      <macro name="UNIQUESET">
        <vararg />
        <desc>
          <p>
            Shortcut macro to create a NSSet. Same as
            <ref type="function" id="S">
              S()
            </ref>
            but throws an exception if any arguments are equal to
            any others.
          </p>
        </desc>
      </macro>
    </chapter>
    <chapter>
      <heading>Macros functions</heading>
      <p></p>
      <function type="void" name="ETDrainAutoreleasePool">
        <arg type="void*">object</arg>
        <desc>
          <p>
            Cleanup function that releases a lock.
          </p>
        </desc>
      </function>
      <function type="void" name="ETStackAutoRelease">
        <arg type="void*">object</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="ETUnlockObject">
        <arg type="void*">object</arg>
        <desc>
          <p>
            Cleanup function that releases a lock.
          </p>
        </desc>
      </function>
    </chapter>
  </body>
</gsdoc>
