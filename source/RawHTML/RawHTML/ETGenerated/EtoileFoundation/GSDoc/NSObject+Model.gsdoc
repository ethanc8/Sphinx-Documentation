<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSObject+Model">
  <head>
    <title>NSObject+Model documentation</title>
    <author name="Generated by pi"></author>
    <copy>2007 Quentin Mathe</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSDate(ETModel)
        category
      </heading>
      <category name="ETModel" class="NSDate">
        <declared>NSObject+Model.h</declared>
        <desc>
          <p>
            @group Model Additions
          </p>
        </desc>
        <method type="BOOL">
          <sel>isCommonObjectValue</sel>
          <desc>
            <p>
              Returns <code>YES</code>.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSNumber(ETModel)
        category
      </heading>
      <category name="ETModel" class="NSNumber">
        <declared>NSObject+Model.h</declared>
        <desc>
          <p>
            @group Model Additions
          </p>
        </desc>
        <method type="BOOL">
          <sel>isCommonObjectValue</sel>
          <desc>
            <p>
              Returns <code>YES</code>.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSObject(ETModel)
        category
      </heading>
      <category name="ETModel" class="NSObject">
        <declared>NSObject+Model.h</declared>
        <desc>
          <p>
            @group Model Additions @abstract NSObject additions
            providing basic management of model objects.
          </p>
        </desc>
        <method type="Class" factory="yes">
          <sel>mutableClass</sel>
          <desc>
            <p>
              @taskunit Collection and Mutability
            </p>
            <p>
              Returns a mutable counterpart class or Nil if
              such a class does not exist.
            </p>
            <p>
              Returns a mutable counterpart class or Nil if
              such a class does not exist.
            </p>
          </desc>
        </method>
        <method type="ETEntityDescription*" factory="yes" override="never">
          <sel>newBasicEntityDescription</sel>
          <desc>
            <p>
              Returns a new minimal self-description without
              any property descriptions.
            </p>
            <p>
              This entity description uses the class name as its
              name and the parent name is set to the superclass
              name. The owner name is set to the bundle
              identifier (or executable path in last
              resort).
            </p>
            <p>
              The parent and owner will be resolved by
              -[ETModelDescriptionRepository
              resolveNamedObjectReferences].
            </p>
            <p>
              You must never use this method to retrieve an entity
              description, but only a
              ETModelDescriptionRepository
              instance to do so.
            </p>
            <p>
              The returned object is not autoreleased.
            </p>
            <p>
              See also
              <ref type="method" id="-newEntityDescription">
                -newEntityDescription
              </ref>
              , -[ETEntityDescription parentName] and
              -[ETEntityDescription ownerName].
            </p>
          </desc>
        </method>
        <method type="ETEntityDescription*" factory="yes" override="dummy">
          <sel>newEntityDescription</sel>
          <desc>
            <p>
              @taskunit Providing the Metamodel
            </p>
            <p>
              Returns a new self-description (aka metamodel).
            </p>
            <p>
              You must never use this method to retrieve an entity
              description, but only retrieves it through a
              ETModelDescriptionRepository
              instance.
            </p>
            <p>
              This method can be invoked at runtime by a
              repository to automatically collect the entity
              descriptions and make them available in this
              repository.
            </p>
            <p>
              You can implement this method to describe your
              subclasses more precisely than
              <ref type="method" id="-basicNewEntityDescription">
                -basicNewEntityDescription
              </ref>
              . <br /> You must never call [super
              newEntityDescription] in the
              implementation. <br /> You must not
              return an autoreleased object.
            </p>
            <p>
              For example:
            </p>
<example>
ETEntityDescription *desc = [self newBasicEntityDescription];

// For subclasses that don't override -newEntityDescription, we must not add the 
// property descriptions that we will inherit through the parent (the 
// 'MyClassName' entity description).
if ([[desc name] isEqual: [MyClass className]] == NO) return desc;

ETPropertyDescription *city = [ETPropertyDescription descriptionWithName: @"city" type: (id)@"NSString"];
ETPropertyDescription *country = [ETPropertyDescription descriptionWithName: @"country" type: (id)@"NSString"];

[desc setPropertyDescriptions: A(city, country)];

[desc setAbstract: YES];

return desc;
</example>
            <p>
              If you want set the parent explicitly, replace
              <ref type="method" id="-newBasicEntityDescription">
                -newBasicEntityDescription
              </ref>
              with:
            </p>
<example>
ETEntityDescription *desc = [ETEntityDescription descriptionWithName: [self className]];

// Will be resolved when the entity description is put in the repository
[desc setParent: NSStringFromClass([self superclass])];
</example>
            <br />
            <p>
              Returns a new self-description (aka metamodel).
            </p>
            <p>
              You must never use this method to retrieve an entity
              description, but only retrieves it through a
              ETModelDescriptionRepository
              instance.
            </p>
            <p>
              This method can be invoked at runtime by a
              repository to automatically collect the entity
              descriptions and make them available in this
              repository.
            </p>
            <p>
              You can implement this method to describe your
              subclasses more precisely than
              <ref type="method" id="-basicNewEntityDescription">
                -basicNewEntityDescription
              </ref>
              . <br /> You must never call [super
              newEntityDescription] in the
              implementation. <br /> You must not
              return an autoreleased object.
            </p>
            <p>
              For example:
            </p>
<example>
ETEntityDescription *desc = [self newBasicEntityDescription];

// For subclasses that don't override -newEntityDescription, we must not add the 
// property descriptions that we will inherit through the parent (the 
// 'MyClassName' entity description).
if ([[desc name] isEqual: [MyClass className]] == NO) return desc;

ETPropertyDescription *city = [ETPropertyDescription descriptionWithName: @"city" type: (id)@"NSString"];
ETPropertyDescription *country = [ETPropertyDescription descriptionWithName: @"country" type: (id)@"NSString"];

[desc setPropertyDescriptions: A(city, country)];

[desc setAbstract: YES];

return desc;
</example>
            <p>
              If you want set the parent explicitly, replace
              <ref type="method" id="-newBasicEntityDescription">
                -newBasicEntityDescription
              </ref>
              with:
            </p>
<example>
ETEntityDescription *desc = [ETEntityDescription descriptionWithName: [self className]];

// Will be resolved when the entity description is put in the repository
[desc setParent: NSStringFromClass([self superclass])];
</example>
          </desc>
        </method>
        <method type="NSString*">
          <sel>descriptionWithOptions:</sel>
          <arg type="NSMutableDictionary*">options</arg>
          <desc>
            <p>
              Returns a description generated based on the
              given <var>options</var>.
            </p>
            <p>
              Might describe a tree or graph structure if a
              traversal key is provided to recursively invoke
              <ref type="method" id="-descriptionsWithOptions:">
                -descriptionsWithOptions:
              </ref>
              on each object node. To do so, put
              ETDescriptionOptionTraversalKey
              with a valid KVC key in the <var>options</var>. You
              can also set a max depth with
              ETDescriptionOptionMaxDepth
              to limit the description size or end a graph
              traversal.
            </p>
            <p>
              You can collect key path values on each object node
              by specifying an array of key paths with
              ETDescriptionOptionValuesForKeyPaths.
            </p>
            <p>
              The description format is roughly: depth based
              indentation + object <strong>short</strong>
              description + keyPath1: value1, keyPath2:
              value2 etc.
            </p>
            <p>
              By default,
              <ref type="method" id="-description">
                -description
              </ref>
              is used to print both object <strong>short</strong>
              description and key path values.
            </p>
            <p>
              For customizing the object <strong>short</strong>
              description, put
              kETDescriptionOptionShortDescriptionSelector
              with a custom selector string in the
              <var>options</var> (-description is then used as
              fallback). <br /> If you override
              <ref type="method" id="-description">
                -description
              </ref>
              to call
              <ref type="method" id="-descriptionWithOptions:">
                -descriptionWithOptions:
              </ref>
              , you must provide a valid
              kETDescriptionOptionShortDescriptionSelector
              to prevent an endless loop (for example, just use
              -primitiveDescription).
            </p>
            <p>
              For presenting each key path on a new line, put
              kETDescriptionOptionPropertyIndent
              with a tab string in the <var>options</var>.
            </p>
            <p>
              Here is an example based on EtoileUI that dumps an
              item tree structure:
            </p>
<example>
// ObjC code
ETLog(@"\n%@\n", [browserItem descriptionWithOptions: [NSMutableDictionary dictionaryWithObjectsAndKeys: 
    A(@"frame", @"autoresizingMask"), kETDescriptionOptionValuesForKeyPaths,
    @"items", kETDescriptionOptionTraversalKey, nil]]);

// Console Output
&lt;ETLayoutItemGroup: 0x9e7b268&gt; { frame: {x = 0; y = 0; width = 600; height = 300}, autoresizingMask: 18 }
    &lt;ETLayoutItemGroup: 0x9fbea48&gt; { frame: {x = 0; y = 0; width = 1150; height = 53}, autoresizingMask: 2 }
        &lt;ETLayoutItem: 0x9f29240&gt; { frame: {x = 12; y = 12; width = 100; height = 22}, autoresizingMask: 0 }
        &lt;ETLayoutItem: 0x9e6fcf0&gt; { frame: {x = 124; y = 12; width = 100; height = 24}, autoresizingMask: 0 }
    &lt;ETLayoutItemGroup: 0x9fac170&gt; { frame: {x = 0; y = 0; width = 1150; height = 482}, autoresizingMask: 18 }
        &lt;ETLayoutItemGroup: 0x9fb2870&gt; { frame: {x = 0; y = 0; width = 50; height = 50}, autoresizingMask: 0 }
</example>
            <p>
              <var>options</var> must not be <code>nil</code>,
              otherwise raises an NSInvalidArgumentException.
            </p>
            <p>
              You can override this method in subclasses, although
              it is not advised to. The <var>options</var>
              dictionary can be changed arbitrarily in a new
              implementation.
            </p>
          </desc>
        </method>
        <method type="NSString*">
          <sel>displayName</sel>
          <desc>
            <p>
              @taskunit Basic Properties
            </p>
            <p>
              Returns the receiver description. Subclasses can
              override this method to return a more
              appropriate display name.
            </p>
            <p>
              Returns the receiver description. Subclasses can
              override this method to return a more
              appropriate display name.
            </p>
          </desc>
        </method>
        <method type="id" override="dummy">
          <sel>insertionKeyForCollection:</sel>
          <arg type="id&lt;ETKeyedCollection&gt;">aCollection</arg>
          <desc>
            <p>
              Returns a key for inserting the receiver into the
              given keyed collection.
            </p>
            <p>
              By default, returns a key built by incrementing the
              integer value in the 'Unknown &lt;number&gt;'
              pattern, until it provides a key not yet in use
              in the collection argument.
            </p>
            <p>
              This key is retrieved by a collection in reply to
              <ref type="method" id="-insertObjects:atIndexes:hints:">
                -insertObjects:atIndexes:hints:
              </ref>
              of ETCollectionMutation protocol. You can return
              different keys depending on the type of
              collection. This parameter is usually the
              mutated collection itself.
            </p>
          </desc>
        </method>
        <method type="BOOL" override="never">
          <sel>isCollection</sel>
          <desc>
            <p>
              Returns <code>YES</code> if the receiver is
              declared as a collection by conforming to
              ETCollection protocol, otherwise returns
              <code>NO</code>.
            </p>
            <p>
              You must never override this method in your
              collection classes, you only need to adopt
              ETCollection protocol.
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isCommonObjectValue</sel>
          <desc>
            <p>
              Returns <code>YES</code> when the receiver is an
              object which can be passed to
              <ref type="method" id="-setObjectValue:">
                -setObjectValue:
              </ref>
              or returned by
              <ref type="method" id="-objectValue">
                -objectValue
              </ref>
              . Some common object values like string and number can
              be displayed and edited transparently (in an NSCell
              instance to take an example). If you define
              additional common object values, you usually
              have to write related formatters. Returns
              <code>NO</code> by default. Subclasses can
              override this method to specify an object can be
              accepted and used a common object value.
            </p>
          </desc>
        </method>
        <method type="BOOL" override="dummy">
          <sel>isGroup</sel>
          <desc>
            <p>
              Returns <code>YES</code> if the receiver is
              declared as a group, otherwise returns
              <code>NO</code>.
            </p>
            <p>
              This method returns <code>NO</code> by default. You
              can override it to return <code>YES</code> if you
              want to declare your subclass instances as groups.
            </p>
            <p>
              A group is specialized model object which is a
              composite and can behave like a mutable
              collection. A basic collection object (like
              NSMutableArray, NSMutableDictionary,
              NSMutableSet) must never be declared as a
              group. <br /> COGroup in CoreObject or
              ETLayoutItemGroup in EtoileUI are
              typical examples.
            </p>
            <p>
              A group should conform to ETCollectionMutation
              protocol.
            </p>
          </desc>
        </method>
        <method type="BOOL" override="dummy">
          <sel>isMutable</sel>
          <desc>
            <p>
              Returns <code>YES</code> if the receiver is
              declared as mutable, otherwise returns
              <code>NO</code>.
            </p>
            <p>
              This method returns <code>NO</code> by default. You
              can override it to return <code>YES</code> if you
              want to declare your subclass instances as mutable
              objects (which are collections most of time).
            </p>
            <p>
              If you adopts ETCollectionMutation in a subclass, you
              don't need to override this method to declare your
              collection objects as mutable.
            </p>
          </desc>
        </method>
        <method type="BOOL" override="never">
          <sel>isMutableCollection</sel>
          <desc>
            <p>
              Returns <code>YES</code> if the receiver is
              declared as a collection by conforming to
              ETCollectionMutation protocol,
              otherwise returns <code>NO</code>.
            </p>
            <p>
              You must never override this method in your
              collection classes, you only need to adopt
              ETCollectionMutation protocol.
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isNumber</sel>
          <desc>
            <p>
              Returns <code>YES</code> if the receiver is an
              NSNumber instance, otherwise returns
              <code>NO</code>.
            </p>
          </desc>
        </method>
        <method type="BOOL" override="never">
          <sel>isPrimitiveCollection</sel>
          <desc>
            <p>
              Returns <code>YES</code> if the receiver is a
              low-level collection such as NSArray, NSet,
              etc., otherwise returns <code>NO</code>.
            </p>
            <p>
              For a model object such as ETLayoutItemGroup that
              conforms to ETCollection protocol, would return
              <code>NO</code>.
            </p>
          </desc>
        </method>
        <method type="BOOL">
          <sel>isString</sel>
          <desc>
            <p>
              Returns <code>YES</code> if the receiver is an
              NSString instance, otherwise returns
              <code>NO</code>.
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>objectValue</sel>
          <desc>
            <p>
              @taskunit Common Representations
            </p>
          </desc>
        </method>
        <method type="NSSet*" override="dummy">
          <sel>observableKeyPaths</sel>
          <desc>
            <p>
              @taskunit KVO Syntactic Sugar (Unstable API)
            </p>
            <p>
              Returns an empty set. <br /> Overrides to return
              the receiver key paths to be observed when an
              observer is set up with
              <ref type="method" id="-addObserver:">
                -addObserver:
              </ref>
              . <br />
            </p>
            <p>
              The returned set content must not change during the
              whole object lifetime, otherwise
              <ref type="method" id="-removeObserver:">
                -removeObserver:
              </ref>
              will crash randomly.
            </p>
            <p>
              Returns an empty set. <br /> Overrides to return
              the receiver key paths to be observed when an
              observer is set up with
              <ref type="method" id="-addObserver:">
                -addObserver:
              </ref>
              . <br />
            </p>
            <p>
              The returned set content must not change during the
              whole object lifetime, otherwise
              <ref type="method" id="-removeObserver:">
                -removeObserver:
              </ref>
              will crash randomly.
            </p>
          </desc>
        </method>
        <method type="NSString*" override="never">
          <sel>primitiveDescription</sel>
          <desc>
            <p>
              Returns the description as NSObject would. This
              method returns the same value as
              <ref type="method" id="-description">
                -description
              </ref>
              if the latter method isn't overriden in your
              subclasses, otherwise it returns the value
              that
              <ref type="method" id="-description">
                -description
              </ref>
              would return if you haven't overriden it. Useful to
              get consistent <strong>short</strong> descriptions on
              all instances and can be used to provide custom
              description built with other
              <strong>short</strong> descriptions.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSString(ETModel)
        category
      </heading>
      <category name="ETModel" class="NSString">
        <declared>NSObject+Model.h</declared>
        <desc>
          <p>
            @group Model Additions
          </p>
        </desc>
        <method type="BOOL">
          <sel>isCommonObjectValue</sel>
          <desc>
            <p>
              Returns <code>YES</code>.
            </p>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>NSObject+Model constants</heading>
      <p></p>
      <constant type="NSString* const" name="ETCollectionDidUpdateNotification">
        <desc>
          <p>
            Posts this notification to let other objects know
            about collection mutation in your model object.
          </p>
          <p>
            For example, EtoileUI uses this notification to reload
            the UI transparently. See -[ETLayoutItemGroup
            setRepresentedObject:].
          </p>
        </desc>
      </constant>
      <constant type="NSString* const" name="kETDescriptionOptionMaxDepth">
        <desc>
          <p>
            Integer number object to indicate the depth at
            which
            <ref type="method" id="-descriptionWithOptions:">
              -descriptionWithOptions:
            </ref>
            should stop to traverse collections with
            kETDescriptionOptionTraversalKey.
          </p>
          <p>
            Default value is 20.
          </p>
        </desc>
      </constant>
      <constant type="NSString* const" name="kETDescriptionOptionPropertyIndent">
        <desc>
          <p>
            String used as the base indentation for properties
            in
            <ref type="method" id="-descriptionWithOptions:">
              -descriptionWithOptions:
            </ref>
            .
          </p>
          <p>
            For an empty string, all properties are output on the
            same line. <br /> For other indentation e.g. a tab,
            each property is output on a distinct line.
          </p>
          <p>
            Default value is an empty string.
          </p>
        </desc>
      </constant>
      <constant type="NSString* const" name="kETDescriptionOptionShortDescriptionSelector">
        <desc>
          <p>
            Selector string to indicate which method should be
            called to print a <strong>short</strong> object
            description.
          </p>
          <p>
            If the receiver doesn't respond to this selector, then
            <ref type="method" id="-description">
              -description
            </ref>
            is used.
          </p>
          <p>
            Default value is 'description'.
          </p>
        </desc>
      </constant>
      <constant type="NSString* const" name="kETDescriptionOptionTraversalKey">
        <desc>
          <p>
            Key-Value-Coding key to indicate a value
            to be treated as a recursive collection. Each element
            will be sent
            <ref type="method" id="-descriptionWithOptions:">
              -descriptionWithOptions:
            </ref>
            to report every descendant description.
          </p>
          <p>
            Default value is <code>nil</code>.
          </p>
        </desc>
      </constant>
      <constant type="NSString* const" name="kETDescriptionOptionValuesForKeyPaths">
        <desc>
          <p>
            An array of key paths to indicate the values
            <ref type="method" id="-descriptionWithOptions:">
              -descriptionWithOptions:
            </ref>
            should report.
          </p>
          <p>
            Default value is <code>nil</code>.
          </p>
        </desc>
      </constant>
    </chapter>
  </body>
</gsdoc>
