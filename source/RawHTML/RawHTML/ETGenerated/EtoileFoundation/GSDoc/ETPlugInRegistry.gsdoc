<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="ETPlugInRegistry">
  <head>
    <title>ETPlugInRegistry class documentation</title>
    <author name="Generated by pi"></author>
    <copy>2004 Uli Kusterer, Quentin Mathe</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the ETPlugInRegistry class
      </heading>
      <class name="ETPlugInRegistry" super="NSObject">
        <declared>ETPlugInRegistry.h</declared>
        <desc>
          <p>
            @group Plug-Ins @abstract Plug-in manager class used
            to register new plug-ins and obtain already registered
            plug-ins.
          </p>
          <p>
            Each plug-in is represented by an NSMutableDictionary
            to which you can add your own entries as needed. The
            keys ETPlugInRegistry adds to this dictionary are:
          </p>
          <deflist>
            <term>bundle</term>
            <desc>NSBundle instance for this plug-in</desc>
            <term>identifier</term>
            <desc>
              Unique identifier for this plug-in (bundle
              identifier in current implementation), see
              <ref type="method" id="-plugInIdentifierForBundle:">
                -plugInIdentifierForBundle:
              </ref>
            </desc>
            <term>image</term>
            <desc>
              Icon (NSImage) of the plug-in (for display in
              toolbars etc.), see
              <ref type="method" id="-plugInIconPathForBundle:">
                -plugInIconPathForBundle:
              </ref>
            </desc>
            <term>name</term>
            <desc>
              Display name of the plug-in (for display in
              lists, toolbars etc.), see
              <ref type="method" id="-plugInNameForBundle:">
                -plugInNameForBundle:
              </ref>
            </desc>
            <term>path</term>
            <desc>Full path to the bundle.</desc>
            <term>class</term>
            <desc>
              Principal class (type <strong>Class</strong>)
              for this bundle, so you can instantiate it
            </desc>
            <term>instance</term>
            <desc>
              If
              <ref type="method" id="-shouldInstantiatePlugInClass">
                -shouldInstantiatePlugInClass
              </ref>
              is <code>YES</code>, this contains an instance of the
              principal class, instantiated using alloc+init
            </desc>
          </deflist>
          <p>
            ETPlugInRegistry is thread-safe.
          </p>
        </desc>
        <method type="id" factory="yes">
          <sel>sharedRegistry</sel>
          <desc>
            <p>
              @taskunit Initialization
            </p>
            <p>
              Returns UKPluginsRegistry shared instance
              (singleton).
            </p>
            <p>
              Returns UKPluginsRegistry shared instance
              (singleton).
            </p>
          </desc>
        </method>
        <method type="NSMutableDictionary*">
          <sel>loadPlugInAtPath:</sel>
          <arg type="NSString*">path</arg>
          <desc>
            <p>
              Loads the plug-in bundle located at <var>path</var>
              .
            </p>
            <p>
              If the plug-in has already been loaded, immediately
              returns the same plug-in than previously.
            </p>
            <p>
              Every property list values associated to the
              plug-in schema, detailed in ETPlugInRegistry
              class description, are put in a dictionary which
              represents a plug-in object; eventual validity
              errors may be reported each time a value is read
              in NSBundle description values returned by
              <ref type="method" id="-infoDictionary">
                -infoDictionary
              </ref>
              .
            </p>
            <p>
              Raises an NSInvalidArgumentException if
              <var>path</var> is <code>nil</code>.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>loadPlugInsFromPath:</sel>
          <arg type="NSString*">folder</arg>
          <sel>ofType:</sel>
          <arg type="NSString*">ext</arg>
          <desc>
            <p>
              Finds plug-ins within <var>folder</var> path which
              are identified by an extension matching
              <var>ext</var>. Finally loads these plug-ins by
              calling
              <ref type="method" id="-loadPlugInAtPath:">
                -loadPlugInAtPath:
              </ref>
              .
            </p>
            <p>
              Raises an NSInvalidArgumentException if
              <var>folder</var> or <var>ext</var> is
              <code>nil</code>.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>loadPlugInsOfType:</sel>
          <arg type="NSString*">ext</arg>
          <desc>
            <p>
              @taskunit Loading Plug-Ins
            </p>
            <p>
              Locates and loads plug-in bundles with extension
              <var>ext</var> in the application-dedicated
              directory inside the Application Support
              directory.
            </p>
            <p>
              If the application's name (taken from NSExecutable in
              the plist package) is 'Typewriter', then
              Library/ApplicationSupport/Typewriter
              will be searched. This search will be repeated in
              each library per domain (user, system etc.). <br />
              This method takes in account the naming variation of
              the system directories between GNUstep and Mac OS X
              (e.g. Application Support vs ApplicationSupport).
              <br /> See
              <ref type="method" id="-searchPaths">
                -searchPaths
              </ref>
              .
            </p>
            <p>
              If the executable is a tool rather than an
              application, does nothing.
            </p>
            <p>
              Normally this is the only method you need to
              call to load a plug-in.
            </p>
            <p>
              Raises an NSInvalidArgumentException if
              <var>ext</var> is <code>nil</code>.
            </p>
            <p>
              Locates and loads plug-in bundles with extension
              <var>ext</var> in the application-dedicated
              directory inside the Application Support
              directory.
            </p>
            <p>
              If the application's name (taken from NSExecutable in
              the plist package) is 'Typewriter', then
              Library/ApplicationSupport/Typewriter
              will be searched. This search will be repeated in
              each library per domain (user, system etc.). <br />
              This method takes in account the naming variation of
              the system directories between GNUstep and Mac OS X
              (e.g. Application Support vs ApplicationSupport).
              <br /> See
              <ref type="method" id="-searchPaths">
                -searchPaths
              </ref>
              .
            </p>
            <p>
              If the executable is a tool rather than an
              application, does nothing.
            </p>
            <p>
              Normally this is the only method you need to
              call to load a plug-in.
            </p>
            <p>
              Raises an NSInvalidArgumentException if
              <var>ext</var> is <code>nil</code>.
            </p>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>loadedPlugIns</sel>
          <desc>
            <p>
              @taskunit Accessing Plug-Ins
            </p>
            <p>
              Returns the currently registered plug-ins (loaded
              by the way).
            </p>
            <p>
              An empty array is returned when no plug-ins have been
              registered.
            </p>
            <p>
              Returns the currently registered plug-ins (loaded
              by the way).
            </p>
            <p>
              An empty array is returned when no plug-ins have been
              registered.
            </p>
          </desc>
        </method>
        <method type="NSString*">
          <sel>plugInIconPathForBundle:</sel>
          <arg type="NSBundle*">bundle</arg>
          <desc>
            <p>
              Returns the plug-in icon path from the given
              <var>bundle</var> info dictionary.
            </p>
            <p>
              Valid <em>image</em> path keys in the plug-in
              property list are:
            </p>
            <list>
              <item>CFBundleIcon</item>
              <item>NSPrefPaneIconFile</item>
              <item>NSIcon</item> <item>NSApplicationIcon</item>
            </list>
            <p>
              If there is no valid key, returns <code>nil</code>.
            </p>
          </desc>
        </method>
        <method type="NSString*">
          <sel>plugInIdentifierForBundle:</sel>
          <arg type="NSBundle*">bundle</arg>
          <desc>
            <p>
              Returns the plug-in identifier from the given
              <var>bundle</var> info dictionary.
            </p>
            <p>
              Valid <em>identifier</em> keys in the plug-in
              property list are:
            </p>
            <list><item>CFBundleIdentifier</item></list>
            <p>
              If there is no valid key, returns the
              <var>bundle</var> path.
            </p>
          </desc>
        </method>
        <method type="NSString*">
          <sel>plugInNameForBundle:</sel>
          <arg type="NSBundle*">bundle</arg>
          <desc>
            <p>
              @taskunit Retrieving Plug-In Schema Infos
            </p>
            <p>
              Returns the plug-in name from the given
              <var>bundle</var> info dictionary.
            </p>
            <p>
              Valid <em>name</em> keys in the plug-in property
              list are:
            </p>
            <list>
              <item>CFBundleName</item>
              <item>NSPrefPaneIconLabel</item>
              <item>ApplicationName</item>
              <item>NSExecutable</item>
            </list>
            <p>
              If there is no valid key, returns <em>Unknown</em>.
            </p>
            <p>
              Returns the plug-in name from the given
              <var>bundle</var> info dictionary.
            </p>
            <p>
              Valid <em>name</em> keys in the plug-in property
              list are:
            </p>
            <list>
              <item>CFBundleName</item>
              <item>NSPrefPaneIconLabel</item>
              <item>ApplicationName</item>
              <item>NSExecutable</item>
            </list>
            <p>
              If there is no valid key, returns <em>Unknown</em>.
            </p>
          </desc>
        </method>
        <method type="NSArray*">
          <sel>searchPaths</sel>
          <desc>
            <p>
              Returns the paths where plug-ins should be
              searched by
              <ref type="method" id="-loadPlugInsOfType:">
                -loadPlugInsOfType:
              </ref>
              .
            </p>
            <p>
              If the executable is a tool rather than an
              application, returns an empty array.
            </p>
            <p>
              TODO: Allow to customize search paths.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>setShouldInstantiatePlugInClass:</sel>
          <arg type="BOOL">instantiate</arg>
          <desc>
            <p>
              Sets to <code>YES</code> if you want to have plug-in
              main class automatically instantiated when they are
              loaded, otherwise it's your responsability to
              retrieve the plug-in class and
              <var>instantiate</var> it. This is especially
              useful if a custom initializer is required to make
              the instantiation. For example:
            </p>
<example>
Class plugInClass = [[registry loadPlugInAtPath: path] objectForKey: @"class"];
CustomObject *mainObject = [[plugInClass alloc] initWithCity: @"Somewhere"];
</example>
          </desc>
        </method>
        <method type="BOOL">
          <sel>shouldInstantiatePlugInClass</sel>
          <desc>
            <p>
              @taskunit Loading Behavior
            </p>
            <p>
              Returns whether plug-in class should be
              instantiated at loading time by the
              registry.
            </p>
            <p>
              By default, returns <code>YES</code>.
            </p>
            <p>
              Read
              <ref type="method" id="-setShouldInstantiatePlugInClass:">-setShouldInstantiatePlugInClass:</ref> documentation to learn more.
            </p>
            <p>
              Returns whether plug-in class should be
              instantiated at loading time by the
              registry.
            </p>
            <p>
              By default, returns <code>YES</code>.
            </p>
            <p>
              Read
              <ref type="method" id="-setShouldInstantiatePlugInClass:">-setShouldInstantiatePlugInClass:</ref> documentation to learn more.
            </p>
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
