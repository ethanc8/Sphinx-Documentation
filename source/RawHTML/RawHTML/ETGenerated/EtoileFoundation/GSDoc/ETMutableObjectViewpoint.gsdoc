<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="ETMutableObjectViewpoint">
  <head>
    <title>ETMutableObjectViewpoint class documentation</title>
    <author name="Generated by pi"></author>
    <copy>2013 Quentin Mathe</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the
        ETMutableObjectViewpoint class
      </heading>
      <class name="ETMutableObjectViewpoint" super="NSObject">
        <declared>ETMutableObjectViewpoint.h</declared>
        <conform>ETPropertyViewpoint</conform>
        <desc>
          <p>
            @group Viewpoints @abstract A proxy giving access to
            a model property as a mutable object.
          </p>
          <p>
            ETMutableObjectViewpoint turns an
            attribute or to-one relationship property
            belonging to a represented object, into a mutable
            object proxy that updates the model property with a
            new immutable object in reaction to
            <ref type="method" id="-setValue:forProperty:">
              -setValue:forProperty:
            </ref>
            .
          </p>
          <p>
            ETMutableObjectViewpoint doesn't
            work as a mutable collection proxy for a to-many
            relationship property, you must use
            ETCollectionViewpoint instead.
          </p>
          <p>
            Using a mutable object as ETMutableObjectViewpoint
            value doesn't bring a lot of benefits, but is well
            supported and works transparently.
          </p>
          <p>
            For supporting editing a mutable object class,
            ETMutableObjectViewpoint must be
            subclassed. For example, for editing
            NSSortDescriptor, you must implement a
            new subclass such as ETMutableSortDescriptorViewpoint
            (this one is provided by EtoileUI though).
          </p>
          <p>
            This viewpoint uses Key-Value-Observing to detect any
            property changes on the represented object.
          </p>
          <p>
            The name is usually a property name, but can be a
            property path such as
            <em>currentColor.redComponent</em>. For a property
            path, the viewpoint observes just the first property
            (e.g. currentColor) that belongs to the represented
            object and not subsequent properties (e.g.
            redComoponent) in other objects.
          </p>
        </desc>
        <ivariable type="BOOL" name="_isSettingValue" validity="protected">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="id" factory="yes">
          <sel>viewpointWithName:</sel>
          <arg type="NSString*">key</arg>
          <sel>representedObject:</sel>
          <arg type="id">object</arg>
          <desc>
            <p>
              @taskunit Initialization
            </p>
          </desc>
        </method>
        <method type="id">
          <sel>initWithName:</sel>
          <arg type="NSString*">key</arg>
          <sel>representedObject:</sel>
          <arg type="id">object</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void">
          <sel>setRepresentedObject:</sel>
          <arg type="id">object</arg>
          <sel>oldObservedKeyPath:</sel>
          <arg type="NSString*">oldObservedKeyPath</arg>
          <sel>newObservedKeyPath:</sel>
          <arg type="NSString*">newObservedKeyPath</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL">
          <sel>setValue:</sel>
          <arg type="id">value</arg>
          <sel>forProperty:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <p>
              Returns a <var>value</var> bound to a property of
              the object
              <ref type="method" id="-value">
                -value
              </ref>
              . This method accesses properties of the represented
              property.
            </p>
          </desc>
        </method>
        <method type="void">
          <sel>startObserveRepresentedObject:</sel>
          <arg type="id">anObject</arg>
          <sel>forKeyPath:</sel>
          <arg type="NSString*">aKeyPath</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void">
          <sel>stopObserveRepresentedObject:</sel>
          <arg type="id">anObject</arg>
          <sel>forKeyPath:</sel>
          <arg type="NSString*">aKeyPath</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id">
          <sel>valueForProperty:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <p>
              @taskunit Property Value Coding
            </p>
            <p>
              Returns a value bound to a property of the object
              <ref type="method" id="-value">
                -value
              </ref>
              . This method accesses properties of the represented
              property.
            </p>
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
