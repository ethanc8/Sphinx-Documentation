{
    categories = {
	NSArchiver = {
	    GNUstep = NSArchiver;
	};
	NSArray = {
	    NSKeyValueObserverRegistration = NSKeyValueObserving;
	};
	NSBundle = {
	    GNUstep = NSBundle;
	};
	NSCalendarDate = {
	    GregorianDate = NSCalendarDate;
	    OPENSTEP = NSCalendarDate;
	};
	NSCoder = {
	    NSGeometryKeyedCoding = NSKeyedArchiver;
	};
	NSCountedSet = {
	    "GNU_Uniquing" = NSSet;
	};
	NSData = {
	    GNUstepExtensions = NSData;
	};
	NSDeserializer = {
	    GNUstep = NSSerialization;
	};
	NSDictionary = {
	    NSFileAttributes = NSFileManager;
	};
	NSFileHandle = {
	    GNUstepExtensions = NSFileHandle;
	    GNUstepTLS = NSFileHandle;
	};
	NSHost = {
	    GNUstep = NSHost;
	};
	NSInvocation = {
	    GNUstep = NSInvocation;
	    MacroSetup = NSInvocation;
	};
	NSKeyedArchiver = {
	    Internal = NSKeyedArchiver;
	};
	NSKeyedUnarchiver = {
	    Internal = NSKeyedArchiver;
	};
	NSMutableData = {
	    GNUstepExtensions = NSData;
	};
	NSMutableURLRequest = {
	    GNUstep = NSURLRequest;
	    NSMutableHTTPURLRequest = NSURLRequest;
	};
	NSNumber = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	NSObject = {
	    GNUstep = NSObject;
	    GSTraceLocks = NSLock;
	    NEXTSTEP = NSObject;
	    NSClassDescriptionPrimitives = NSClassDescription;
	    NSConnectionDelegate = NSConnection;
	    NSFileManagerDelegate = NSFileManager;
	    NSFileManagerHandler = NSFileManager;
	    NSKeyValueCoding = NSKeyValueCoding;
	    NSKeyValueObserverNotification = NSKeyValueObserving;
	    NSKeyValueObserverRegistration = NSKeyValueObserving;
	    NSKeyValueObserving = NSKeyValueObserving;
	    NSKeyValueObservingCustomization = NSKeyValueObserving;
	    NSKeyedArchiverDelegate = NSKeyedArchiver;
	    NSKeyedArchiverObjectSubstitution = NSKeyedArchiver;
	    NSKeyedUnarchiverDelegate = NSKeyedArchiver;
	    NSKeyedUnarchiverObjectSubstitution = NSKeyedArchiver;
	    NSNetServiceBrowserDelegateMethods = NSNetServices;
	    NSNetServiceDelegateMethods = NSNetServices;
	    NSPortCoder = NSPortCoder;
	    NSPortDelegateMethods = NSPort;
	    NSStreamDelegate = NSStream;
	    NSThreadPerformAdditions = NSThread;
	    NSURLClient = NSURL;
	    NSURLConnectionDelegate = NSURLConnection;
	    NSURLDownloadDelegate = NSURLDownload;
	    NSXMLParserDelegateEventAdditions = NSXMLParser;
	    RunLoopEvents = NSRunLoop;
	    TimedPerformers = NSObject;
	};
	NSPointerArray = {
	    NSArrayConveniences = NSPointerArray;
	};
	NSProcessInfo = {
	    GNUstep = NSProcessInfo;
	};
	NSRunLoop = {
	    GNUstepExtensions = NSRunLoop;
	    OPENSTEP = NSRunLoop;
	};
	NSSerializer = {
	    GNUstep = NSSerialization;
	};
	NSThread = {
	    CallStackSymbols = NSThread;
	    GSLockInfo = NSThread;
	};
	NSURLCache = {
	    NSURLSessionTaskAdditions = NSURLCache;
	};
	NSURLConnection = {
	    NSURLConnectionSynchronousLoading = NSURLConnection;
	};
	NSURLProtocol = {
	    Subclassing = NSURLProtocol;
	};
	NSURLRequest = {
	    NSHTTPURLRequest = NSURLRequest;
	};
	NSUnarchiver = {
	    GNUstep = NSArchiver;
	};
	NSValue = {
	    Subclassing = NSValue;
	};
	NSXMLParser = {
	    NSXMLParserLocatorAdditions = NSXMLParser;
	};
    };
    category = {
	"NSArchiver(GNUstep)" = NSArchiver;
	"NSArray(NSKeyValueObserverRegistration)" = NSKeyValueObserving;
	"NSBundle(GNUstep)" = NSBundle;
	"NSCalendarDate(GregorianDate)" = NSCalendarDate;
	"NSCalendarDate(OPENSTEP)" = NSCalendarDate;
	"NSCoder(NSGeometryKeyedCoding)" = NSKeyedArchiver;
	"NSCountedSet(GNU_Uniquing)" = NSSet;
	"NSData(GNUstepExtensions)" = NSData;
	"NSDeserializer(GNUstep)" = NSSerialization;
	"NSDictionary(NSFileAttributes)" = NSFileManager;
	"NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	"NSFileHandle(GNUstepTLS)" = NSFileHandle;
	"NSHost(GNUstep)" = NSHost;
	"NSInvocation(GNUstep)" = NSInvocation;
	"NSInvocation(MacroSetup)" = NSInvocation;
	"NSKeyedArchiver(Internal)" = NSKeyedArchiver;
	"NSKeyedUnarchiver(Internal)" = NSKeyedArchiver;
	"NSMutableData(GNUstepExtensions)" = NSData;
	"NSMutableURLRequest(GNUstep)" = NSURLRequest;
	"NSMutableURLRequest(NSMutableHTTPURLRequest)" = NSURLRequest;
	"NSNumber(NSDecimalNumber)" = NSDecimalNumber;
	"NSObject(GNUstep)" = NSObject;
	"NSObject(GSTraceLocks)" = NSLock;
	"NSObject(NEXTSTEP)" = NSObject;
	"NSObject(NSClassDescriptionPrimitives)" = NSClassDescription;
	"NSObject(NSConnectionDelegate)" = NSConnection;
	"NSObject(NSFileManagerDelegate)" = NSFileManager;
	"NSObject(NSFileManagerHandler)" = NSFileManager;
	"NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	"NSObject(NSKeyValueObserverNotification)" = NSKeyValueObserving;
	"NSObject(NSKeyValueObserverRegistration)" = NSKeyValueObserving;
	"NSObject(NSKeyValueObserving)" = NSKeyValueObserving;
	"NSObject(NSKeyValueObservingCustomization)" = NSKeyValueObserving;
	"NSObject(NSKeyedArchiverDelegate)" = NSKeyedArchiver;
	"NSObject(NSKeyedArchiverObjectSubstitution)" = NSKeyedArchiver;
	"NSObject(NSKeyedUnarchiverDelegate)" = NSKeyedArchiver;
	"NSObject(NSKeyedUnarchiverObjectSubstitution)" = NSKeyedArchiver;
	"NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	"NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	"NSObject(NSPortCoder)" = NSPortCoder;
	"NSObject(NSPortDelegateMethods)" = NSPort;
	"NSObject(NSStreamDelegate)" = NSStream;
	"NSObject(NSThreadPerformAdditions)" = NSThread;
	"NSObject(NSURLClient)" = NSURL;
	"NSObject(NSURLConnectionDelegate)" = NSURLConnection;
	"NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	"NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	"NSObject(RunLoopEvents)" = NSRunLoop;
	"NSObject(TimedPerformers)" = NSObject;
	"NSPointerArray(NSArrayConveniences)" = NSPointerArray;
	"NSProcessInfo(GNUstep)" = NSProcessInfo;
	"NSRunLoop(GNUstepExtensions)" = NSRunLoop;
	"NSRunLoop(OPENSTEP)" = NSRunLoop;
	"NSSerializer(GNUstep)" = NSSerialization;
	"NSThread(CallStackSymbols)" = NSThread;
	"NSThread(GSLockInfo)" = NSThread;
	"NSURLCache(NSURLSessionTaskAdditions)" = NSURLCache;
	"NSURLConnection(NSURLConnectionSynchronousLoading)" = NSURLConnection;
	"NSURLProtocol(Subclassing)" = NSURLProtocol;
	"NSURLRequest(NSHTTPURLRequest)" = NSURLRequest;
	"NSUnarchiver(GNUstep)" = NSArchiver;
	"NSValue(Subclassing)" = NSValue;
	"NSXMLParser(NSXMLParserLocatorAdditions)" = NSXMLParser;
    };
    class = {
	NSAffineTransform = NSAffineTransform;
	NSArchiver = NSArchiver;
	NSArray = NSArray;
	NSAssertionHandler = NSException;
	NSAttributedString = NSAttributedString;
	NSAutoreleasePool = NSAutoreleasePool;
	NSBundle = NSBundle;
	NSCachedURLResponse = NSURLCache;
	NSCalendarDate = NSCalendarDate;
	NSCharacterSet = NSCharacterSet;
	NSClassDescription = NSClassDescription;
	NSCoder = NSCoder;
	NSCondition = NSLock;
	NSConditionLock = NSLock;
	NSConnection = NSConnection;
	NSCountedSet = NSSet;
	NSData = NSData;
	NSDate = NSDate;
	NSDateFormatter = NSDateFormatter;
	NSDecimalNumber = NSDecimalNumber;
	NSDecimalNumberHandler = NSDecimalNumber;
	NSDeserializer = NSSerialization;
	NSDictionary = NSDictionary;
	NSDirectoryEnumerator = NSFileManager;
	NSDistantObject = NSDistantObject;
	NSDistributedLock = NSDistributedLock;
	NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	NSEnumerator = NSEnumerator;
	NSError = NSError;
	NSException = NSException;
	NSFileHandle = NSFileHandle;
	NSFileManager = NSFileManager;
	NSFormatter = NSFormatter;
	NSHTTPCookie = NSHTTPCookie;
	NSHTTPCookieStorage = NSHTTPCookieStorage;
	NSHTTPURLResponse = NSURLResponse;
	NSHashTable = NSHashTable;
	NSHost = NSHost;
	NSIndexPath = NSIndexPath;
	NSIndexSet = NSIndexSet;
	NSInputStream = NSStream;
	NSInvocation = NSInvocation;
	NSKeyedArchiver = NSKeyedArchiver;
	NSKeyedUnarchiver = NSKeyedArchiver;
	NSLock = NSLock;
	NSMapTable = NSMapTable;
	NSMessagePort = NSPort;
	NSMessagePortNameServer = NSPortNameServer;
	NSMethodSignature = NSMethodSignature;
	NSMutableArray = NSArray;
	NSMutableAttributedString = NSAttributedString;
	NSMutableCharacterSet = NSCharacterSet;
	NSMutableData = NSData;
	NSMutableDictionary = NSDictionary;
	NSMutableIndexSet = NSIndexSet;
	NSMutableSet = NSSet;
	NSMutableString = NSString;
	NSMutableURLRequest = NSURLRequest;
	NSNetService = NSNetServices;
	NSNetServiceBrowser = NSNetServices;
	NSNotification = NSNotification;
	NSNotificationCenter = NSNotification;
	NSNotificationQueue = NSNotificationQueue;
	NSNull = NSNull;
	NSNumber = NSValue;
	NSNumberFormatter = NSNumberFormatter;
	NSObject = NSObject;
	NSOutputStream = NSStream;
	NSPipe = NSFileHandle;
	NSPointerArray = NSPointerArray;
	NSPointerFunctions = NSPointerFunctions;
	NSPort = NSPort;
	NSPortCoder = NSPortCoder;
	NSPortMessage = NSPortMessage;
	NSPortNameServer = NSPortNameServer;
	NSProcessInfo = NSProcessInfo;
	NSPropertyListSerialization = NSPropertyList;
	NSProtocolChecker = NSProtocolChecker;
	NSProxy = NSProxy;
	NSRecursiveLock = NSLock;
	NSRunLoop = NSRunLoop;
	NSScanner = NSScanner;
	NSSerializer = NSSerialization;
	NSSet = NSSet;
	NSSocketPort = NSPort;
	NSSocketPortNameServer = NSPortNameServer;
	NSStream = NSStream;
	NSString = NSString;
	NSTask = NSTask;
	NSThread = NSThread;
	NSTimeZone = NSTimeZone;
	NSTimeZoneDetail = NSTimeZone;
	NSTimer = NSTimer;
	NSURL = NSURL;
	NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	NSURLCache = NSURLCache;
	NSURLComponents = NSURL;
	NSURLConnection = NSURLConnection;
	NSURLCredential = NSURLCredential;
	NSURLCredentialStorage = NSURLCredentialStorage;
	NSURLDownload = NSURLDownload;
	NSURLHandle = NSURLHandle;
	NSURLProtectionSpace = NSURLProtectionSpace;
	NSURLProtocol = NSURLProtocol;
	NSURLQueryItem = NSURL;
	NSURLRequest = NSURLRequest;
	NSURLResponse = NSURLResponse;
	NSUnarchiver = NSArchiver;
	NSUndoManager = NSUndoManager;
	NSUserDefaults = NSUserDefaults;
	NSValue = NSValue;
	NSValueTransformer = NSValueTransformer;
	NSXMLDTD = NSXMLDTD;
	NSXMLDTDNode = NSXMLDTDNode;
	NSXMLDocument = NSXMLDocument;
	NSXMLElement = NSXMLElement;
	NSXMLNode = NSXMLNode;
	NSXMLParser = NSXMLParser;
	NXConstantString = NSString;
    };
    classvars = {
	NSAutoreleasePool = {
	    "_addImp" = NSAutoreleasePool;
	    "_child" = NSAutoreleasePool;
	    "_parent" = NSAutoreleasePool;
	    "_released" = NSAutoreleasePool;
	    "_released_count" = NSAutoreleasePool;
	    "_released_head" = NSAutoreleasePool;
	};
	NSBundle = {
	    "_bundleClasses" = NSBundle;
	    "_bundleType" = NSBundle;
	    "_codeLoaded" = NSBundle;
	    "_frameworkVersion" = NSBundle;
	    "_infoDict" = NSBundle;
	    "_localizations" = NSBundle;
	    "_path" = NSBundle;
	    "_principalClass" = NSBundle;
	    "_version" = NSBundle;
	};
	NSCachedURLResponse = {
	    "_NSCachedURLResponseInternal" = NSURLCache;
	};
	NSCalendarDate = {
	    "_calendar_format" = NSCalendarDate;
	    "_seconds_since_ref" = NSCalendarDate;
	    "_time_zone" = NSCalendarDate;
	};
	NSCondition = {
	    "_condition" = NSLock;
	    "_mutex" = NSLock;
	    "_name" = NSLock;
	};
	NSConditionLock = {
	    "_condition" = NSLock;
	    "_condition_value" = NSLock;
	    "_name" = NSLock;
	};
	NSDateFormatter = {
	    "_allowsNaturalLanguage" = NSDateFormatter;
	    "_dateFormat" = NSDateFormatter;
	};
	NSDecimalNumber = {
	    data = NSDecimalNumber;
	};
	NSDecimalNumberHandler = {
	    "_raiseOnDivideByZero" = NSDecimalNumber;
	    "_raiseOnExactness" = NSDecimalNumber;
	    "_raiseOnOverflow" = NSDecimalNumber;
	    "_raiseOnUnderflow" = NSDecimalNumber;
	    "_roundingMode" = NSDecimalNumber;
	    "_scale" = NSDecimalNumber;
	};
	NSDistantObject = {
	    "_connection" = NSDistantObject;
	    "_counter" = NSDistantObject;
	    "_handle" = NSDistantObject;
	    "_object" = NSDistantObject;
	    "_protocol" = NSDistantObject;
	    "_sigs" = NSDistantObject;
	};
	NSDistributedLock = {
	    "_localLock" = NSDistributedLock;
	    "_lockPath" = NSDistributedLock;
	    "_lockTime" = NSDistributedLock;
	};
	NSDistributedNotificationCenter = {
	    "_centerLock" = NSDistributedNotificationCenter;
	    "_remote" = NSDistributedNotificationCenter;
	    "_suspended" = NSDistributedNotificationCenter;
	    "_type" = NSDistributedNotificationCenter;
	};
	NSIndexSet = {
	    "_data" = NSIndexSet;
	};
	NSInvocation = {
	    "_argsRetained" = NSInvocation;
	    "_cframe" = NSInvocation;
	    "_info" = NSInvocation;
	    "_numArgs" = NSInvocation;
	    "_retptr" = NSInvocation;
	    "_retval" = NSInvocation;
	    "_selector" = NSInvocation;
	    "_sendToSuper" = NSInvocation;
	    "_sig" = NSInvocation;
	    "_target" = NSInvocation;
	    "_targetRetained" = NSInvocation;
	    "_validReturn" = NSInvocation;
	};
	NSLock = {
	    "_mutex" = NSLock;
	    "_name" = NSLock;
	};
	NSMessagePort = {
	    "_internal" = NSPort;
	};
	NSNetService = {
	    "_delegate" = NSNetServices;
	    "_netService" = NSNetServices;
	    "_reserved" = NSNetServices;
	};
	NSNetServiceBrowser = {
	    "_delegate" = NSNetServices;
	    "_netServiceBrowser" = NSNetServices;
	    "_reserved" = NSNetServices;
	};
	NSNotificationQueue = {
	    "_asapQueue" = NSNotificationQueue;
	    "_center" = NSNotificationQueue;
	    "_idleQueue" = NSNotificationQueue;
	    "_zone" = NSNotificationQueue;
	};
	NSObject = {
	    isa = NSObject;
	};
	NSPort = {
	    "_delegate" = NSPort;
	    "_is_valid" = NSPort;
	};
	NSProxy = {
	    isa = NSProxy;
	};
	NSRecursiveLock = {
	    "_mutex" = NSLock;
	    "_name" = NSLock;
	};
	NSSocketPort = {
	    address = NSPort;
	    eventListener = NSPort;
	    events = NSPort;
	    handles = NSPort;
	    host = NSPort;
	    listener = NSPort;
	    myLock = NSPort;
	    portNum = NSPort;
	};
	NSSocketPortNameServer = {
	    "_nameMap" = NSPortNameServer;
	    "_portMap" = NSPortNameServer;
	};
	NSTask = {
	    "_arguments" = NSTask;
	    "_currentDirectoryPath" = NSTask;
	    "_environment" = NSTask;
	    "_hasCollected" = NSTask;
	    "_hasLaunched" = NSTask;
	    "_hasNotified" = NSTask;
	    "_hasTerminated" = NSTask;
	    "_launchPath" = NSTask;
	    "_launchingThread" = NSTask;
	    "_standardError" = NSTask;
	    "_standardInput" = NSTask;
	    "_standardOutput" = NSTask;
	    "_taskId" = NSTask;
	    "_terminationReason" = NSTask;
	    "_terminationStatus" = NSTask;
	};
	NSThread = {
	    "_active" = NSThread;
	    "_arg" = NSThread;
	    "_autorelease_vars" = NSThread;
	    "_cancelled" = NSThread;
	    "_exception_handler" = NSThread;
	    "_finished" = NSThread;
	    "_gcontext" = NSThread;
	    "_name" = NSThread;
	    "_runLoopInfo" = NSThread;
	    "_selector" = NSThread;
	    "_stackSize" = NSThread;
	    "_target" = NSThread;
	    "_thread_dictionary" = NSThread;
	};
	NSTimer = {
	    "_block" = NSTimer;
	    "_date" = NSTimer;
	    "_info" = NSTimer;
	    "_interval" = NSTimer;
	    "_invalidated" = NSTimer;
	    "_repeats" = NSTimer;
	    "_selector" = NSTimer;
	    "_target" = NSTimer;
	};
	NSURLAuthenticationChallenge = {
	    "_NSURLAuthenticationChallengeInternal" = NSURLAuthenticationChallenge;
	};
	NSURLCache = {
	    "_NSURLCacheInternal" = NSURLCache;
	};
	NSURLConnection = {
	    "_NSURLConnectionInternal" = NSURLConnection;
	};
	NSURLCredential = {
	    "_NSURLCredentialInternal" = NSURLCredential;
	};
	NSURLCredentialStorage = {
	    "_NSURLCredentialStorageInternal" = NSURLCredentialStorage;
	};
	NSURLDownload = {
	    "_NSURLDownloadInternal" = NSURLDownload;
	};
	NSURLHandle = {
	    "_clients" = NSURLHandle;
	    "_data" = NSURLHandle;
	    "_failure" = NSURLHandle;
	    "_status" = NSURLHandle;
	};
	NSURLProtectionSpace = {
	    "_NSURLProtectionSpaceInternal" = NSURLProtectionSpace;
	};
	NSURLProtocol = {
	    "_NSURLProtocolInternal" = NSURLProtocol;
	};
	NSURLRequest = {
	    "_NSURLRequestInternal" = NSURLRequest;
	};
	NSURLResponse = {
	    "_NSURLResponseInternal" = NSURLResponse;
	};
	NSXMLNode = {
	    "_internal" = NSXMLNode;
	};
	NSXMLParser = {
	    "_handler" = NSXMLParser;
	    "_parser" = NSXMLParser;
	};
	NXConstantString = {
	    flags = NSString;
	    hash = NSString;
	    nxcslen = NSString;
	    nxcsptr = NSString;
	    size = NSString;
	};
    };
    constant = {
	GSConfigDomain = TypesAndConstants;
	GSFileHandleConnectCompletionNotification = TypesAndConstants;
	GSFileHandleNotificationError = TypesAndConstants;
	GSFileHandleWriteCompletionNotification = TypesAndConstants;
	GSHTTPPropertyCertificateFileKey = TypesAndConstants;
	GSHTTPPropertyKeyFileKey = TypesAndConstants;
	GSHTTPPropertyLocalHostKey = TypesAndConstants;
	GSHTTPPropertyMethodKey = TypesAndConstants;
	GSHTTPPropertyPasswordKey = TypesAndConstants;
	GSHTTPPropertyProxyHostKey = TypesAndConstants;
	GSHTTPPropertyProxyPortKey = TypesAndConstants;
	GSLocale = TypesAndConstants;
	GSNetworkNotificationCenterType = TypesAndConstants;
	GSPublicNotificationCenterType = TypesAndConstants;
	GSTLSCAFile = TypesAndConstants;
	GSTLSCertificateFile = TypesAndConstants;
	GSTLSCertificateKeyFile = TypesAndConstants;
	GSTLSCertificateKeyPassword = TypesAndConstants;
	GSTLSDebug = TypesAndConstants;
	GSTLSPriority = TypesAndConstants;
	GSTLSRemoteHosts = TypesAndConstants;
	GSTLSRevokeFile = TypesAndConstants;
	GSTLSServerName = TypesAndConstants;
	GSTLSVerify = TypesAndConstants;
	NSAMPMDesignation = TypesAndConstants;
	NSArgumentDomain = TypesAndConstants;
	NSAssertionHandlerKey = TypesAndConstants;
	NSBundleDidLoadNotification = TypesAndConstants;
	NSCharacterConversionException = TypesAndConstants;
	NSClassDescriptionNeededForClassNotification = TypesAndConstants;
	NSConnectionDidDieNotification = TypesAndConstants;
	NSConnectionDidInitializeNotification = TypesAndConstants;
	NSConnectionLocalCount = TypesAndConstants;
	NSConnectionProxyCount = TypesAndConstants;
	NSConnectionRepliesReceived = TypesAndConstants;
	NSConnectionRepliesSent = TypesAndConstants;
	NSConnectionReplyMode = TypesAndConstants;
	NSConnectionRequestsReceived = TypesAndConstants;
	NSConnectionRequestsSent = TypesAndConstants;
	NSCurrencyString = TypesAndConstants;
	NSCurrencySymbol = TypesAndConstants;
	NSDateFormatString = TypesAndConstants;
	NSDateTimeOrdering = TypesAndConstants;
	NSDecimalDigits = TypesAndConstants;
	NSDecimalSeparator = TypesAndConstants;
	NSDestinationInvalidException = TypesAndConstants;
	NSEarlierTimeDesignations = TypesAndConstants;
	NSEdgeInsetsZero = TypesAndConstants;
	NSErrorFailingURLStringKey = TypesAndConstants;
	NSFailedAuthenticationException = TypesAndConstants;
	NSFileAppendOnly = TypesAndConstants;
	NSFileCreationDate = TypesAndConstants;
	NSFileDeviceIdentifier = TypesAndConstants;
	NSFileExtensionHidden = TypesAndConstants;
	NSFileGroupOwnerAccountID = TypesAndConstants;
	NSFileGroupOwnerAccountName = TypesAndConstants;
	NSFileHFSCreatorCode = TypesAndConstants;
	NSFileHFSTypeCode = TypesAndConstants;
	NSFileHandleConnectionAcceptedNotification = TypesAndConstants;
	NSFileHandleDataAvailableNotification = TypesAndConstants;
	NSFileHandleNotificationDataItem = TypesAndConstants;
	NSFileHandleNotificationFileHandleItem = TypesAndConstants;
	NSFileHandleNotificationMonitorModes = TypesAndConstants;
	NSFileHandleOperationException = TypesAndConstants;
	NSFileHandleReadCompletionNotification = TypesAndConstants;
	NSFileHandleReadToEndOfFileCompletionNotification = TypesAndConstants;
	NSFileImmutable = TypesAndConstants;
	NSFileModificationDate = TypesAndConstants;
	NSFileOwnerAccountID = TypesAndConstants;
	NSFileOwnerAccountName = TypesAndConstants;
	NSFilePathErrorKey = TypesAndConstants;
	NSFilePosixPermissions = TypesAndConstants;
	NSFileReferenceCount = TypesAndConstants;
	NSFileSize = TypesAndConstants;
	NSFileSystemFileNumber = TypesAndConstants;
	NSFileSystemFreeNodes = TypesAndConstants;
	NSFileSystemFreeSize = TypesAndConstants;
	NSFileSystemNodes = TypesAndConstants;
	NSFileSystemNumber = TypesAndConstants;
	NSFileSystemSize = TypesAndConstants;
	NSFileType = TypesAndConstants;
	NSFileTypeBlockSpecial = TypesAndConstants;
	NSFileTypeCharacterSpecial = TypesAndConstants;
	NSFileTypeDirectory = TypesAndConstants;
	NSFileTypeFifo = TypesAndConstants;
	NSFileTypeRegular = TypesAndConstants;
	NSFileTypeSocket = TypesAndConstants;
	NSFileTypeSymbolicLink = TypesAndConstants;
	NSFileTypeUnknown = TypesAndConstants;
	NSFormalName = TypesAndConstants;
	NSGenericException = TypesAndConstants;
	NSGlobalDomain = TypesAndConstants;
	NSHTTPCookieComment = TypesAndConstants;
	NSHTTPCookieCommentURL = TypesAndConstants;
	NSHTTPCookieDiscard = TypesAndConstants;
	NSHTTPCookieDomain = TypesAndConstants;
	NSHTTPCookieExpires = TypesAndConstants;
	NSHTTPCookieManagerAcceptPolicyChangedNotification = TypesAndConstants;
	NSHTTPCookieManagerCookiesChangedNotification = TypesAndConstants;
	NSHTTPCookieMaximumAge = TypesAndConstants;
	NSHTTPCookieName = TypesAndConstants;
	NSHTTPCookieOriginURL = TypesAndConstants;
	NSHTTPCookiePath = TypesAndConstants;
	NSHTTPCookiePort = TypesAndConstants;
	NSHTTPCookieSecure = TypesAndConstants;
	NSHTTPCookieValue = TypesAndConstants;
	NSHTTPCookieVersion = TypesAndConstants;
	NSHTTPPropertyErrorPageDataKey = TypesAndConstants;
	NSHTTPPropertyRedirectionHeadersKey = TypesAndConstants;
	NSHTTPPropertyServerHTTPVersionKey = TypesAndConstants;
	NSHTTPPropertyStatusCodeKey = TypesAndConstants;
	NSHTTPPropertyStatusReasonKey = TypesAndConstants;
	NSHourNameDesignations = TypesAndConstants;
	NSInconsistentArchiveException = TypesAndConstants;
	NSIntHashCallBacks = TypesAndConstants;
	NSIntMapKeyCallBacks = TypesAndConstants;
	NSIntMapValueCallBacks = TypesAndConstants;
	NSIntegerHashCallBacks = TypesAndConstants;
	NSIntegerMapKeyCallBacks = TypesAndConstants;
	NSIntegerMapValueCallBacks = TypesAndConstants;
	NSInternalInconsistencyException = TypesAndConstants;
	NSInternationalCurrencyString = TypesAndConstants;
	NSInvalidArchiveOperationException = TypesAndConstants;
	NSInvalidArgumentException = TypesAndConstants;
	NSInvalidReceivePortException = TypesAndConstants;
	NSInvalidSendPortException = TypesAndConstants;
	NSInvalidUnarchiveOperationException = TypesAndConstants;
	NSIsNilTransformerName = TypesAndConstants;
	NSIsNotNilTransformerName = TypesAndConstants;
	NSKeyValueChangeIndexesKey = TypesAndConstants;
	NSKeyValueChangeKindKey = TypesAndConstants;
	NSKeyValueChangeNewKey = TypesAndConstants;
	NSKeyValueChangeNotificationIsPriorKey = TypesAndConstants;
	NSKeyValueChangeOldKey = TypesAndConstants;
	NSLanguageCode = TypesAndConstants;
	NSLanguageName = TypesAndConstants;
	NSLaterTimeDesignations = TypesAndConstants;
	NSLoadedClasses = TypesAndConstants;
	NSLocalNotificationCenterType = TypesAndConstants;
	NSLocalizedDescriptionKey = TypesAndConstants;
	NSLocalizedFailureReasonErrorKey = TypesAndConstants;
	NSLocalizedRecoveryOptionsErrorKey = TypesAndConstants;
	NSLocalizedRecoverySuggestionErrorKey = TypesAndConstants;
	NSMallocException = TypesAndConstants;
	NSMonthNameArray = TypesAndConstants;
	NSNegateBooleanTransformerName = TypesAndConstants;
	NSNetServicesErrorCode = TypesAndConstants;
	NSNetServicesErrorDomain = TypesAndConstants;
	NSNextDayDesignations = TypesAndConstants;
	NSNextNextDayDesignations = TypesAndConstants;
	NSNonOwnedPointerHashCallBacks = TypesAndConstants;
	NSNonOwnedPointerMapKeyCallBacks = TypesAndConstants;
	NSNonOwnedPointerMapValueCallBacks = TypesAndConstants;
	NSNonOwnedPointerOrNullMapKeyCallBacks = TypesAndConstants;
	NSNonRetainedObjectHashCallBacks = TypesAndConstants;
	NSNonRetainedObjectMapKeyCallBacks = TypesAndConstants;
	NSNonRetainedObjectMapValueCallBacks = TypesAndConstants;
	NSObjectHashCallBacks = TypesAndConstants;
	NSObjectInaccessibleException = TypesAndConstants;
	NSObjectMapKeyCallBacks = TypesAndConstants;
	NSObjectMapValueCallBacks = TypesAndConstants;
	NSObjectNotAvailableException = TypesAndConstants;
	NSOldStyleException = TypesAndConstants;
	NSOwnedPointerHashCallBacks = TypesAndConstants;
	NSOwnedPointerMapKeyCallBacks = TypesAndConstants;
	NSOwnedPointerMapValueCallBacks = TypesAndConstants;
	NSParseErrorException = TypesAndConstants;
	NSPointerToStructHashCallBacks = TypesAndConstants;
	NSPortDidBecomeInvalidNotification = TypesAndConstants;
	NSPortReceiveException = TypesAndConstants;
	NSPortSendException = TypesAndConstants;
	NSPortTimeoutException = TypesAndConstants;
	NSPriorDayDesignations = TypesAndConstants;
	NSRangeException = TypesAndConstants;
	NSRecoveryAttempterErrorKey = TypesAndConstants;
	NSRegistrationDomain = TypesAndConstants;
	NSShortDateFormatString = TypesAndConstants;
	NSShortMonthNameArray = TypesAndConstants;
	NSShortTimeDateFormatString = TypesAndConstants;
	NSShortWeekDayNameArray = TypesAndConstants;
	NSShowNonLocalizedStrings = TypesAndConstants;
	NSStreamDataWrittenToMemoryStreamKey = TypesAndConstants;
	NSStreamFileCurrentOffsetKey = TypesAndConstants;
	NSStreamSOCKSErrorDomain = TypesAndConstants;
	NSStreamSOCKSProxyConfigurationKey = TypesAndConstants;
	NSStreamSOCKSProxyHostKey = TypesAndConstants;
	NSStreamSOCKSProxyPasswordKey = TypesAndConstants;
	NSStreamSOCKSProxyPortKey = TypesAndConstants;
	NSStreamSOCKSProxyUserKey = TypesAndConstants;
	NSStreamSOCKSProxyVersion4 = TypesAndConstants;
	NSStreamSOCKSProxyVersion5 = TypesAndConstants;
	NSStreamSOCKSProxyVersionKey = TypesAndConstants;
	NSStreamSocketSSLErrorDomain = TypesAndConstants;
	NSStreamSocketSecurityLevelKey = TypesAndConstants;
	NSStreamSocketSecurityLevelNegotiatedSSL = TypesAndConstants;
	NSStreamSocketSecurityLevelNone = TypesAndConstants;
	NSStreamSocketSecurityLevelSSLv2 = TypesAndConstants;
	NSStreamSocketSecurityLevelSSLv3 = TypesAndConstants;
	NSStreamSocketSecurityLevelTLSv1 = TypesAndConstants;
	NSStringEncodingErrorKey = TypesAndConstants;
	NSSystemClockDidChangeNotification = TypesAndConstants;
	NSSystemTimeZoneDidChangeNotification = TypesAndConstants;
	NSTaskDidTerminateNotification = TypesAndConstants;
	NSThisDayDesignations = TypesAndConstants;
	NSThousandsSeparator = TypesAndConstants;
	NSThreadDidStartNotification = TypesAndConstants;
	NSThreadWillExitNotification = TypesAndConstants;
	NSThumbnail1024x1024SizeKey = TypesAndConstants;
	NSTimeDateFormatString = TypesAndConstants;
	NSTimeFormatString = TypesAndConstants;
	NSTimeIntervalSince1970 = TypesAndConstants;
	NSURLAddedToDirectoryDateKey = TypesAndConstants;
	NSURLApplicationIsScriptableKey = TypesAndConstants;
	NSURLAttributeModificationDateKey = TypesAndConstants;
	NSURLAuthenticationMethodClientCertificate = TypesAndConstants;
	NSURLAuthenticationMethodDefault = TypesAndConstants;
	NSURLAuthenticationMethodHTMLForm = TypesAndConstants;
	NSURLAuthenticationMethodHTTPBasic = TypesAndConstants;
	NSURLAuthenticationMethodHTTPDigest = TypesAndConstants;
	NSURLAuthenticationMethodNTLM = TypesAndConstants;
	NSURLAuthenticationMethodNegotiate = TypesAndConstants;
	NSURLAuthenticationMethodServerTrust = TypesAndConstants;
	NSURLContentAccessDateKey = TypesAndConstants;
	NSURLContentModificationDateKey = TypesAndConstants;
	NSURLCreationDateKey = TypesAndConstants;
	NSURLCredentialStorageChangedNotification = TypesAndConstants;
	NSURLCustomIconKey = TypesAndConstants;
	NSURLDocumentIdentifierKey = TypesAndConstants;
	NSURLEffectiveIconKey = TypesAndConstants;
	NSURLErrorDomain = TypesAndConstants;
	NSURLErrorFailingURLErrorKey = TypesAndConstants;
	NSURLErrorFailingURLStringErrorKey = TypesAndConstants;
	NSURLErrorKey = TypesAndConstants;
	NSURLFileAllocatedSizeKey = TypesAndConstants;
	NSURLFileResourceIdentifierKey = TypesAndConstants;
	NSURLFileResourceTypeBlockSpecial = TypesAndConstants;
	NSURLFileResourceTypeCharacterSpecial = TypesAndConstants;
	NSURLFileResourceTypeDirectory = TypesAndConstants;
	NSURLFileResourceTypeKey = TypesAndConstants;
	NSURLFileResourceTypeNamedPipe = TypesAndConstants;
	NSURLFileResourceTypeRegular = TypesAndConstants;
	NSURLFileResourceTypeSocket = TypesAndConstants;
	NSURLFileResourceTypeSymbolicLink = TypesAndConstants;
	NSURLFileResourceTypeUnknown = TypesAndConstants;
	NSURLFileScheme = TypesAndConstants;
	NSURLFileSecurityKey = TypesAndConstants;
	NSURLFileSizeKey = TypesAndConstants;
	NSURLGenerationIdentifierKey = TypesAndConstants;
	NSURLHasHiddenExtensionKey = TypesAndConstants;
	NSURLIsAliasFileKey = TypesAndConstants;
	NSURLIsApplicationKey = TypesAndConstants;
	NSURLIsDirectoryKey = TypesAndConstants;
	NSURLIsExcludedFromBackupKey = TypesAndConstants;
	NSURLIsExecutableKey = TypesAndConstants;
	NSURLIsHiddenKey = TypesAndConstants;
	NSURLIsMountTriggerKey = TypesAndConstants;
	NSURLIsPackageKey = TypesAndConstants;
	NSURLIsReadableKey = TypesAndConstants;
	NSURLIsRegularFileKey = TypesAndConstants;
	NSURLIsSymbolicLinkKey = TypesAndConstants;
	NSURLIsSystemImmutableKey = TypesAndConstants;
	NSURLIsUbiquitousItemKey = TypesAndConstants;
	NSURLIsUserImmutableKey = TypesAndConstants;
	NSURLIsVolumeKey = TypesAndConstants;
	NSURLIsWritableKey = TypesAndConstants;
	NSURLLabelColorKey = TypesAndConstants;
	NSURLLabelNumberKey = TypesAndConstants;
	NSURLLinkCountKey = TypesAndConstants;
	NSURLLocalizedLabelKey = TypesAndConstants;
	NSURLLocalizedNameKey = TypesAndConstants;
	NSURLLocalizedTypeDescriptionKey = TypesAndConstants;
	NSURLNameKey = TypesAndConstants;
	NSURLParentDirectoryURLKey = TypesAndConstants;
	NSURLPathKey = TypesAndConstants;
	NSURLPreferredIOBlockSizeKey = TypesAndConstants;
	NSURLProtectionSpaceFTPProxy = TypesAndConstants;
	NSURLProtectionSpaceHTTPProxy = TypesAndConstants;
	NSURLProtectionSpaceHTTPSProxy = TypesAndConstants;
	NSURLProtectionSpaceSOCKSProxy = TypesAndConstants;
	NSURLQuarantinePropertiesKey = TypesAndConstants;
	NSURLTagNamesKey = TypesAndConstants;
	NSURLTotalFileAllocatedSizeKey = TypesAndConstants;
	NSURLTotalFileSizeKey = TypesAndConstants;
	NSURLTypeIdentifierKey = TypesAndConstants;
	NSURLUbiquitousItemContainerDisplayNameKey = TypesAndConstants;
	NSURLUbiquitousItemDownloadRequestedKey = TypesAndConstants;
	NSURLUbiquitousItemDownloadingErrorKey = TypesAndConstants;
	NSURLUbiquitousItemDownloadingStatusCurrent = TypesAndConstants;
	NSURLUbiquitousItemDownloadingStatusDownloaded = TypesAndConstants;
	NSURLUbiquitousItemDownloadingStatusKey = TypesAndConstants;
	NSURLUbiquitousItemDownloadingStatusNotDownloaded = TypesAndConstants;
	NSURLUbiquitousItemHasUnresolvedConflictsKey = TypesAndConstants;
	NSURLUbiquitousItemIsDownloadingKey = TypesAndConstants;
	NSURLUbiquitousItemIsUploadedKey = TypesAndConstants;
	NSURLUbiquitousItemIsUploadingKey = TypesAndConstants;
	NSURLUbiquitousItemUploadingErrorKey = TypesAndConstants;
	NSURLVolumeAvailableCapacityKey = TypesAndConstants;
	NSURLVolumeCreationDateKey = TypesAndConstants;
	NSURLVolumeIdentifierKey = TypesAndConstants;
	NSURLVolumeIsAutomountedKey = TypesAndConstants;
	NSURLVolumeIsBrowsableKey = TypesAndConstants;
	NSURLVolumeIsEjectableKey = TypesAndConstants;
	NSURLVolumeIsInternalKey = TypesAndConstants;
	NSURLVolumeIsJournalingKey = TypesAndConstants;
	NSURLVolumeIsLocalKey = TypesAndConstants;
	NSURLVolumeIsReadOnlyKey = TypesAndConstants;
	NSURLVolumeIsRemovableKey = TypesAndConstants;
	NSURLVolumeLocalizedFormatDescriptionKey = TypesAndConstants;
	NSURLVolumeLocalizedNameKey = TypesAndConstants;
	NSURLVolumeMaximumFileSizeKey = TypesAndConstants;
	NSURLVolumeNameKey = TypesAndConstants;
	NSURLVolumeResourceCountKey = TypesAndConstants;
	NSURLVolumeSupportsAdvisoryFileLockingKey = TypesAndConstants;
	NSURLVolumeSupportsCasePreservedNamesKey = TypesAndConstants;
	NSURLVolumeSupportsCaseSensitiveNamesKey = TypesAndConstants;
	NSURLVolumeSupportsExtendedSecurityKey = TypesAndConstants;
	NSURLVolumeSupportsHardLinksKey = TypesAndConstants;
	NSURLVolumeSupportsJournalingKey = TypesAndConstants;
	NSURLVolumeSupportsPersistentIDsKey = TypesAndConstants;
	NSURLVolumeSupportsRenamingKey = TypesAndConstants;
	NSURLVolumeSupportsRootDirectoryDatesKey = TypesAndConstants;
	NSURLVolumeSupportsSparseFilesKey = TypesAndConstants;
	NSURLVolumeSupportsSymbolicLinksKey = TypesAndConstants;
	NSURLVolumeSupportsVolumeSizesKey = TypesAndConstants;
	NSURLVolumeSupportsZeroRunsKey = TypesAndConstants;
	NSURLVolumeTotalCapacityKey = TypesAndConstants;
	NSURLVolumeURLForRemountingKey = TypesAndConstants;
	NSURLVolumeURLKey = TypesAndConstants;
	NSURLVolumeUUIDStringKey = TypesAndConstants;
	NSUnarchiveFromDataTransformerName = TypesAndConstants;
	NSUndefinedKeyException = TypesAndConstants;
	NSUnderlyingErrorKey = TypesAndConstants;
	NSUndoManagerCheckpointNotification = TypesAndConstants;
	NSUndoManagerDidOpenUndoGroupNotification = TypesAndConstants;
	NSUndoManagerDidRedoChangeNotification = TypesAndConstants;
	NSUndoManagerDidUndoChangeNotification = TypesAndConstants;
	NSUndoManagerWillCloseUndoGroupNotification = TypesAndConstants;
	NSUndoManagerWillRedoChangeNotification = TypesAndConstants;
	NSUndoManagerWillUndoChangeNotification = TypesAndConstants;
	NSUserDefaultsDidChangeNotification = TypesAndConstants;
	NSWeekDayNameArray = TypesAndConstants;
	NSWillBecomeMultiThreadedNotification = TypesAndConstants;
	NSXMLParserErrorDomain = TypesAndConstants;
	NSYearMonthWeekDesignations = TypesAndConstants;
	NSZeroPoint = TypesAndConstants;
	NSZeroRect = TypesAndConstants;
	NSZeroSize = TypesAndConstants;
    };
    function = {
	GNUstepConfig = Functions;
	GNUstepUserConfig = Functions;
	GSAssignZeroingWeakPointer = Functions;
	GSDebugAllocationActive = Functions;
	GSDebugAllocationActiveRecordingObjects = Functions;
	GSDebugAllocationAdd = Functions;
	GSDebugAllocationBytes = Functions;
	GSDebugAllocationClassList = Functions;
	GSDebugAllocationCount = Functions;
	GSDebugAllocationList = Functions;
	GSDebugAllocationListAll = Functions;
	GSDebugAllocationListRecordedObjects = Functions;
	GSDebugAllocationPeak = Functions;
	GSDebugAllocationRecordObjects = Functions;
	GSDebugAllocationRemove = Functions;
	GSDebugAllocationTagRecordedObject = Functions;
	GSDebugAllocationTotal = Functions;
	GSDebugSet = Functions;
	GSDefaultsRootForUser = Functions;
	GSInitializeProcess = Functions;
	GSInitializeProcessAndroid = Functions;
	GSLogLock = Functions;
	GSMakeWeakPointer = Functions;
	GSOutOfMemory = Functions;
	GSRegisterCurrentThread = Functions;
	GSSetDebugAllocationFunctions = Functions;
	GSSetUserName = Functions;
	GSUPurge = Functions;
	GSUSet = Functions;
	GSUnique = Functions;
	GSUniquing = Functions;
	GSUnregisterCurrentThread = Functions;
	NSAllHashTableObjects = Functions;
	NSAllMapTableKeys = Functions;
	NSAllMapTableValues = Functions;
	NSAllocateCollectable = Functions;
	NSAllocateMemoryPages = Functions;
	NSAllocateObject = Functions;
	NSClassFromString = Functions;
	NSCompareHashTables = Functions;
	NSCompareMapTables = Functions;
	NSContainsRect = Functions;
	NSCopyHashTableWithZone = Functions;
	NSCopyMapTableWithZone = Functions;
	NSCopyMemoryPages = Functions;
	NSCopyObject = Functions;
	NSCountFrames = Functions;
	NSCountHashTable = Functions;
	NSCountMapTable = Functions;
	NSCreateHashTable = Functions;
	NSCreateHashTableWithZone = Functions;
	NSCreateMapTable = Functions;
	NSCreateMapTableWithZone = Functions;
	NSCreateZone = Functions;
	NSDeallocateMemoryPages = Functions;
	NSDeallocateObject = Functions;
	NSDecimalAdd = Functions;
	NSDecimalCompact = Functions;
	NSDecimalCompare = Functions;
	NSDecimalCopy = Functions;
	NSDecimalDivide = Functions;
	NSDecimalDouble = Functions;
	NSDecimalFromComponents = Functions;
	NSDecimalFromString = Functions;
	NSDecimalIsNotANumber = Functions;
	NSDecimalMax = Functions;
	NSDecimalMin = Functions;
	NSDecimalMultiply = Functions;
	NSDecimalMultiplyByPowerOf10 = Functions;
	NSDecimalNormalize = Functions;
	NSDecimalPower = Functions;
	NSDecimalRound = Functions;
	NSDecimalString = Functions;
	NSDecimalSubtract = Functions;
	NSDecrementExtraRefCountWasZero = Functions;
	NSDefaultMallocZone = Functions;
	NSDivideRect = Functions;
	NSEdgeInsetsEqual = Functions;
	NSEdgeInsetsMake = Functions;
	NSEndHashTableEnumeration = Functions;
	NSEndMapTableEnumeration = Functions;
	NSEnumerateHashTable = Functions;
	NSEnumerateMapTable = Functions;
	NSEqualPoints = Functions;
	NSEqualRanges = Functions;
	NSEqualRects = Functions;
	NSEqualSizes = Functions;
	NSExtraRefCount = Functions;
	NSFrameAddress = Functions;
	NSFreeHashTable = Functions;
	NSFreeMapTable = Functions;
	NSFullUserName = Functions;
	NSGetSizeAndAlignment = Functions;
	NSGetUncaughtExceptionHandler = Functions;
	NSHashGet = Functions;
	NSHashInsert = Functions;
	NSHashInsertIfAbsent = Functions;
	NSHashInsertKnownAbsent = Functions;
	NSHashRemove = Functions;
	NSHeight = Functions;
	NSHomeDirectory = Functions;
	NSHomeDirectoryForUser = Functions;
	NSIncrementExtraRefCount = Functions;
	NSInsetRect = Functions;
	NSIntegralRect = Functions;
	NSIntersectionRange = Functions;
	NSIntersectionRect = Functions;
	NSIntersectsRect = Functions;
	NSIsEmptyRect = Functions;
	NSLocationInRange = Functions;
	"NSLock_error_handler" = Functions;
	NSLog = Functions;
	NSLogPageSize = Functions;
	"NSLog_printf_handler" = Functions;
	NSLogv = Functions;
	NSMakeCollectable = Functions;
	NSMakePoint = Functions;
	NSMakeRange = Functions;
	NSMakeRect = Functions;
	NSMakeSize = Functions;
	NSMapGet = Functions;
	NSMapInsert = Functions;
	NSMapInsertIfAbsent = Functions;
	NSMapInsertKnownAbsent = Functions;
	NSMapMember = Functions;
	NSMapRemove = Functions;
	NSMaxRange = Functions;
	NSMaxX = Functions;
	NSMaxY = Functions;
	NSMidX = Functions;
	NSMidY = Functions;
	NSMinX = Functions;
	NSMinY = Functions;
	NSMouseInRect = Functions;
	NSNextHashEnumeratorItem = Functions;
	NSNextMapEnumeratorPair = Functions;
	NSOffsetRect = Functions;
	NSOpenStepRootDirectory = Functions;
	NSPageSize = Functions;
	NSPointFromString = Functions;
	NSPointInRect = Functions;
	NSProtocolFromString = Functions;
	NSRangeFromString = Functions;
	NSRealMemoryAvailable = Functions;
	NSReallocateCollectable = Functions;
	NSRectFromString = Functions;
	NSRecycleZone = Functions;
	NSResetHashTable = Functions;
	NSResetMapTable = Functions;
	NSReturnAddress = Functions;
	NSRoundDownToMultipleOfPageSize = Functions;
	NSRoundUpToMultipleOfPageSize = Functions;
	NSSearchPathForDirectoriesInDomains = Functions;
	NSSelectorFromString = Functions;
	NSSetUncaughtExceptionHandler = Functions;
	NSSetZoneName = Functions;
	NSShouldRetainWithZone = Functions;
	NSSizeFromString = Functions;
	NSStandardApplicationPaths = Functions;
	NSStandardLibraryPaths = Functions;
	NSStringFromClass = Functions;
	NSStringFromHashTable = Functions;
	NSStringFromMapTable = Functions;
	NSStringFromPoint = Functions;
	NSStringFromProtocol = Functions;
	NSStringFromRange = Functions;
	NSStringFromRect = Functions;
	NSStringFromSelector = Functions;
	NSStringFromSize = Functions;
	NSTemporaryDirectory = Functions;
	NSUncaughtExceptionHandler = Functions;
	NSUnionRange = Functions;
	NSUnionRect = Functions;
	NSUserName = Functions;
	NSWidth = Functions;
	NSZoneCalloc = Functions;
	NSZoneCheck = Functions;
	NSZoneFree = Functions;
	NSZoneFromPointer = Functions;
	NSZoneMalloc = Functions;
	NSZoneName = Functions;
	NSZoneRealloc = Functions;
	NSZoneStats = Functions;
	"_NSAddHandler" = Functions;
	"_NSRangeExceptionRaise" = Functions;
	"_NSRemoveHandler" = Functions;
    };
    ivariable = {
	"_NSCachedURLResponseInternal" = {
	    NSCachedURLResponse = NSURLCache;
	};
	"_NSURLAuthenticationChallengeInternal" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"_NSURLCacheInternal" = {
	    NSURLCache = NSURLCache;
	};
	"_NSURLConnectionInternal" = {
	    NSURLConnection = NSURLConnection;
	};
	"_NSURLCredentialInternal" = {
	    NSURLCredential = NSURLCredential;
	};
	"_NSURLCredentialStorageInternal" = {
	    NSURLCredentialStorage = NSURLCredentialStorage;
	};
	"_NSURLDownloadInternal" = {
	    NSURLDownload = NSURLDownload;
	};
	"_NSURLProtectionSpaceInternal" = {
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"_NSURLProtocolInternal" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"_NSURLRequestInternal" = {
	    NSURLRequest = NSURLRequest;
	};
	"_NSURLResponseInternal" = {
	    NSURLResponse = NSURLResponse;
	};
	"_active" = {
	    NSThread = NSThread;
	};
	"_addImp" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"_allowsNaturalLanguage" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"_arg" = {
	    NSThread = NSThread;
	};
	"_argsRetained" = {
	    NSInvocation = NSInvocation;
	};
	"_arguments" = {
	    NSTask = NSTask;
	};
	"_asapQueue" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	"_autorelease_vars" = {
	    NSThread = NSThread;
	};
	"_block" = {
	    NSTimer = NSTimer;
	};
	"_bundleClasses" = {
	    NSBundle = NSBundle;
	};
	"_bundleType" = {
	    NSBundle = NSBundle;
	};
	"_calendar_format" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"_cancelled" = {
	    NSThread = NSThread;
	};
	"_center" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	"_centerLock" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"_cframe" = {
	    NSInvocation = NSInvocation;
	};
	"_child" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"_clients" = {
	    NSURLHandle = NSURLHandle;
	};
	"_codeLoaded" = {
	    NSBundle = NSBundle;
	};
	"_condition" = {
	    NSCondition = NSLock;
	    NSConditionLock = NSLock;
	};
	"_condition_value" = {
	    NSConditionLock = NSLock;
	};
	"_connection" = {
	    NSDistantObject = NSDistantObject;
	};
	"_counter" = {
	    NSDistantObject = NSDistantObject;
	};
	"_currentDirectoryPath" = {
	    NSTask = NSTask;
	};
	"_data" = {
	    NSIndexSet = NSIndexSet;
	    NSURLHandle = NSURLHandle;
	};
	"_date" = {
	    NSTimer = NSTimer;
	};
	"_dateFormat" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"_delegate" = {
	    NSNetService = NSNetServices;
	    NSNetServiceBrowser = NSNetServices;
	    NSPort = NSPort;
	};
	"_environment" = {
	    NSTask = NSTask;
	};
	"_exception_handler" = {
	    NSThread = NSThread;
	};
	"_failure" = {
	    NSURLHandle = NSURLHandle;
	};
	"_finished" = {
	    NSThread = NSThread;
	};
	"_frameworkVersion" = {
	    NSBundle = NSBundle;
	};
	"_gcontext" = {
	    NSThread = NSThread;
	};
	"_handle" = {
	    NSDistantObject = NSDistantObject;
	};
	"_handler" = {
	    NSXMLParser = NSXMLParser;
	};
	"_hasCollected" = {
	    NSTask = NSTask;
	};
	"_hasLaunched" = {
	    NSTask = NSTask;
	};
	"_hasNotified" = {
	    NSTask = NSTask;
	};
	"_hasTerminated" = {
	    NSTask = NSTask;
	};
	"_idleQueue" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	"_info" = {
	    NSInvocation = NSInvocation;
	    NSTimer = NSTimer;
	};
	"_infoDict" = {
	    NSBundle = NSBundle;
	};
	"_internal" = {
	    NSMessagePort = NSPort;
	    NSXMLNode = NSXMLNode;
	};
	"_interval" = {
	    NSTimer = NSTimer;
	};
	"_invalidated" = {
	    NSTimer = NSTimer;
	};
	"_is_valid" = {
	    NSPort = NSPort;
	};
	"_launchPath" = {
	    NSTask = NSTask;
	};
	"_launchingThread" = {
	    NSTask = NSTask;
	};
	"_localLock" = {
	    NSDistributedLock = NSDistributedLock;
	};
	"_localizations" = {
	    NSBundle = NSBundle;
	};
	"_lockPath" = {
	    NSDistributedLock = NSDistributedLock;
	};
	"_lockTime" = {
	    NSDistributedLock = NSDistributedLock;
	};
	"_mutex" = {
	    NSCondition = NSLock;
	    NSLock = NSLock;
	    NSRecursiveLock = NSLock;
	};
	"_name" = {
	    NSCondition = NSLock;
	    NSConditionLock = NSLock;
	    NSLock = NSLock;
	    NSRecursiveLock = NSLock;
	    NSThread = NSThread;
	};
	"_nameMap" = {
	    NSSocketPortNameServer = NSPortNameServer;
	};
	"_netService" = {
	    NSNetService = NSNetServices;
	};
	"_netServiceBrowser" = {
	    NSNetServiceBrowser = NSNetServices;
	};
	"_numArgs" = {
	    NSInvocation = NSInvocation;
	};
	"_object" = {
	    NSDistantObject = NSDistantObject;
	};
	"_parent" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"_parser" = {
	    NSXMLParser = NSXMLParser;
	};
	"_path" = {
	    NSBundle = NSBundle;
	};
	"_portMap" = {
	    NSSocketPortNameServer = NSPortNameServer;
	};
	"_principalClass" = {
	    NSBundle = NSBundle;
	};
	"_protocol" = {
	    NSDistantObject = NSDistantObject;
	};
	"_raiseOnDivideByZero" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"_raiseOnExactness" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"_raiseOnOverflow" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"_raiseOnUnderflow" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"_released" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"_released_count" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"_released_head" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"_remote" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"_repeats" = {
	    NSTimer = NSTimer;
	};
	"_reserved" = {
	    NSNetService = NSNetServices;
	    NSNetServiceBrowser = NSNetServices;
	};
	"_retptr" = {
	    NSInvocation = NSInvocation;
	};
	"_retval" = {
	    NSInvocation = NSInvocation;
	};
	"_roundingMode" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"_runLoopInfo" = {
	    NSThread = NSThread;
	};
	"_scale" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"_seconds_since_ref" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"_selector" = {
	    NSInvocation = NSInvocation;
	    NSThread = NSThread;
	    NSTimer = NSTimer;
	};
	"_sendToSuper" = {
	    NSInvocation = NSInvocation;
	};
	"_sig" = {
	    NSInvocation = NSInvocation;
	};
	"_sigs" = {
	    NSDistantObject = NSDistantObject;
	};
	"_stackSize" = {
	    NSThread = NSThread;
	};
	"_standardError" = {
	    NSTask = NSTask;
	};
	"_standardInput" = {
	    NSTask = NSTask;
	};
	"_standardOutput" = {
	    NSTask = NSTask;
	};
	"_status" = {
	    NSURLHandle = NSURLHandle;
	};
	"_suspended" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"_target" = {
	    NSInvocation = NSInvocation;
	    NSThread = NSThread;
	    NSTimer = NSTimer;
	};
	"_targetRetained" = {
	    NSInvocation = NSInvocation;
	};
	"_taskId" = {
	    NSTask = NSTask;
	};
	"_terminationReason" = {
	    NSTask = NSTask;
	};
	"_terminationStatus" = {
	    NSTask = NSTask;
	};
	"_thread_dictionary" = {
	    NSThread = NSThread;
	};
	"_time_zone" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"_type" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"_validReturn" = {
	    NSInvocation = NSInvocation;
	};
	"_version" = {
	    NSBundle = NSBundle;
	};
	"_zone" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	address = {
	    NSSocketPort = NSPort;
	};
	data = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	eventListener = {
	    NSSocketPort = NSPort;
	};
	events = {
	    NSSocketPort = NSPort;
	};
	flags = {
	    NXConstantString = NSString;
	};
	handles = {
	    NSSocketPort = NSPort;
	};
	hash = {
	    NXConstantString = NSString;
	};
	host = {
	    NSSocketPort = NSPort;
	};
	isa = {
	    NSObject = NSObject;
	    NSProxy = NSProxy;
	};
	listener = {
	    NSSocketPort = NSPort;
	};
	myLock = {
	    NSSocketPort = NSPort;
	};
	nxcslen = {
	    NXConstantString = NSString;
	};
	nxcsptr = {
	    NXConstantString = NSString;
	};
	portNum = {
	    NSSocketPort = NSPort;
	};
	size = {
	    NXConstantString = NSString;
	};
    };
    macro = {
	"FOUNDATION_EXPORT" = Functions;
	NSAssert = Functions;
	NSAssert1 = Functions;
	NSAssert2 = Functions;
	NSAssert3 = Functions;
	NSAssert4 = Functions;
	NSAssert5 = Functions;
	NSCAssert = Functions;
	NSCAssert1 = Functions;
	NSCAssert2 = Functions;
	NSCAssert3 = Functions;
	NSCAssert4 = Functions;
	NSCAssert5 = Functions;
	NSCParameterAssert = Functions;
	NSDecimalMaxSize = Functions;
	NSLocalizedString = Functions;
	NSLocalizedStringFromTable = Functions;
	NSLocalizedStringFromTableInBundle = Functions;
	NSParameterAssert = Functions;
	"NS_CLASS_AVAILABLE" = Functions;
	"NS_INVOCATION" = Functions;
	"NS_MESSAGE" = Functions;
    };
    method = {
	"+DTDNodeWithXMLString:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+URLByResolvingAliasFileAtURL:options:error:" = {
	    NSURL = NSURL;
	};
	"+URLForResource:withExtension:subdirectory:inBundleWithURL:" = {
	    NSBundle = NSBundle;
	};
	"+URLFragmentAllowedCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+URLHandleClassForURL:" = {
	    NSURLHandle = NSURLHandle;
	};
	"+URLHostAllowedCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+URLPasswordAllowedCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+URLPathAllowedCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+URLQueryAllowedCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+URLUserAllowedCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+URLWithString:" = {
	    NSURL = NSURL;
	};
	"+URLWithString:relativeToURL:" = {
	    NSURL = NSURL;
	};
	"+_newProxyForInvocation:" = {
	    "NSInvocation(MacroSetup)" = NSInvocation;
	};
	"+_newProxyForMessage:" = {
	    "NSInvocation(MacroSetup)" = NSInvocation;
	};
	"+_returnInvocationAndDestroyProxy:" = {
	    "NSInvocation(MacroSetup)" = NSInvocation;
	};
	"+abbreviationDictionary" = {
	    NSTimeZone = NSTimeZone;
	};
	"+abbreviationMap" = {
	    NSTimeZone = NSTimeZone;
	};
	"+accessInstanceVariablesDirectly" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"+addObject:" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"+allBundles" = {
	    NSBundle = NSBundle;
	};
	"+allConnections" = {
	    NSConnection = NSConnection;
	};
	"+allFrameworks" = {
	    NSBundle = NSBundle;
	};
	"+alloc" = {
	    NSObject = NSObject;
	    NSProxy = NSProxy;
	};
	"+allocWithZone:" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	    NSObject = NSObject;
	    NSProxy = NSProxy;
	};
	"+allowsReverseTransformation" = {
	    NSValueTransformer = NSValueTransformer;
	};
	"+alphanumericCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+archiveRootObject:toFile:" = {
	    NSArchiver = NSArchiver;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"+archivedDataWithRootObject:" = {
	    NSArchiver = NSArchiver;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"+archivedDataWithRootObject:requiringSecureCoding:error:" = {
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"+array" = {
	    NSArray = NSArray;
	};
	"+arrayWithArray:" = {
	    NSArray = NSArray;
	};
	"+arrayWithCapacity:" = {
	    NSMutableArray = NSArray;
	};
	"+arrayWithContentsOfFile:" = {
	    NSArray = NSArray;
	};
	"+arrayWithContentsOfURL:" = {
	    NSArray = NSArray;
	};
	"+arrayWithObject:" = {
	    NSArray = NSArray;
	};
	"+arrayWithObjects:,..." = {
	    NSArray = NSArray;
	};
	"+arrayWithObjects:count:" = {
	    NSArray = NSArray;
	};
	"+assetDirForPath:" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"+assetForPath:" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"+assetForPath:withMode:" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"+assetManager" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"+attributeWithName:URI:stringValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+attributeWithName:stringValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+automaticallyNotifiesObserversForKey:" = {
	    "NSObject(NSKeyValueObservingCustomization)" = NSKeyValueObserving;
	};
	"+autorelease" = {
	    NSProxy = NSProxy;
	};
	"+autoreleaseCountForObject:" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"+availableStringEncodings" = {
	    NSString = NSString;
	};
	"+bundleForClass:" = {
	    NSBundle = NSBundle;
	};
	"+bundleForLibrary:" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"+bundleForLibrary:version:" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"+bundleWithIdentifier:" = {
	    NSBundle = NSBundle;
	};
	"+bundleWithPath:" = {
	    NSBundle = NSBundle;
	};
	"+bundleWithURL:" = {
	    NSBundle = NSBundle;
	};
	"+cachedHandleForURL:" = {
	    NSURLHandle = NSURLHandle;
	};
	"+calendarDate" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"+callStackReturnAddresses" = {
	    NSThread = NSThread;
	};
	"+callStackSymbols" = {
	    "NSThread(CallStackSymbols)" = NSThread;
	};
	"+canHandleRequest:" = {
	    NSURLConnection = NSURLConnection;
	};
	"+canInitWithRequest:" = {
	    "NSURLProtocol(Subclassing)" = NSURLProtocol;
	};
	"+canInitWithURL:" = {
	    NSURLHandle = NSURLHandle;
	};
	"+canResumeDownloadDecodedWithEncodingMIMEType:" = {
	    NSURLDownload = NSURLDownload;
	};
	"+cancelPreviousPerformRequestsWithTarget:" = {
	    "NSObject(TimedPerformers)" = NSObject;
	};
	"+cancelPreviousPerformRequestsWithTarget:selector:object:" = {
	    "NSObject(TimedPerformers)" = NSObject;
	};
	"+canonicalRequestForRequest:" = {
	    "NSURLProtocol(Subclassing)" = NSURLProtocol;
	};
	"+capitalizedLetterCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+characterSetWithBitmapRepresentation:" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+characterSetWithCharactersInString:" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+characterSetWithContentsOfFile:" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+characterSetWithRange:" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+class" = {
	    NSObject = NSObject;
	    NSProxy = NSProxy;
	};
	"+classDescriptionForClass:" = {
	    NSClassDescription = NSClassDescription;
	};
	"+classForClassName:" = {
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"+classForKeyedUnarchiver" = {
	    "NSObject(NSKeyedUnarchiverObjectSubstitution)" = NSKeyedArchiver;
	};
	"+classNameDecodedForArchiveClassName:" = {
	    NSUnarchiver = NSArchiver;
	};
	"+classNameForClass:" = {
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"+commentWithStringValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+componentsWithString:" = {
	    NSURLComponents = NSURL;
	};
	"+componentsWithURL:resolvingAgainstBaseURL:" = {
	    NSURLComponents = NSURL;
	};
	"+connectionWithReceivePort:sendPort:" = {
	    NSConnection = NSConnection;
	};
	"+connectionWithRegisteredName:host:" = {
	    NSConnection = NSConnection;
	};
	"+connectionWithRegisteredName:host:usingNameServer:" = {
	    NSConnection = NSConnection;
	};
	"+connectionWithRequest:delegate:" = {
	    NSURLConnection = NSURLConnection;
	};
	"+constantStringClass" = {
	    NSString = NSString;
	};
	"+controlCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+cookieWithProperties:" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"+cookiesWithResponseHeaderFields:forURL:" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"+credentialWithUser:password:persistence:" = {
	    NSURLCredential = NSURLCredential;
	};
	"+currentConversation" = {
	    NSConnection = NSConnection;
	};
	"+currentHandler" = {
	    NSAssertionHandler = NSException;
	};
	"+currentHost" = {
	    NSHost = NSHost;
	};
	"+currentPool" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"+currentRunLoop" = {
	    NSRunLoop = NSRunLoop;
	};
	"+currentThread" = {
	    NSThread = NSThread;
	};
	"+data" = {
	    NSData = NSData;
	};
	"+dataFromPropertyList:format:errorDescription:" = {
	    NSPropertyListSerialization = NSPropertyList;
	};
	"+dataFromTXTRecordDictionary:" = {
	    NSNetService = NSNetServices;
	};
	"+dataWithBytes:length:" = {
	    NSData = NSData;
	};
	"+dataWithBytesNoCopy:length:" = {
	    NSData = NSData;
	};
	"+dataWithBytesNoCopy:length:freeWhenDone:" = {
	    NSData = NSData;
	};
	"+dataWithCapacity:" = {
	    NSMutableData = NSData;
	};
	"+dataWithContentsOfFile:" = {
	    NSData = NSData;
	};
	"+dataWithContentsOfMappedFile:" = {
	    NSData = NSData;
	};
	"+dataWithContentsOfURL:" = {
	    NSData = NSData;
	};
	"+dataWithData:" = {
	    NSData = NSData;
	};
	"+dataWithLength:" = {
	    NSMutableData = NSData;
	};
	"+dataWithPropertyList:format:options:error:" = {
	    NSPropertyListSerialization = NSPropertyList;
	};
	"+dataWithSharedBytes:length:" = {
	    "NSData(GNUstepExtensions)" = NSData;
	};
	"+dataWithShmID:length:" = {
	    "NSData(GNUstepExtensions)" = NSData;
	};
	"+date" = {
	    NSDate = NSDate;
	};
	"+dateFormatFromTemplate:options:locale:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"+dateWithNaturalLanguageString:" = {
	    NSDate = NSDate;
	};
	"+dateWithNaturalLanguageString:locale:" = {
	    NSDate = NSDate;
	};
	"+dateWithString:" = {
	    NSDate = NSDate;
	};
	"+dateWithString:calendarFormat:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"+dateWithString:calendarFormat:locale:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"+dateWithTimeInterval:sinceDate:" = {
	    NSDate = NSDate;
	};
	"+dateWithTimeIntervalSince1970:" = {
	    NSDate = NSDate;
	};
	"+dateWithTimeIntervalSinceNow:" = {
	    NSDate = NSDate;
	};
	"+dateWithTimeIntervalSinceReferenceDate:" = {
	    NSDate = NSDate;
	};
	"+dateWithYear:month:day:hour:minute:second:timeZone:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"+decimalDigitCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"+decimalNumberWithDecimal:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+decimalNumberWithMantissa:exponent:isNegative:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+decimalNumberWithString:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+decimalNumberWithString:locale:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+decodeClassName:asClassName:" = {
	    NSUnarchiver = NSArchiver;
	};
	"+decomposableCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+defaultBehavior" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+defaultCStringEncoding" = {
	    NSString = NSString;
	};
	"+defaultCenter" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	    NSNotificationCenter = NSNotification;
	};
	"+defaultConnection" = {
	    NSConnection = NSConnection;
	};
	"+defaultDecimalNumberHandler" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"+defaultFormatterBehavior" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	};
	"+defaultManager" = {
	    NSFileManager = NSFileManager;
	};
	"+defaultQueue" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	"+defaultTimeZone" = {
	    NSTimeZone = NSTimeZone;
	};
	"+description" = {
	    NSProxy = NSProxy;
	};
	"+deserializePropertyListFromData:atCursor:mutableContainers:" = {
	    NSDeserializer = NSSerialization;
	};
	"+deserializePropertyListFromData:mutableContainers:" = {
	    NSDeserializer = NSSerialization;
	};
	"+deserializePropertyListLazilyFromData:atCursor:length:mutableContainers:" = {
	    NSDeserializer = NSSerialization;
	};
	"+detachNewThreadSelector:toTarget:withObject:" = {
	    NSThread = NSThread;
	};
	"+dictionary" = {
	    NSDictionary = NSDictionary;
	};
	"+dictionaryFromTXTRecordData:" = {
	    NSNetService = NSNetServices;
	};
	"+dictionaryWithCapacity:" = {
	    NSMutableDictionary = NSDictionary;
	};
	"+dictionaryWithContentsOfFile:" = {
	    NSDictionary = NSDictionary;
	};
	"+dictionaryWithContentsOfURL:" = {
	    NSDictionary = NSDictionary;
	};
	"+dictionaryWithDictionary:" = {
	    NSDictionary = NSDictionary;
	};
	"+dictionaryWithObject:forKey:" = {
	    NSDictionary = NSDictionary;
	};
	"+dictionaryWithObjects:forKeys:" = {
	    NSDictionary = NSDictionary;
	};
	"+dictionaryWithObjects:forKeys:count:" = {
	    NSDictionary = NSDictionary;
	};
	"+dictionaryWithObjectsAndKeys:,..." = {
	    NSDictionary = NSDictionary;
	};
	"+distantFuture" = {
	    NSDate = NSDate;
	};
	"+distantPast" = {
	    NSDate = NSDate;
	};
	"+document" = {
	    NSXMLNode = NSXMLNode;
	};
	"+documentWithRootElement:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+elementWithName:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+elementWithName:URI:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+elementWithName:children:attributes:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+elementWithName:stringValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+enableDoubleReleaseCheck:" = {
	    "NSObject(GNUstep)" = NSObject;
	};
	"+enableRelease:" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"+errorWithDomain:code:userInfo:" = {
	    NSError = NSError;
	};
	"+exceptionWithName:reason:userInfo:" = {
	    NSException = NSException;
	};
	"+existingPortWithNumber:onHost:" = {
	    NSSocketPort = NSPort;
	};
	"+exit" = {
	    NSThread = NSThread;
	};
	"+fileHandleAsClientAtAddress:service:protocol:" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"+fileHandleAsClientInBackgroundAtAddress:service:protocol:" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"+fileHandleAsClientInBackgroundAtAddress:service:protocol:forModes:" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"+fileHandleAsServerAtAddress:service:protocol:" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"+fileHandleForReadingAtPath:" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleForReadingFromURL:error:" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleForUpdatingAtPath:" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleForUpdatingURL:error:" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleForWritingAtPath:" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleForWritingToURL:error:" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleWithNullDevice" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleWithStandardError" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleWithStandardInput" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileHandleWithStandardOutput" = {
	    NSFileHandle = NSFileHandle;
	};
	"+fileURLWithPath:" = {
	    NSURL = NSURL;
	};
	"+fileURLWithPath:isDirectory:" = {
	    NSURL = NSURL;
	};
	"+fileURLWithPathComponents:" = {
	    NSURL = NSURL;
	};
	"+flushHostCache" = {
	    NSHost = NSHost;
	};
	"+freeCache" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"+getStreamsToHost:port:inputStream:outputStream:" = {
	    NSStream = NSStream;
	};
	"+hashTableWithOptions:" = {
	    NSHashTable = NSHashTable;
	};
	"+hashTableWithWeakObjects" = {
	    NSHashTable = NSHashTable;
	};
	"+hostWithAddress:" = {
	    NSHost = NSHost;
	};
	"+hostWithName:" = {
	    NSHost = NSHost;
	};
	"+illegalCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+indexPathWithIndex:" = {
	    NSIndexPath = NSIndexPath;
	};
	"+indexPathWithIndexes:length:" = {
	    NSIndexPath = NSIndexPath;
	};
	"+indexSet" = {
	    NSIndexSet = NSIndexSet;
	};
	"+indexSetWithIndex:" = {
	    NSIndexSet = NSIndexSet;
	};
	"+indexSetWithIndexesInRange:" = {
	    NSIndexSet = NSIndexSet;
	};
	"+initialize" = {
	    NSObject = NSObject;
	};
	"+initializeWithArguments:count:environment:" = {
	    "NSProcessInfo(GNUstep)" = NSProcessInfo;
	};
	"+inputStreamWithData:" = {
	    NSInputStream = NSStream;
	};
	"+inputStreamWithFileAtPath:" = {
	    NSInputStream = NSStream;
	};
	"+inputStreamWithURL:" = {
	    NSInputStream = NSStream;
	};
	"+instanceMethodForSelector:" = {
	    NSObject = NSObject;
	};
	"+instanceMethodSignatureForSelector:" = {
	    NSObject = NSObject;
	};
	"+instancesRespondToSelector:" = {
	    NSObject = NSObject;
	};
	"+invalidateClassDescriptionCache" = {
	    NSClassDescription = NSClassDescription;
	};
	"+invocationWithMethodSignature:" = {
	    NSInvocation = NSInvocation;
	};
	"+isHostCacheEnabled" = {
	    NSHost = NSHost;
	};
	"+isKindOfClass:" = {
	    NSProxy = NSProxy;
	};
	"+isMainThread" = {
	    NSThread = NSThread;
	};
	"+isMemberOfClass:" = {
	    NSProxy = NSProxy;
	};
	"+isMultiThreaded" = {
	    NSThread = NSThread;
	};
	"+isSubclassOfClass:" = {
	    NSObject = NSObject;
	};
	"+keyPathsForValuesAffectingValueForKey:" = {
	    "NSObject(NSKeyValueObservingCustomization)" = NSKeyValueObserving;
	};
	"+knownTimeZoneNames" = {
	    NSTimeZone = NSTimeZone;
	};
	"+launchedTaskWithLaunchPath:arguments:" = {
	    NSTask = NSTask;
	};
	"+letterCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+load" = {
	    NSObject = NSObject;
	    NSProxy = NSProxy;
	};
	"+localHost" = {
	    "NSHost(GNUstep)" = NSHost;
	};
	"+localNameForName:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+localTimeZone" = {
	    NSTimeZone = NSTimeZone;
	};
	"+localizedNameOfStringEncoding:" = {
	    NSString = NSString;
	};
	"+localizedScannerWithString:" = {
	    NSScanner = NSScanner;
	};
	"+localizedStringForStatusCode:" = {
	    NSHTTPURLResponse = NSURLResponse;
	};
	"+localizedStringFromDate:dateStyle:timeStyle:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"+localizedStringFromNumber:numberStyle:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"+localizedStringWithFormat:,..." = {
	    NSString = NSString;
	};
	"+lockWithPath:" = {
	    NSDistributedLock = NSDistributedLock;
	};
	"+lowercaseLetterCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+mainBundle" = {
	    NSBundle = NSBundle;
	};
	"+mainRunLoop" = {
	    NSRunLoop = NSRunLoop;
	};
	"+mainThread" = {
	    NSThread = NSThread;
	};
	"+mapTableWithKeyOptions:valueOptions:" = {
	    NSMapTable = NSMapTable;
	};
	"+mapTableWithStrongToStrongObjects" = {
	    NSMapTable = NSMapTable;
	};
	"+mapTableWithStrongToWeakObjects" = {
	    NSMapTable = NSMapTable;
	};
	"+mapTableWithWeakToStrongObjects" = {
	    NSMapTable = NSMapTable;
	};
	"+mapTableWithWeakToWeakObjects" = {
	    NSMapTable = NSMapTable;
	};
	"+maximumDecimalNumber" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+minimumDecimalNumber" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+namespaceWithName:stringValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+new" = {
	    NSObject = NSObject;
	};
	"+newlineCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+nonBaseCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+notANumber" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+notificationCenterForType:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"+notificationWithName:object:" = {
	    NSNotification = NSNotification;
	};
	"+notificationWithName:object:userInfo:" = {
	    NSNotification = NSNotification;
	};
	"+null" = {
	    NSNull = NSNull;
	};
	"+numberWithBool:" = {
	    NSNumber = NSValue;
	};
	"+numberWithChar:" = {
	    NSNumber = NSValue;
	};
	"+numberWithDouble:" = {
	    NSNumber = NSValue;
	};
	"+numberWithFloat:" = {
	    NSNumber = NSValue;
	};
	"+numberWithInt:" = {
	    NSNumber = NSValue;
	};
	"+numberWithInteger:" = {
	    NSNumber = NSValue;
	};
	"+numberWithLong:" = {
	    NSNumber = NSValue;
	};
	"+numberWithLongLong:" = {
	    NSNumber = NSValue;
	};
	"+numberWithShort:" = {
	    NSNumber = NSValue;
	};
	"+numberWithUnsignedChar:" = {
	    NSNumber = NSValue;
	};
	"+numberWithUnsignedInt:" = {
	    NSNumber = NSValue;
	};
	"+numberWithUnsignedInteger:" = {
	    NSNumber = NSValue;
	};
	"+numberWithUnsignedLong:" = {
	    NSNumber = NSValue;
	};
	"+numberWithUnsignedLongLong:" = {
	    NSNumber = NSValue;
	};
	"+numberWithUnsignedShort:" = {
	    NSNumber = NSValue;
	};
	"+one" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+outputStreamToBuffer:capacity:" = {
	    NSOutputStream = NSStream;
	};
	"+outputStreamToFileAtPath:append:" = {
	    NSOutputStream = NSStream;
	};
	"+outputStreamToMemory" = {
	    NSOutputStream = NSStream;
	};
	"+pathForLibraryResource:ofType:inDirectory:" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"+pathForResource:ofType:inDirectory:" = {
	    NSBundle = NSBundle;
	};
	"+pathForResource:ofType:inDirectory:withVersion:" = {
	    NSBundle = NSBundle;
	};
	"+pathWithComponents:" = {
	    NSString = NSString;
	};
	"+pathsForResourcesOfType:inDirectory:" = {
	    NSBundle = NSBundle;
	};
	"+pipe" = {
	    NSPipe = NSFileHandle;
	};
	"+pointerArrayWithOptions:" = {
	    NSPointerArray = NSPointerArray;
	};
	"+pointerArrayWithPointerFunctions:" = {
	    NSPointerArray = NSPointerArray;
	};
	"+pointerArrayWithStrongObjects" = {
	    "NSPointerArray(NSArrayConveniences)" = NSPointerArray;
	};
	"+pointerArrayWithWeakObjects" = {
	    "NSPointerArray(NSArrayConveniences)" = NSPointerArray;
	};
	"+pointerFunctionsWithOptions:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"+port" = {
	    NSPort = NSPort;
	};
	"+portCoderWithReceivePort:sendPort:components:" = {
	    NSPortCoder = NSPortCoder;
	};
	"+portWithMachPort:" = {
	    NSPort = NSPort;
	};
	"+portWithNumber:onHost:forceAddress:listener:" = {
	    NSSocketPort = NSPort;
	};
	"+poseAsClass:" = {
	    NSObject = NSObject;
	};
	"+predefinedEntityDeclarationForName:" = {
	    NSXMLDTD = NSXMLDTD;
	};
	"+predefinedNamespaceForPrefix:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+preferredLocalizationsFromArray:" = {
	    NSBundle = NSBundle;
	};
	"+preferredLocalizationsFromArray:forPreferences:" = {
	    NSBundle = NSBundle;
	};
	"+prefixForName:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+processInfo" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"+processingInstructionWithName:stringValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+propertyForKey:inRequest:" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"+propertyList:isValidForFormat:" = {
	    NSPropertyListSerialization = NSPropertyList;
	};
	"+propertyListFromData:mutabilityOption:format:errorDescription:" = {
	    NSPropertyListSerialization = NSPropertyList;
	};
	"+propertyListWithData:options:format:error:" = {
	    NSPropertyListSerialization = NSPropertyList;
	};
	"+propertyListWithStream:options:format:error:" = {
	    NSPropertyListSerialization = NSPropertyList;
	};
	"+protocolCheckerWithTarget:protocol:" = {
	    NSProtocolChecker = NSProtocolChecker;
	};
	"+proxyWithLocal:connection:" = {
	    NSDistantObject = NSDistantObject;
	};
	"+proxyWithTarget:connection:" = {
	    NSDistantObject = NSDistantObject;
	};
	"+punctuationCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+queryItemWithName:value:" = {
	    NSURLQueryItem = NSURL;
	};
	"+raise:format:,..." = {
	    NSException = NSException;
	};
	"+raise:format:arguments:" = {
	    NSException = NSException;
	};
	"+registerClass:" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"+registerClassDescription:forClass:" = {
	    NSClassDescription = NSClassDescription;
	};
	"+registerURLHandleClass:" = {
	    NSURLHandle = NSURLHandle;
	};
	"+release" = {
	    NSProxy = NSProxy;
	};
	"+replacementClassForClass:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"+requestHeaderFieldsWithCookies:" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"+requestIsCacheEquivalent:toRequest:" = {
	    "NSURLProtocol(Subclassing)" = NSURLProtocol;
	};
	"+requestWithURL:" = {
	    NSURLRequest = NSURLRequest;
	};
	"+requestWithURL:cachePolicy:timeoutInterval:" = {
	    NSURLRequest = NSURLRequest;
	};
	"+resetStandardUserDefaults" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"+resetSystemTimeZone" = {
	    NSTimeZone = NSTimeZone;
	};
	"+resolveClassMethod:" = {
	    NSObject = NSObject;
	};
	"+resolveInstanceMethod:" = {
	    NSObject = NSObject;
	};
	"+respondsToSelector:" = {
	    NSProxy = NSProxy;
	};
	"+retain" = {
	    NSProxy = NSProxy;
	};
	"+retainCount" = {
	    NSProxy = NSProxy;
	};
	"+rootProxyForConnectionWithRegisteredName:host:" = {
	    NSConnection = NSConnection;
	};
	"+rootProxyForConnectionWithRegisteredName:host:usingNameServer:" = {
	    NSConnection = NSConnection;
	};
	"+scannerWithString:" = {
	    NSScanner = NSScanner;
	};
	"+scheduledTimerWithTimeInterval:invocation:repeats:" = {
	    NSTimer = NSTimer;
	};
	"+scheduledTimerWithTimeInterval:repeats:block:" = {
	    NSTimer = NSTimer;
	};
	"+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:" = {
	    NSTimer = NSTimer;
	};
	"+sendSynchronousRequest:returningResponse:error:" = {
	    "NSURLConnection(NSURLConnectionSynchronousLoading)" = NSURLConnection;
	};
	"+serializePropertyList:" = {
	    NSSerializer = NSSerialization;
	};
	"+serializePropertyList:intoData:" = {
	    NSSerializer = NSSerialization;
	};
	"+serializePropertyList:intoData:compact:" = {
	    "NSSerializer(GNUstep)" = NSSerialization;
	};
	"+serviceConnectionWithName:rootObject:" = {
	    NSConnection = NSConnection;
	};
	"+serviceConnectionWithName:rootObject:usingNameServer:" = {
	    NSConnection = NSConnection;
	};
	"+set" = {
	    NSSet = NSSet;
	};
	"+setClass:forClassName:" = {
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"+setClassName:forClass:" = {
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"+setData:forTLSFile:" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"+setDefaultBehavior:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"+setDefaultFormatterBehavior:" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	};
	"+setDefaultTimeZone:" = {
	    NSTimeZone = NSTimeZone;
	};
	"+setHostCacheEnabled:" = {
	    NSHost = NSHost;
	};
	"+setJavaAssetManager:withJNIEnv:" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"+setKeys:triggerChangeNotificationsForDependentKey:" = {
	    "NSObject(NSKeyValueObservingCustomization)" = NSKeyValueObserving;
	};
	"+setPoolCountThreshold:" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"+setProperty:forKey:inRequest:" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"+setSharedURLCache:" = {
	    NSURLCache = NSURLCache;
	};
	"+setThreadPriority:" = {
	    NSThread = NSThread;
	};
	"+setUserLanguages:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"+setValueTransformer:forName:" = {
	    NSValueTransformer = NSValueTransformer;
	};
	"+setVersion:" = {
	    NSObject = NSObject;
	};
	"+setWithArray:" = {
	    NSSet = NSSet;
	};
	"+setWithCapacity:" = {
	    NSMutableSet = NSSet;
	};
	"+setWithObject:" = {
	    NSSet = NSSet;
	};
	"+setWithObjects:,..." = {
	    NSSet = NSSet;
	};
	"+setWithObjects:count:" = {
	    NSSet = NSSet;
	};
	"+setWithSet:" = {
	    NSSet = NSSet;
	};
	"+sharedCredentialStorage" = {
	    NSURLCredentialStorage = NSURLCredentialStorage;
	};
	"+sharedHTTPCookieStorage" = {
	    NSHTTPCookieStorage = NSHTTPCookieStorage;
	};
	"+sharedInstance" = {
	    NSMessagePortNameServer = NSPortNameServer;
	    NSSocketPortNameServer = NSPortNameServer;
	};
	"+sharedURLCache" = {
	    NSURLCache = NSURLCache;
	};
	"+shouldBeCompact:" = {
	    "NSSerializer(GNUstep)" = NSSerialization;
	};
	"+shouldCreateTraceableLocks:" = {
	    "NSObject(GSTraceLocks)" = NSLock;
	};
	"+signatureWithObjCTypes:" = {
	    NSMethodSignature = NSMethodSignature;
	};
	"+sleepForTimeInterval:" = {
	    NSThread = NSThread;
	};
	"+sleepUntilDate:" = {
	    NSThread = NSThread;
	};
	"+sslClass" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"+standardUserDefaults" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"+string" = {
	    NSMutableString = NSString;
	    NSString = NSString;
	};
	"+stringWithCString:" = {
	    NSMutableString = NSString;
	    NSString = NSString;
	};
	"+stringWithCString:encoding:" = {
	    NSString = NSString;
	};
	"+stringWithCString:length:" = {
	    NSMutableString = NSString;
	    NSString = NSString;
	};
	"+stringWithCapacity:" = {
	    NSMutableString = NSString;
	};
	"+stringWithCharacters:length:" = {
	    NSMutableString = NSString;
	    NSString = NSString;
	};
	"+stringWithContentsOfFile:" = {
	    NSMutableString = NSString;
	    NSString = NSString;
	};
	"+stringWithContentsOfFile:encoding:error:" = {
	    NSString = NSString;
	};
	"+stringWithContentsOfFile:usedEncoding:error:" = {
	    NSString = NSString;
	};
	"+stringWithContentsOfURL:" = {
	    NSString = NSString;
	};
	"+stringWithContentsOfURL:encoding:error:" = {
	    NSString = NSString;
	};
	"+stringWithContentsOfURL:usedEncoding:error:" = {
	    NSString = NSString;
	};
	"+stringWithFormat:,..." = {
	    NSMutableString = NSString;
	    NSString = NSString;
	};
	"+stringWithString:" = {
	    NSString = NSString;
	};
	"+stringWithUTF8String:" = {
	    NSString = NSString;
	};
	"+strongObjectsPointerArray" = {
	    NSPointerArray = NSPointerArray;
	};
	"+strongToStrongObjectsMapTable" = {
	    NSMapTable = NSMapTable;
	};
	"+strongToWeakObjectsMapTable" = {
	    NSMapTable = NSMapTable;
	};
	"+supportsSecureCoding" = {
	    "(NSSecureCoding)" = NSObject;
	};
	"+symbolCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+systemDefaultPortNameServer" = {
	    NSPortNameServer = NSPortNameServer;
	};
	"+systemTimeZone" = {
	    NSTimeZone = NSTimeZone;
	};
	"+textWithStringValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"+threadPriority" = {
	    NSThread = NSThread;
	};
	"+timeIntervalSinceReferenceDate" = {
	    NSDate = NSDate;
	};
	"+timeZoneArray" = {
	    NSTimeZone = NSTimeZone;
	};
	"+timeZoneForSecondsFromGMT:" = {
	    NSTimeZone = NSTimeZone;
	};
	"+timeZoneWithAbbreviation:" = {
	    NSTimeZone = NSTimeZone;
	};
	"+timeZoneWithName:" = {
	    NSTimeZone = NSTimeZone;
	};
	"+timeZoneWithName:data:" = {
	    NSTimeZone = NSTimeZone;
	};
	"+timerWithTimeInterval:invocation:repeats:" = {
	    NSTimer = NSTimer;
	};
	"+timerWithTimeInterval:repeats:block:" = {
	    NSTimer = NSTimer;
	};
	"+timerWithTimeInterval:target:selector:userInfo:repeats:" = {
	    NSTimer = NSTimer;
	};
	"+tracedCondition" = {
	    "NSObject(GSTraceLocks)" = NSLock;
	};
	"+tracedConditionLockWithCondition:" = {
	    "NSObject(GSTraceLocks)" = NSLock;
	};
	"+tracedLock" = {
	    "NSObject(GSTraceLocks)" = NSLock;
	};
	"+tracedRecursiveLock" = {
	    "NSObject(GSTraceLocks)" = NSLock;
	};
	"+transform" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"+transformedValueClass" = {
	    NSValueTransformer = NSValueTransformer;
	};
	"+unarchiveObjectWithData:" = {
	    NSKeyedUnarchiver = NSKeyedArchiver;
	    NSUnarchiver = NSArchiver;
	};
	"+unarchiveObjectWithFile:" = {
	    NSKeyedUnarchiver = NSKeyedArchiver;
	    NSUnarchiver = NSArchiver;
	};
	"+uniquing:" = {
	    "NSDeserializer(GNUstep)" = NSSerialization;
	};
	"+unregisterClass:" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"+uppercaseLetterCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+useStoredAccessor" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"+userLanguages" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"+value:withObjCType:" = {
	    NSValue = NSValue;
	};
	"+valueClassWithObjCType:" = {
	    "NSValue(Subclassing)" = NSValue;
	};
	"+valueTransformerForName:" = {
	    NSValueTransformer = NSValueTransformer;
	};
	"+valueTransformerNames" = {
	    NSValueTransformer = NSValueTransformer;
	};
	"+valueWithBytes:objCType:" = {
	    NSValue = NSValue;
	};
	"+valueWithNonretainedObject:" = {
	    NSValue = NSValue;
	};
	"+valueWithPoint:" = {
	    NSValue = NSValue;
	};
	"+valueWithPointer:" = {
	    NSValue = NSValue;
	};
	"+valueWithRange:" = {
	    NSValue = NSValue;
	};
	"+valueWithRect:" = {
	    NSValue = NSValue;
	};
	"+valueWithSize:" = {
	    NSValue = NSValue;
	};
	"+version" = {
	    NSObject = NSObject;
	};
	"+weakObjectsHashTable" = {
	    NSHashTable = NSHashTable;
	};
	"+weakObjectsPointerArray" = {
	    NSPointerArray = NSPointerArray;
	};
	"+weakToStrongObjectsMapTable" = {
	    NSMapTable = NSMapTable;
	};
	"+weakToWeakObjectsMapTable" = {
	    NSMapTable = NSMapTable;
	};
	"+whitespaceAndNewlineCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+whitespaceCharacterSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"+writePropertyList:toStream:format:options:error:" = {
	    NSPropertyListSerialization = NSPropertyList;
	};
	"+zero" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-AMSymbol" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-DTD" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-DTDKind" = {
	    NSXMLDTDNode = NSXMLDTDNode;
	};
	"-HTTPBody" = {
	    "NSURLRequest(NSHTTPURLRequest)" = NSURLRequest;
	};
	"-HTTPBodyStream" = {
	    "NSURLRequest(NSHTTPURLRequest)" = NSURLRequest;
	};
	"-HTTPMethod" = {
	    "NSURLRequest(NSHTTPURLRequest)" = NSURLRequest;
	};
	"-HTTPShouldHandleCookies" = {
	    "NSURLRequest(NSHTTPURLRequest)" = NSURLRequest;
	};
	"-MIMEType" = {
	    NSURLResponse = NSURLResponse;
	    NSXMLDocument = NSXMLDocument;
	};
	"-PMSymbol" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-TXTRecordData" = {
	    NSNetService = NSNetServices;
	};
	"-URI" = {
	    NSXMLNode = NSXMLNode;
	};
	"-URL" = {
	    NSURLComponents = NSURL;
	    NSURLRequest = NSURLRequest;
	    NSURLResponse = NSURLResponse;
	};
	"-URL:resourceDataDidBecomeAvailable:" = {
	    "NSObject(NSURLClient)" = NSURL;
	};
	"-URL:resourceDidFailLoadingWithReason:" = {
	    "NSObject(NSURLClient)" = NSURL;
	};
	"-URLByAppendingPathComponent:" = {
	    NSURL = NSURL;
	};
	"-URLByAppendingPathComponent:isDirectory:" = {
	    NSURL = NSURL;
	};
	"-URLByAppendingPathExtension:" = {
	    NSURL = NSURL;
	};
	"-URLByDeletingLastPathComponent" = {
	    NSURL = NSURL;
	};
	"-URLByDeletingPathExtension" = {
	    NSURL = NSURL;
	};
	"-URLByResolvingSymlinksInPath" = {
	    NSURL = NSURL;
	};
	"-URLByStandardizingPath" = {
	    NSURL = NSURL;
	};
	"-URLForAuxiliaryExecutable:" = {
	    NSBundle = NSBundle;
	};
	"-URLForDirectory:inDomain:appropriateForURL:create:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-URLForResource:withExtension:" = {
	    NSBundle = NSBundle;
	};
	"-URLForResource:withExtension:subdirectory:" = {
	    NSBundle = NSBundle;
	};
	"-URLForResource:withExtension:subdirectory:localization:" = {
	    NSBundle = NSBundle;
	};
	"-URLHandle:resourceDataDidBecomeAvailable:" = {
	    "(NSURLHandleClient)" = NSURLHandle;
	};
	"-URLHandle:resourceDidFailLoadingWithReason:" = {
	    "(NSURLHandleClient)" = NSURLHandle;
	};
	"-URLHandleResourceDidBeginLoading:" = {
	    "(NSURLHandleClient)" = NSURLHandle;
	};
	"-URLHandleResourceDidCancelLoading:" = {
	    "(NSURLHandleClient)" = NSURLHandle;
	};
	"-URLHandleResourceDidFinishLoading:" = {
	    "(NSURLHandleClient)" = NSURLHandle;
	};
	"-URLHandleUsingCache:" = {
	    NSURL = NSURL;
	};
	"-URLProtocol:cachedResponseIsValid:" = {
	    "(NSURLProtocolClient)" = NSURLProtocol;
	};
	"-URLProtocol:didCancelAuthenticationChallenge:" = {
	    "(NSURLProtocolClient)" = NSURLProtocol;
	};
	"-URLProtocol:didFailWithError:" = {
	    "(NSURLProtocolClient)" = NSURLProtocol;
	};
	"-URLProtocol:didLoadData:" = {
	    "(NSURLProtocolClient)" = NSURLProtocol;
	};
	"-URLProtocol:didReceiveAuthenticationChallenge:" = {
	    "(NSURLProtocolClient)" = NSURLProtocol;
	};
	"-URLProtocol:didReceiveResponse:cacheStoragePolicy:" = {
	    "(NSURLProtocolClient)" = NSURLProtocol;
	};
	"-URLProtocol:wasRedirectedToRequest:redirectResponse:" = {
	    "(NSURLProtocolClient)" = NSURLProtocol;
	};
	"-URLProtocolDidFinishLoading:" = {
	    "(NSURLProtocolClient)" = NSURLProtocol;
	};
	"-URLRelativeToURL:" = {
	    NSURLComponents = NSURL;
	};
	"-URLResourceDidCancelLoading:" = {
	    "NSObject(NSURLClient)" = NSURL;
	};
	"-URLResourceDidFinishLoading:" = {
	    "NSObject(NSURLClient)" = NSURL;
	};
	"-UTF8String" = {
	    NSString = NSString;
	};
	"-XMLData" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-XMLDataWithOptions:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-XMLString" = {
	    NSXMLNode = NSXMLNode;
	};
	"-XMLStringWithOptions:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-XPath" = {
	    NSXMLNode = NSXMLNode;
	};
	"-_baseLength" = {
	    NSString = NSString;
	};
	"-_decodeArrayOfObjectsForKey:" = {
	    "NSKeyedUnarchiver(Internal)" = NSKeyedArchiver;
	};
	"-_decodePropertyListForKey:" = {
	    "NSKeyedUnarchiver(Internal)" = NSKeyedArchiver;
	};
	"-_encodeArrayOfObjects:forKey:" = {
	    "NSKeyedArchiver(Internal)" = NSKeyedArchiver;
	};
	"-_encodePropertyList:forKey:" = {
	    "NSKeyedArchiver(Internal)" = NSKeyedArchiver;
	};
	"-abbreviation" = {
	    NSTimeZone = NSTimeZone;
	};
	"-abbreviationForDate:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-abortParsing" = {
	    NSXMLParser = NSXMLParser;
	};
	"-absoluteGregorianDay:month:year:" = {
	    "NSCalendarDate(GregorianDate)" = NSCalendarDate;
	};
	"-absoluteString" = {
	    NSURL = NSURL;
	};
	"-absoluteURL" = {
	    NSURL = NSURL;
	};
	"-acceptConnectionInBackgroundAndNotify" = {
	    NSFileHandle = NSFileHandle;
	};
	"-acceptConnectionInBackgroundAndNotifyForModes:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-acceptInputForMode:beforeDate:" = {
	    NSRunLoop = NSRunLoop;
	};
	"-acquireFunction" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-activeProcessorCount" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-addAttribute:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-addAttribute:value:range:" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-addAttributes:range:" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-addCharactersInRange:" = {
	    NSMutableCharacterSet = NSCharacterSet;
	};
	"-addCharactersInString:" = {
	    NSMutableCharacterSet = NSCharacterSet;
	};
	"-addChild:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDocument = NSXMLDocument;
	    NSXMLElement = NSXMLElement;
	};
	"-addClient:" = {
	    NSURLHandle = NSURLHandle;
	};
	"-addConnection:toRunLoop:forMode:" = {
	    NSPort = NSPort;
	};
	"-addEntriesFromDictionary:" = {
	    NSMutableDictionary = NSDictionary;
	};
	"-addEvent:type:watcher:forMode:" = {
	    "NSRunLoop(GNUstepExtensions)" = NSRunLoop;
	};
	"-addIndex:" = {
	    NSMutableIndexSet = NSIndexSet;
	};
	"-addIndexes:" = {
	    NSMutableIndexSet = NSIndexSet;
	};
	"-addIndexesInRange:" = {
	    NSMutableIndexSet = NSIndexSet;
	};
	"-addNamespace:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-addObject:" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	    NSHashTable = NSHashTable;
	    NSMutableArray = NSArray;
	    NSMutableSet = NSSet;
	};
	"-addObjectsFromArray:" = {
	    NSMutableArray = NSArray;
	    NSMutableSet = NSSet;
	};
	"-addObserver:forKeyPath:options:context:" = {
	    "NSObject(NSKeyValueObserverRegistration)" = NSKeyValueObserving;
	};
	"-addObserver:selector:name:object:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	    NSNotificationCenter = NSNotification;
	};
	"-addObserver:selector:name:object:suspensionBehavior:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"-addObserver:toObjectsAtIndexes:forKeyPath:options:context:" = {
	    "NSArray(NSKeyValueObserverRegistration)" = NSKeyValueObserving;
	};
	"-addObserverForName:object:queue:usingBlock:" = {
	    NSNotificationCenter = NSNotification;
	};
	"-addPointer:" = {
	    NSPointerArray = NSPointerArray;
	};
	"-addPort:forMode:" = {
	    "NSRunLoop(OPENSTEP)" = NSRunLoop;
	};
	"-addRequestMode:" = {
	    NSConnection = NSConnection;
	};
	"-addRunLoop:" = {
	    NSConnection = NSConnection;
	};
	"-addSuiteNamed:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-addTimeInterval:" = {
	    NSDate = NSDate;
	};
	"-addTimer:forMode:" = {
	    NSRunLoop = NSRunLoop;
	};
	"-addValue:forHTTPHeaderField:" = {
	    "NSMutableURLRequest(NSMutableHTTPURLRequest)" = NSURLRequest;
	};
	"-addYear:month:day:hour:minute:second:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-address" = {
	    NSHost = NSHost;
	    NSSocketPort = NSPort;
	};
	"-addresses" = {
	    NSHost = NSHost;
	    NSNetService = NSNetServices;
	};
	"-allCredentials" = {
	    NSURLCredentialStorage = NSURLCredentialStorage;
	};
	"-allHTTPHeaderFields" = {
	    "NSURLRequest(NSHTTPURLRequest)" = NSURLRequest;
	};
	"-allHeaderFields" = {
	    NSHTTPURLResponse = NSURLResponse;
	};
	"-allKeys" = {
	    NSDictionary = NSDictionary;
	};
	"-allKeysForObject:" = {
	    NSDictionary = NSDictionary;
	};
	"-allObjects" = {
	    NSEnumerator = NSEnumerator;
	    NSHashTable = NSHashTable;
	    "NSPointerArray(NSArrayConveniences)" = NSPointerArray;
	    NSSet = NSSet;
	};
	"-allValues" = {
	    NSDictionary = NSDictionary;
	};
	"-allowsFloats" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-allowsKeyedCoding" = {
	    NSCoder = NSCoder;
	};
	"-allowsNaturalLanguage" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-alwaysShowsDecimalSeparator" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-androidCacheDir" = {
	    "NSProcessInfo(GNUstep)" = NSProcessInfo;
	};
	"-androidContext" = {
	    "NSProcessInfo(GNUstep)" = NSProcessInfo;
	};
	"-androidFilesDir" = {
	    "NSProcessInfo(GNUstep)" = NSProcessInfo;
	};
	"-anyObject" = {
	    NSHashTable = NSHashTable;
	    NSSet = NSSet;
	};
	"-appendAttributedString:" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-appendBytes:length:" = {
	    NSMutableData = NSData;
	};
	"-appendData:" = {
	    NSMutableData = NSData;
	};
	"-appendFormat:,..." = {
	    NSMutableString = NSString;
	};
	"-appendString:" = {
	    NSMutableString = NSString;
	};
	"-appendTransform:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-archiver:didEncodeObject:" = {
	    "NSObject(NSKeyedArchiverDelegate)" = NSKeyedArchiver;
	};
	"-archiver:willEncodeObject:" = {
	    "NSObject(NSKeyedArchiverDelegate)" = NSKeyedArchiver;
	};
	"-archiver:willReplaceObject:withObject:" = {
	    "NSObject(NSKeyedArchiverDelegate)" = NSKeyedArchiver;
	};
	"-archiverData" = {
	    NSArchiver = NSArchiver;
	};
	"-archiverDidFinish:" = {
	    "NSObject(NSKeyedArchiverDelegate)" = NSKeyedArchiver;
	};
	"-archiverWillFinish:" = {
	    "NSObject(NSKeyedArchiverDelegate)" = NSKeyedArchiver;
	};
	"-arguments" = {
	    NSProcessInfo = NSProcessInfo;
	    NSTask = NSTask;
	};
	"-argumentsRetained" = {
	    NSInvocation = NSInvocation;
	};
	"-arrayByAddingObject:" = {
	    NSArray = NSArray;
	};
	"-arrayByAddingObjectsFromArray:" = {
	    NSArray = NSArray;
	};
	"-arrayForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-attribute:atIndex:effectiveRange:" = {
	    NSAttributedString = NSAttributedString;
	};
	"-attribute:atIndex:longestEffectiveRange:inRange:" = {
	    NSAttributedString = NSAttributedString;
	};
	"-attributeDeclarationForName:elementName:" = {
	    NSXMLDTD = NSXMLDTD;
	};
	"-attributeForLocalName:URI:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-attributeForName:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-attributeKeys" = {
	    NSClassDescription = NSClassDescription;
	    "NSObject(NSClassDescriptionPrimitives)" = NSClassDescription;
	};
	"-attributedStringForNil" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-attributedStringForNotANumber" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-attributedStringForObjectValue:withDefaultAttributes:" = {
	    NSFormatter = NSFormatter;
	};
	"-attributedStringForZero" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-attributedSubstringFromRange:" = {
	    NSAttributedString = NSAttributedString;
	};
	"-attributes" = {
	    NSXMLElement = NSXMLElement;
	};
	"-attributesAtIndex:effectiveRange:" = {
	    NSAttributedString = NSAttributedString;
	};
	"-attributesAtIndex:longestEffectiveRange:inRange:" = {
	    NSAttributedString = NSAttributedString;
	};
	"-attributesOfFileSystemForPath:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-attributesOfItemAtPath:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-authenticateComponents:withData:" = {
	    "NSObject(NSConnectionDelegate)" = NSConnection;
	};
	"-authenticationDataForComponents:" = {
	    "NSObject(NSConnectionDelegate)" = NSConnection;
	};
	"-authenticationMethod" = {
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-autoContentAccessingProxy" = {
	    NSObject = NSObject;
	};
	"-autorelease" = {
	    "(NSObject)" = NSObject;
	    NSAutoreleasePool = NSAutoreleasePool;
	    NSProxy = NSProxy;
	};
	"-autoreleaseCount" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"-availableData" = {
	    NSFileHandle = NSFileHandle;
	};
	"-availableResourceData" = {
	    NSURLHandle = NSURLHandle;
	};
	"-awakeAfterUsingCoder:" = {
	    NSObject = NSObject;
	};
	"-backgroundLoadDidFailWithReason:" = {
	    NSURLHandle = NSURLHandle;
	};
	"-base64EncodedDataWithOptions:" = {
	    NSData = NSData;
	};
	"-base64EncodedStringWithOptions:" = {
	    NSData = NSData;
	};
	"-baseURL" = {
	    NSURL = NSURL;
	};
	"-beginActivityWithOptions:reason:" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-beginContentAccess" = {
	    "(NSDiscardableContent)" = NSObject;
	};
	"-beginEditing" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-beginLoadInBackground" = {
	    NSURLHandle = NSURLHandle;
	};
	"-beginUndoGrouping" = {
	    NSUndoManager = NSUndoManager;
	};
	"-bitmapRepresentation" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"-boolForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-boolValue" = {
	    NSNumber = NSValue;
	    NSString = NSString;
	};
	"-breakLock" = {
	    NSDistributedLock = NSDistributedLock;
	};
	"-broadcast" = {
	    NSCondition = NSLock;
	};
	"-builtInPlugInsPath" = {
	    NSBundle = NSBundle;
	};
	"-builtInPlugInsURL" = {
	    NSBundle = NSBundle;
	};
	"-bundleIdentifier" = {
	    NSBundle = NSBundle;
	};
	"-bundlePath" = {
	    NSBundle = NSBundle;
	};
	"-bundleURL" = {
	    NSBundle = NSBundle;
	};
	"-bundleVersion" = {
	    NSBundle = NSBundle;
	};
	"-bytes" = {
	    NSData = NSData;
	};
	"-cString" = {
	    NSString = NSString;
	};
	"-cStringLength" = {
	    NSString = NSString;
	};
	"-cStringUsingEncoding:" = {
	    NSString = NSString;
	};
	"-cachePolicy" = {
	    NSURLRequest = NSURLRequest;
	};
	"-cachedResponse" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"-cachedResponseForDataTask:" = {
	    "NSURLCache(NSURLSessionTaskAdditions)" = NSURLCache;
	};
	"-cachedResponseForRequest:" = {
	    NSURLCache = NSURLCache;
	};
	"-calendar" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-calendarFormat" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-callStackReturnAddresses" = {
	    NSException = NSException;
	};
	"-callStackSymbols" = {
	    NSException = NSException;
	};
	"-canBeConvertedToEncoding:" = {
	    NSString = NSString;
	};
	"-canRedo" = {
	    NSUndoManager = NSUndoManager;
	};
	"-canUndo" = {
	    NSUndoManager = NSUndoManager;
	};
	"-cancel" = {
	    NSThread = NSThread;
	    NSURLConnection = NSURLConnection;
	    NSURLDownload = NSURLDownload;
	};
	"-cancelAuthenticationChallenge:" = {
	    "(NSURLAuthenticationChallengeSender)" = NSURLAuthenticationChallenge;
	};
	"-cancelLoadInBackground" = {
	    NSURLHandle = NSURLHandle;
	};
	"-cancelPerformSelector:target:argument:" = {
	    "NSRunLoop(OPENSTEP)" = NSRunLoop;
	};
	"-cancelPerformSelectorsWithTarget:" = {
	    "NSRunLoop(OPENSTEP)" = NSRunLoop;
	};
	"-canonicalXMLStringPreservingComments:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-capacity" = {
	    "NSMutableData(GNUstepExtensions)" = NSData;
	};
	"-capitalizedString" = {
	    NSString = NSString;
	};
	"-caseInsensitiveCompare:" = {
	    NSString = NSString;
	};
	"-caseSensitive" = {
	    NSScanner = NSScanner;
	};
	"-changeCurrentDirectoryPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-changeFileAttributes:atPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-charValue" = {
	    NSNumber = NSValue;
	};
	"-characterAtIndex:" = {
	    NSString = NSString;
	};
	"-characterEncoding" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-characterIsMember:" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"-charactersToBeSkipped" = {
	    NSScanner = NSScanner;
	};
	"-checkResourceIsReachableAndReturnError:" = {
	    NSURL = NSURL;
	};
	"-childAtIndex:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-childCount" = {
	    NSXMLNode = NSXMLNode;
	};
	"-children" = {
	    NSXMLNode = NSXMLNode;
	};
	"-class" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	};
	"-classDescription" = {
	    "NSObject(NSClassDescriptionPrimitives)" = NSClassDescription;
	};
	"-classForArchiver" = {
	    NSObject = NSObject;
	};
	"-classForClassName:" = {
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-classForCoder" = {
	    NSObject = NSObject;
	};
	"-classForKeyedArchiver" = {
	    "NSObject(NSKeyedArchiverObjectSubstitution)" = NSKeyedArchiver;
	};
	"-classForPortCoder" = {
	    "NSObject(NSPortCoder)" = NSPortCoder;
	};
	"-className" = {
	    NSObject = NSObject;
	};
	"-classNameDecodedForArchiveClassName:" = {
	    NSUnarchiver = NSArchiver;
	};
	"-classNameEncodedForTrueClassName:" = {
	    NSArchiver = NSArchiver;
	};
	"-classNameForClass:" = {
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-classNamed:" = {
	    NSBundle = NSBundle;
	};
	"-cleanPathCache" = {
	    "NSBundle(GNUstep)" = NSBundle;
	};
	"-client" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"-close" = {
	    NSStream = NSStream;
	};
	"-closeFile" = {
	    NSFileHandle = NSFileHandle;
	};
	"-code" = {
	    NSError = NSError;
	};
	"-columnNumber" = {
	    "NSXMLParser(NSXMLParserLocatorAdditions)" = NSXMLParser;
	};
	"-comment" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-commentURL" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-commonPrefixWithString:options:" = {
	    NSString = NSString;
	};
	"-compact" = {
	    NSPointerArray = NSPointerArray;
	};
	"-compare:" = {
	    NSDate = NSDate;
	    NSDecimalNumber = NSDecimalNumber;
	    NSIndexPath = NSIndexPath;
	    NSNumber = NSValue;
	    NSString = NSString;
	};
	"-compare:options:" = {
	    NSString = NSString;
	};
	"-compare:options:range:" = {
	    NSString = NSString;
	};
	"-compare:options:range:locale:" = {
	    NSString = NSString;
	};
	"-completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:" = {
	    NSString = NSString;
	};
	"-components" = {
	    NSPortMessage = NSPortMessage;
	};
	"-componentsJoinedByString:" = {
	    NSArray = NSArray;
	};
	"-componentsSeparatedByCharactersInSet:" = {
	    NSString = NSString;
	};
	"-componentsSeparatedByString:" = {
	    NSString = NSString;
	};
	"-componentsToDisplayForPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-condition" = {
	    NSConditionLock = NSLock;
	};
	"-configureAsServer" = {
	    "NSRunLoop(OPENSTEP)" = NSRunLoop;
	};
	"-conformsToProtocol:" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	};
	"-connection" = {
	    NSPortCoder = NSPortCoder;
	};
	"-connection:didConnect:" = {
	    "NSObject(NSConnectionDelegate)" = NSConnection;
	};
	"-connection:didFailWithError:" = {
	    "NSObject(NSURLConnectionDelegate)" = NSURLConnection;
	};
	"-connection:didReceiveAuthenticationChallenge:" = {
	    "NSObject(NSURLConnectionDelegate)" = NSURLConnection;
	};
	"-connection:didReceiveData:" = {
	    "NSObject(NSURLConnectionDelegate)" = NSURLConnection;
	};
	"-connection:didReceiveResponse:" = {
	    "NSObject(NSURLConnectionDelegate)" = NSURLConnection;
	};
	"-connection:shouldMakeNewConnection:" = {
	    "NSObject(NSConnectionDelegate)" = NSConnection;
	};
	"-connection:willCacheResponse:" = {
	    "NSObject(NSURLConnectionDelegate)" = NSURLConnection;
	};
	"-connection:willSendRequest:redirectResponse:" = {
	    "NSObject(NSURLConnectionDelegate)" = NSURLConnection;
	};
	"-connectionDidFinishLoading:" = {
	    "NSObject(NSURLConnectionDelegate)" = NSURLConnection;
	};
	"-connectionForProxy" = {
	    NSDistantObject = NSDistantObject;
	};
	"-containsIndex:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-containsIndexes:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-containsIndexesInRange:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-containsObject:" = {
	    NSArray = NSArray;
	    NSHashTable = NSHashTable;
	    NSSet = NSSet;
	};
	"-containsString:" = {
	    NSString = NSString;
	};
	"-containsValueForKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-contentsAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-contentsEqualAtPath:andPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-contentsOfDirectoryAtPath:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-continueWithoutCredentialForAuthenticationChallenge:" = {
	    "(NSURLAuthenticationChallengeSender)" = NSURLAuthenticationChallenge;
	};
	"-cookieAcceptPolicy" = {
	    NSHTTPCookieStorage = NSHTTPCookieStorage;
	};
	"-cookies" = {
	    NSHTTPCookieStorage = NSHTTPCookieStorage;
	};
	"-cookiesForURL:" = {
	    NSHTTPCookieStorage = NSHTTPCookieStorage;
	};
	"-copy" = {
	    NSObject = NSObject;
	};
	"-copyItemAtPath:toPath:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-copyItemAtURL:toURL:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-copyPath:toPath:handler:" = {
	    NSFileManager = NSFileManager;
	};
	"-copyWithZone:" = {
	    "(NSCopying)" = NSObject;
	};
	"-count" = {
	    NSArray = NSArray;
	    NSDictionary = NSDictionary;
	    NSHashTable = NSHashTable;
	    NSIndexSet = NSIndexSet;
	    NSMapTable = NSMapTable;
	    NSPointerArray = NSPointerArray;
	    NSSet = NSSet;
	};
	"-countByEnumeratingWithState:objects:count:" = {
	    "(NSFastEnumeration)" = NSEnumerator;
	};
	"-countForObject:" = {
	    NSCountedSet = NSSet;
	};
	"-countOfIndexesInRange:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-createDirectoryAtPath:attributes:" = {
	    NSFileManager = NSFileManager;
	};
	"-createDirectoryAtPath:withIntermediateDirectories:attributes:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-createDirectoryAtURL:withIntermediateDirectories:attributes:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-createFileAtPath:contents:attributes:" = {
	    NSFileManager = NSFileManager;
	};
	"-createSymbolicLinkAtPath:pathContent:" = {
	    NSFileManager = NSFileManager;
	};
	"-createSymbolicLinkAtPath:withDestinationPath:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-credentialsForProtectionSpace:" = {
	    NSURLCredentialStorage = NSURLCredentialStorage;
	};
	"-currencyCode" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-currencyDecimalSeparator" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-currencyGroupingSeparator" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-currencySymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-currentDirectoryPath" = {
	    NSFileManager = NSFileManager;
	    NSTask = NSTask;
	};
	"-currentDiskUsage" = {
	    NSURLCache = NSURLCache;
	};
	"-currentMemoryUsage" = {
	    NSURLCache = NSURLCache;
	};
	"-currentMode" = {
	    NSRunLoop = NSRunLoop;
	};
	"-cursor" = {
	    "NSUnarchiver(GNUstep)" = NSArchiver;
	};
	"-data" = {
	    NSCachedURLResponse = NSURLCache;
	    NSTimeZone = NSTimeZone;
	};
	"-dataForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-dataUsingEncoding:" = {
	    NSString = NSString;
	};
	"-dataUsingEncoding:allowLossyConversion:" = {
	    NSString = NSString;
	};
	"-dateByAddingTimeInterval:" = {
	    NSDate = NSDate;
	};
	"-dateByAddingYears:months:days:hours:minutes:seconds:" = {
	    "NSCalendarDate(OPENSTEP)" = NSCalendarDate;
	};
	"-dateFormat" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-dateFromString:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-dateStyle" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-dateWithCalendarFormat:timeZone:" = {
	    NSDate = NSDate;
	};
	"-dayOfCommonEra" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-dayOfMonth" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-dayOfWeek" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-dayOfYear" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-daylightSavingTimeOffset" = {
	    NSTimeZone = NSTimeZone;
	};
	"-daylightSavingTimeOffsetForDate:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-dealloc" = {
	    NSObject = NSObject;
	    NSProxy = NSProxy;
	};
	"-decimalNumberByAdding:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByAdding:withBehavior:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByDividingBy:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByDividingBy:withBehavior:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByMultiplyingBy:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByMultiplyingBy:withBehavior:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByMultiplyingByPowerOf10:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByMultiplyingByPowerOf10:withBehavior:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByRaisingToPower:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByRaisingToPower:withBehavior:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberByRoundingAccordingToBehavior:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberBySubtracting:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalNumberBySubtracting:withBehavior:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-decimalSeparator" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-decimalValue" = {
	    NSDecimalNumber = NSDecimalNumber;
	    "NSNumber(NSDecimalNumber)" = NSDecimalNumber;
	};
	"-decodeArrayOfObjCType:count:at:" = {
	    NSCoder = NSCoder;
	};
	"-decodeBoolForKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-decodeBytesForKey:returnedLength:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-decodeBytesWithReturnedLength:" = {
	    NSCoder = NSCoder;
	};
	"-decodeClassName:asClassName:" = {
	    NSUnarchiver = NSArchiver;
	};
	"-decodeDataObject" = {
	    NSCoder = NSCoder;
	};
	"-decodeDoubleForKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-decodeFloatForKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-decodeInt32ForKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-decodeInt64ForKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-decodeIntForKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-decodeIntegerForKey:" = {
	    NSCoder = NSCoder;
	};
	"-decodeObject" = {
	    NSCoder = NSCoder;
	};
	"-decodeObjectForKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-decodeObjectOfClass:forKey:" = {
	    NSCoder = NSCoder;
	};
	"-decodeObjectOfClasses:forKey:" = {
	    NSCoder = NSCoder;
	};
	"-decodePoint" = {
	    NSCoder = NSCoder;
	};
	"-decodePointForKey:" = {
	    "NSCoder(NSGeometryKeyedCoding)" = NSKeyedArchiver;
	};
	"-decodePortObject" = {
	    NSPortCoder = NSPortCoder;
	};
	"-decodePropertyList" = {
	    NSCoder = NSCoder;
	};
	"-decodeRect" = {
	    NSCoder = NSCoder;
	};
	"-decodeRectForKey:" = {
	    "NSCoder(NSGeometryKeyedCoding)" = NSKeyedArchiver;
	};
	"-decodeSize" = {
	    NSCoder = NSCoder;
	};
	"-decodeSizeForKey:" = {
	    "NSCoder(NSGeometryKeyedCoding)" = NSKeyedArchiver;
	};
	"-decodeValueOfObjCType:at:" = {
	    NSCoder = NSCoder;
	};
	"-decodeValuesOfObjCTypes:,..." = {
	    NSCoder = NSCoder;
	};
	"-decomposedStringWithCanonicalMapping" = {
	    NSString = NSString;
	};
	"-decomposedStringWithCompatibilityMapping" = {
	    NSString = NSString;
	};
	"-defaultCredentialForProtectionSpace:" = {
	    NSURLCredentialStorage = NSURLCredentialStorage;
	};
	"-defaultDate" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-delegate" = {
	    NSConnection = NSConnection;
	    NSFileManager = NSFileManager;
	    NSKeyedArchiver = NSKeyedArchiver;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	    NSNetService = NSNetServices;
	    NSNetServiceBrowser = NSNetServices;
	    NSPort = NSPort;
	    NSStream = NSStream;
	    NSXMLParser = NSXMLParser;
	};
	"-deleteCharactersInRange:" = {
	    NSMutableAttributedString = NSAttributedString;
	    NSMutableString = NSString;
	};
	"-deleteCookie:" = {
	    NSHTTPCookieStorage = NSHTTPCookieStorage;
	};
	"-deletesFileUponFailure" = {
	    NSURLDownload = NSURLDownload;
	};
	"-dequeueNotificationsMatching:coalesceMask:" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	"-description" = {
	    "(NSObject)" = NSObject;
	    NSArray = NSArray;
	    NSCalendarDate = NSCalendarDate;
	    NSData = NSData;
	    NSDate = NSDate;
	    NSDictionary = NSDictionary;
	    NSNumber = NSValue;
	    NSProxy = NSProxy;
	    NSSet = NSSet;
	    NSString = NSString;
	};
	"-descriptionFunction" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-descriptionInStringsFileFormat" = {
	    NSDictionary = NSDictionary;
	};
	"-descriptionWithCalendarFormat:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-descriptionWithCalendarFormat:locale:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-descriptionWithCalendarFormat:timeZone:locale:" = {
	    NSDate = NSDate;
	};
	"-descriptionWithLocale:" = {
	    NSArray = NSArray;
	    NSCalendarDate = NSCalendarDate;
	    NSDate = NSDate;
	    NSDecimalNumber = NSDecimalNumber;
	    NSDictionary = NSDictionary;
	    NSNumber = NSValue;
	    NSSet = NSSet;
	};
	"-descriptionWithLocale:indent:" = {
	    NSArray = NSArray;
	    NSDictionary = NSDictionary;
	};
	"-deserializeAlignedBytesLengthAtCursor:" = {
	    NSData = NSData;
	};
	"-deserializeBytes:length:atCursor:" = {
	    NSData = NSData;
	};
	"-deserializeDataAt:ofObjCType:atCursor:context:" = {
	    NSData = NSData;
	};
	"-deserializeHeaderAt:version:classes:objects:pointers:" = {
	    "NSUnarchiver(GNUstep)" = NSArchiver;
	};
	"-deserializeIntAtCursor:" = {
	    NSData = NSData;
	};
	"-deserializeIntAtIndex:" = {
	    NSData = NSData;
	};
	"-deserializeInts:count:atCursor:" = {
	    NSData = NSData;
	};
	"-deserializeInts:count:atIndex:" = {
	    NSData = NSData;
	};
	"-deserializeObjectAt:ofObjCType:fromData:atCursor:" = {
	    "(NSObjCTypeSerializationCallBack)" = NSSerialization;
	};
	"-deserializeTypeTag:andCrossRef:atCursor:" = {
	    "NSData(GNUstepExtensions)" = NSData;
	};
	"-detach" = {
	    NSXMLNode = NSXMLNode;
	};
	"-developmentLocalization" = {
	    NSBundle = NSBundle;
	};
	"-dictionaryForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-dictionaryRepresentation" = {
	    NSMapTable = NSMapTable;
	    NSUserDefaults = NSUserDefaults;
	};
	"-dictionaryWithValuesForKeys:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-didChange:valuesAtIndexes:forKey:" = {
	    "NSObject(NSKeyValueObserverNotification)" = NSKeyValueObserving;
	};
	"-didChangeValueForKey:" = {
	    "NSObject(NSKeyValueObserverNotification)" = NSKeyValueObserving;
	};
	"-didChangeValueForKey:withSetMutation:usingObjects:" = {
	    "NSObject(NSKeyValueObserverNotification)" = NSKeyValueObserving;
	};
	"-didLoadBytes:loadComplete:" = {
	    NSURLHandle = NSURLHandle;
	};
	"-directDataAccess" = {
	    "NSArchiver(GNUstep)" = NSArchiver;
	    "NSUnarchiver(GNUstep)" = NSArchiver;
	};
	"-directoryAttributes" = {
	    NSDirectoryEnumerator = NSFileManager;
	};
	"-directoryContentsAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-disableSuddenTermination" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-disableUndoRegistration" = {
	    NSUndoManager = NSUndoManager;
	};
	"-discardContentIfPossible" = {
	    "(NSDiscardableContent)" = NSObject;
	};
	"-diskCapacity" = {
	    NSURLCache = NSURLCache;
	};
	"-dispatch" = {
	    NSPortCoder = NSPortCoder;
	};
	"-displayNameAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-distinguishedNames" = {
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-documentContentKind" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-doesNotRecognizeSelector:" = {
	    NSObject = NSObject;
	};
	"-doesRelativeDateFormatting" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-domain" = {
	    NSError = NSError;
	    NSHTTPCookie = NSHTTPCookie;
	    NSNetService = NSNetServices;
	};
	"-doubleForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-doubleValue" = {
	    NSDecimalNumber = NSDecimalNumber;
	    NSNumber = NSValue;
	    NSString = NSString;
	};
	"-download:decideDestinationWithSuggestedFilename:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:didCancelAuthenticationChallenge:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:didCreateDestination:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:didFailWithError:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:didReceiveAuthenticationChallenge:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:didReceiveDataOfLength:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:didReceiveResponse:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:shouldDecodeSourceDataOfMIMEType:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:willResumeWithResponse:fromByte:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-download:willSendRequest:redirectResponse:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-downloadDidFinish:" = {
	    "NSObject(NSURLDownloadDelegate)" = NSURLDownload;
	};
	"-drain" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"-earlierDate:" = {
	    NSDate = NSDate;
	};
	"-editingStringForObjectValue:" = {
	    NSFormatter = NSFormatter;
	};
	"-elementDeclarationForName:" = {
	    NSXMLDTD = NSXMLDTD;
	};
	"-elementsForLocalName:URI:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-elementsForName:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-emptyPool" = {
	    NSAutoreleasePool = NSAutoreleasePool;
	};
	"-enableMultipleThreads" = {
	    NSConnection = NSConnection;
	};
	"-enableSuddenTermination" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-enableUndoRegistration" = {
	    NSUndoManager = NSUndoManager;
	};
	"-encodeArrayOfObjCType:count:at:" = {
	    NSCoder = NSCoder;
	};
	"-encodeBool:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodeBycopyObject:" = {
	    NSCoder = NSCoder;
	};
	"-encodeByrefObject:" = {
	    NSCoder = NSCoder;
	};
	"-encodeBytes:length:" = {
	    NSCoder = NSCoder;
	};
	"-encodeBytes:length:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodeClassName:intoClassName:" = {
	    NSArchiver = NSArchiver;
	};
	"-encodeConditionalObject:" = {
	    NSCoder = NSCoder;
	};
	"-encodeConditionalObject:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodeDataObject:" = {
	    NSCoder = NSCoder;
	};
	"-encodeDouble:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodeFloat:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodeInt32:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodeInt64:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodeInt:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodeInteger:forKey:" = {
	    NSCoder = NSCoder;
	};
	"-encodeObject:" = {
	    NSCoder = NSCoder;
	};
	"-encodeObject:forKey:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-encodePoint:" = {
	    NSCoder = NSCoder;
	};
	"-encodePoint:forKey:" = {
	    "NSCoder(NSGeometryKeyedCoding)" = NSKeyedArchiver;
	};
	"-encodePortObject:" = {
	    NSPortCoder = NSPortCoder;
	};
	"-encodePropertyList:" = {
	    NSCoder = NSCoder;
	};
	"-encodeRect:" = {
	    NSCoder = NSCoder;
	};
	"-encodeRect:forKey:" = {
	    "NSCoder(NSGeometryKeyedCoding)" = NSKeyedArchiver;
	};
	"-encodeRootObject:" = {
	    NSCoder = NSCoder;
	};
	"-encodeSize:" = {
	    NSCoder = NSCoder;
	};
	"-encodeSize:forKey:" = {
	    "NSCoder(NSGeometryKeyedCoding)" = NSKeyedArchiver;
	};
	"-encodeValueOfObjCType:at:" = {
	    NSCoder = NSCoder;
	};
	"-encodeValuesOfObjCTypes:,..." = {
	    NSCoder = NSCoder;
	};
	"-encodeWithCoder:" = {
	    "(NSCoding)" = NSObject;
	};
	"-endActivity:" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-endContentAccess" = {
	    "(NSDiscardableContent)" = NSObject;
	};
	"-endEditing" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-endLoadInBackground" = {
	    NSURLHandle = NSURLHandle;
	};
	"-endUndoGrouping" = {
	    NSUndoManager = NSUndoManager;
	};
	"-enqueueNotification:postingStyle:" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	"-enqueueNotification:postingStyle:coalesceMask:forModes:" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	"-entityDeclarationForName:" = {
	    NSXMLDTD = NSXMLDTD;
	};
	"-enumerateIndexesInRange:options:usingBlock:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-enumerateIndexesUsingBlock:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-enumerateIndexesWithOptions:usingBlock:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-enumerateKeysAndObjectsUsingBlock:" = {
	    NSDictionary = NSDictionary;
	};
	"-enumerateKeysAndObjectsWithOptions:usingBlock:" = {
	    NSDictionary = NSDictionary;
	};
	"-enumerateObjectsAtIndexes:options:usingBlock:" = {
	    NSArray = NSArray;
	};
	"-enumerateObjectsUsingBlock:" = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-enumerateObjectsWithOptions:usingBlock:" = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-enumeratorAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:" = {
	    NSFileManager = NSFileManager;
	};
	"-environment" = {
	    NSProcessInfo = NSProcessInfo;
	    NSTask = NSTask;
	};
	"-eraSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-error" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"-error:,..." = {
	    "NSObject(NEXTSTEP)" = NSObject;
	};
	"-exceptionDuringOperation:error:leftOperand:rightOperand:" = {
	    "(NSDecimalNumberBehaviors)" = NSDecimalNumber;
	};
	"-exchangeObjectAtIndex:withObjectAtIndex:" = {
	    NSMutableArray = NSArray;
	};
	"-executableArchitectures" = {
	    NSBundle = NSBundle;
	};
	"-executablePath" = {
	    NSBundle = NSBundle;
	};
	"-executableURL" = {
	    NSBundle = NSBundle;
	};
	"-expectedContentLength" = {
	    NSURLResponse = NSURLResponse;
	};
	"-expiresDate" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-exponentSymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-failureReason" = {
	    NSURLHandle = NSURLHandle;
	};
	"-failureResponse" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"-fastestEncoding" = {
	    NSString = NSString;
	};
	"-fileAttributes" = {
	    NSDirectoryEnumerator = NSFileManager;
	};
	"-fileAttributesAtPath:traverseLink:" = {
	    NSFileManager = NSFileManager;
	};
	"-fileCreationDate" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileDescriptor" = {
	    NSFileHandle = NSFileHandle;
	};
	"-fileExistsAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-fileExistsAtPath:isDirectory:" = {
	    NSFileManager = NSFileManager;
	};
	"-fileExtensionHidden" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileGroupOwnerAccountID" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileGroupOwnerAccountName" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileHFSCreatorCode" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileHFSTypeCode" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileHandleForReading" = {
	    NSPipe = NSFileHandle;
	};
	"-fileHandleForWriting" = {
	    NSPipe = NSFileHandle;
	};
	"-fileIsAppendOnly" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileIsImmutable" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileManager:shouldCopyItemAtPath:toPath:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldCopyItemAtURL:toURL:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldLinkItemAtPath:toPath:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldLinkItemAtURL:toURL:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldMoveItemAtPath:toPath:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldMoveItemAtURL:toURL:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:" = {
	    "NSObject(NSFileManagerHandler)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:movingItemAtPath:toPath:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:movingItemAtURL:toURL:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:removingItemAtPath:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldProceedAfterError:removingItemAtURL:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldRemoveItemAtPath:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:shouldRemoveItemAtURL:" = {
	    "NSObject(NSFileManagerDelegate)" = NSFileManager;
	};
	"-fileManager:willProcessPath:" = {
	    "NSObject(NSFileManagerHandler)" = NSFileManager;
	};
	"-fileModificationDate" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileOwnerAccountID" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileOwnerAccountName" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-filePathURL" = {
	    NSURL = NSURL;
	};
	"-filePosixPermissions" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileReferenceURL" = {
	    NSURL = NSURL;
	};
	"-fileSize" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileSystemAttributesAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-fileSystemFileNumber" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileSystemNumber" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-fileSystemRepresentation" = {
	    NSString = NSString;
	};
	"-fileSystemRepresentationWithPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-fileType" = {
	    "NSDictionary(NSFileAttributes)" = NSFileManager;
	};
	"-finalize" = {
	    NSObject = NSObject;
	};
	"-finishDecoding" = {
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-finishEncoding" = {
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-fire" = {
	    NSTimer = NSTimer;
	};
	"-fireDate" = {
	    NSTimer = NSTimer;
	};
	"-firstIndex" = {
	    NSIndexSet = NSIndexSet;
	};
	"-firstObject" = {
	    NSArray = NSArray;
	};
	"-firstObjectCommonWithArray:" = {
	    NSArray = NSArray;
	};
	"-floatForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-floatValue" = {
	    NSNumber = NSValue;
	    NSString = NSString;
	};
	"-flushCachedData" = {
	    NSURLHandle = NSURLHandle;
	};
	"-formIntersectionWithCharacterSet:" = {
	    NSMutableCharacterSet = NSCharacterSet;
	};
	"-formUnionWithCharacterSet:" = {
	    NSMutableCharacterSet = NSCharacterSet;
	};
	"-format" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-formatWidth" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-formatterBehavior" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-forwardInvocation:" = {
	    NSObject = NSObject;
	    NSProtocolChecker = NSProtocolChecker;
	    NSProxy = NSProxy;
	    NSUndoManager = NSUndoManager;
	};
	"-forwardingTargetForSelector:" = {
	    NSObject = NSObject;
	};
	"-fragment" = {
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	};
	"-frameLength" = {
	    NSMethodSignature = NSMethodSignature;
	};
	"-generatesCalendarDates" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-generatesDecimalNumbers" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-getArgument:atIndex:" = {
	    NSInvocation = NSInvocation;
	};
	"-getArgumentTypeAtIndex:" = {
	    NSMethodSignature = NSMethodSignature;
	};
	"-getBuffer:length:" = {
	    NSInputStream = NSStream;
	};
	"-getBytes:" = {
	    NSData = NSData;
	};
	"-getBytes:length:" = {
	    NSData = NSData;
	};
	"-getBytes:ofLength:byHandle:" = {
	    "(GSLogDelegate)" = NSDebug;
	};
	"-getBytes:range:" = {
	    NSData = NSData;
	};
	"-getCString:" = {
	    NSString = NSString;
	};
	"-getCString:maxLength:" = {
	    NSString = NSString;
	};
	"-getCString:maxLength:encoding:" = {
	    NSString = NSString;
	};
	"-getCString:maxLength:range:remainingRange:" = {
	    NSString = NSString;
	};
	"-getCharacters:" = {
	    NSString = NSString;
	};
	"-getCharacters:range:" = {
	    NSString = NSString;
	};
	"-getFds:count:" = {
	    NSSocketPort = NSPort;
	};
	"-getFileSystemRepresentation:maxLength:" = {
	    NSString = NSString;
	};
	"-getIndexes:" = {
	    NSIndexPath = NSIndexPath;
	};
	"-getIndexes:maxCount:inIndexRange:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-getInputStream:outputStream:" = {
	    NSNetService = NSNetServices;
	};
	"-getLineStart:end:contentsEnd:forRange:" = {
	    NSString = NSString;
	};
	"-getObjectValue:forString:errorDescription:" = {
	    NSFormatter = NSFormatter;
	};
	"-getObjectValue:forString:range:error:" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-getObjects:" = {
	    NSArray = NSArray;
	};
	"-getObjects:andKeys:" = {
	    NSDictionary = NSDictionary;
	};
	"-getObjects:range:" = {
	    NSArray = NSArray;
	};
	"-getParagraphStart:end:contentsEnd:forRange:" = {
	    NSString = NSString;
	};
	"-getResourceValue:forKey:error:" = {
	    NSURL = NSURL;
	};
	"-getReturnValue:" = {
	    NSInvocation = NSInvocation;
	};
	"-getValue:" = {
	    NSValue = NSValue;
	};
	"-globallyUniqueString" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-gregorianDateFromAbsolute:day:month:year:" = {
	    "NSCalendarDate(GregorianDate)" = NSCalendarDate;
	};
	"-gregorianStartDate" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-groupingLevel" = {
	    NSUndoManager = NSUndoManager;
	};
	"-groupingSeparator" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-groupingSize" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-groupsByEvent" = {
	    NSUndoManager = NSUndoManager;
	};
	"-handleFailureInFunction:file:lineNumber:description:,..." = {
	    NSAssertionHandler = NSException;
	};
	"-handleFailureInMethod:object:file:lineNumber:description:,..." = {
	    NSAssertionHandler = NSException;
	};
	"-handlePortMessage:" = {
	    "NSObject(NSPortDelegateMethods)" = NSPort;
	    NSSocketPort = NSPort;
	};
	"-handleQueryWithUnboundKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-handleTakeValue:forUnboundKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-hasBytesAvailable" = {
	    NSInputStream = NSStream;
	};
	"-hasMemberInPlane:" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"-hasPassword" = {
	    NSURLCredential = NSURLCredential;
	};
	"-hasPrefix:" = {
	    NSString = NSString;
	};
	"-hasSpaceAvailable" = {
	    NSOutputStream = NSStream;
	};
	"-hasSuffix:" = {
	    NSString = NSString;
	};
	"-hasThousandSeparators" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-hash" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	    NSString = NSString;
	};
	"-hashFunction" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-host" = {
	    NSSocketPort = NSPort;
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-hostName" = {
	    NSNetService = NSNetServices;
	    NSProcessInfo = NSProcessInfo;
	};
	"-hourOfDay" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-increaseLengthBy:" = {
	    NSMutableData = NSData;
	};
	"-independentConversationQueueing" = {
	    NSConnection = NSConnection;
	};
	"-index" = {
	    NSXMLNode = NSXMLNode;
	};
	"-indexAtPosition:" = {
	    NSIndexPath = NSIndexPath;
	};
	"-indexGreaterThanIndex:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-indexGreaterThanOrEqualToIndex:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-indexLessThanIndex:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-indexLessThanOrEqualToIndex:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-indexOfObject:" = {
	    NSArray = NSArray;
	};
	"-indexOfObject:inRange:" = {
	    NSArray = NSArray;
	};
	"-indexOfObject:inSortedRange:options:usingComparator:" = {
	    NSArray = NSArray;
	};
	"-indexOfObjectAtIndexes:options:passingTest:" = {
	    NSArray = NSArray;
	};
	"-indexOfObjectIdenticalTo:" = {
	    NSArray = NSArray;
	};
	"-indexOfObjectIdenticalTo:inRange:" = {
	    NSArray = NSArray;
	};
	"-indexOfObjectPassingTest:" = {
	    NSArray = NSArray;
	};
	"-indexOfObjectWithOptions:passingTest:" = {
	    NSArray = NSArray;
	};
	"-indexPathByAddingIndex:" = {
	    NSIndexPath = NSIndexPath;
	};
	"-indexPathByRemovingLastIndex" = {
	    NSIndexPath = NSIndexPath;
	};
	"-indexesOfObjectsAtIndexes:options:passingTest:" = {
	    NSArray = NSArray;
	};
	"-indexesOfObjectsPassingTest:" = {
	    NSArray = NSArray;
	};
	"-indexesOfObjectsWithOptions:passingTest:" = {
	    NSArray = NSArray;
	};
	"-infoDictionary" = {
	    NSBundle = NSBundle;
	};
	"-init" = {
	    NSArray = NSArray;
	    NSDate = NSDate;
	    NSDictionary = NSDictionary;
	    NSNetServiceBrowser = NSNetServices;
	    NSObject = NSObject;
	    NSPort = NSPort;
	    NSProxy = NSProxy;
	    NSSet = NSSet;
	    NSString = NSString;
	    NSThread = NSThread;
	    NSURLComponents = NSURL;
	    NSUserDefaults = NSUserDefaults;
	};
	"-initFileURLWithPath:" = {
	    NSURL = NSURL;
	};
	"-initFileURLWithPath:isDirectory:" = {
	    NSURL = NSURL;
	};
	"-initForReadingWithData:" = {
	    NSKeyedUnarchiver = NSKeyedArchiver;
	    NSUnarchiver = NSArchiver;
	};
	"-initForWritingWithMutableData:" = {
	    NSArchiver = NSArchiver;
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-initToBuffer:capacity:" = {
	    NSOutputStream = NSStream;
	};
	"-initToFileAtPath:append:" = {
	    NSOutputStream = NSStream;
	};
	"-initToMemory" = {
	    NSOutputStream = NSStream;
	};
	"-initWithArray:" = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-initWithArray:copyItems:" = {
	    NSArray = NSArray;
	};
	"-initWithAttributedString:" = {
	    NSAttributedString = NSAttributedString;
	};
	"-initWithAuthenticationChallenge:sender:" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"-initWithBase64EncodedData:options:" = {
	    NSData = NSData;
	};
	"-initWithBase64EncodedString:options:" = {
	    NSData = NSData;
	};
	"-initWithBool:" = {
	    NSNumber = NSValue;
	};
	"-initWithBytes:length:" = {
	    NSData = NSData;
	};
	"-initWithBytes:length:encoding:" = {
	    NSString = NSString;
	};
	"-initWithBytes:objCType:" = {
	    NSValue = NSValue;
	};
	"-initWithBytesNoCopy:length:" = {
	    NSData = NSData;
	};
	"-initWithBytesNoCopy:length:deallocator:" = {
	    NSData = NSData;
	};
	"-initWithBytesNoCopy:length:encoding:freeWhenDone:" = {
	    NSString = NSString;
	};
	"-initWithBytesNoCopy:length:freeWhenDone:" = {
	    NSData = NSData;
	};
	"-initWithCString:" = {
	    NSString = NSString;
	};
	"-initWithCString:encoding:" = {
	    NSString = NSString;
	};
	"-initWithCString:length:" = {
	    NSString = NSString;
	};
	"-initWithCStringNoCopy:length:freeWhenDone:" = {
	    NSString = NSString;
	};
	"-initWithCapacity:" = {
	    NSMutableArray = NSArray;
	    NSMutableData = NSData;
	    NSMutableDictionary = NSDictionary;
	    NSMutableSet = NSSet;
	    NSMutableString = NSString;
	};
	"-initWithChar:" = {
	    NSNumber = NSValue;
	};
	"-initWithCharacters:length:" = {
	    NSString = NSString;
	};
	"-initWithCharactersNoCopy:length:freeWhenDone:" = {
	    NSString = NSString;
	};
	"-initWithCoder:" = {
	    "(NSCoding)" = NSObject;
	};
	"-initWithCondition:" = {
	    NSConditionLock = NSLock;
	};
	"-initWithContentsOfFile:" = {
	    NSArray = NSArray;
	    NSData = NSData;
	    NSDictionary = NSDictionary;
	    NSString = NSString;
	};
	"-initWithContentsOfFile:encoding:error:" = {
	    NSString = NSString;
	};
	"-initWithContentsOfFile:usedEncoding:error:" = {
	    NSString = NSString;
	};
	"-initWithContentsOfMappedFile:" = {
	    NSData = NSData;
	};
	"-initWithContentsOfURL:" = {
	    NSArray = NSArray;
	    NSData = NSData;
	    NSDictionary = NSDictionary;
	    NSString = NSString;
	    NSXMLParser = NSXMLParser;
	};
	"-initWithContentsOfURL:encoding:error:" = {
	    NSString = NSString;
	};
	"-initWithContentsOfURL:options:error:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDocument = NSXMLDocument;
	};
	"-initWithContentsOfURL:usedEncoding:error:" = {
	    NSString = NSString;
	};
	"-initWithData:" = {
	    NSData = NSData;
	    NSInputStream = NSStream;
	    NSXMLParser = NSXMLParser;
	};
	"-initWithData:encoding:" = {
	    NSString = NSString;
	};
	"-initWithData:options:error:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDocument = NSXMLDocument;
	};
	"-initWithDateFormat:allowNaturalLanguage:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-initWithDecimal:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-initWithDictionary:" = {
	    NSDictionary = NSDictionary;
	};
	"-initWithDictionary:copyItems:" = {
	    NSDictionary = NSDictionary;
	};
	"-initWithDomain:code:userInfo:" = {
	    NSError = NSError;
	};
	"-initWithDomain:type:name:" = {
	    NSNetService = NSNetServices;
	};
	"-initWithDomain:type:name:port:" = {
	    NSNetService = NSNetServices;
	};
	"-initWithDouble:" = {
	    NSNumber = NSValue;
	};
	"-initWithFileAtPath:" = {
	    NSInputStream = NSStream;
	};
	"-initWithFileDescriptor:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-initWithFileDescriptor:closeOnDealloc:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-initWithFireDate:interval:repeats:block:" = {
	    NSTimer = NSTimer;
	};
	"-initWithFireDate:interval:target:selector:userInfo:repeats:" = {
	    NSTimer = NSTimer;
	};
	"-initWithFloat:" = {
	    NSNumber = NSValue;
	};
	"-initWithFormat:,..." = {
	    NSString = NSString;
	};
	"-initWithFormat:arguments:" = {
	    NSString = NSString;
	};
	"-initWithFormat:locale:,..." = {
	    NSString = NSString;
	};
	"-initWithFormat:locale:arguments:" = {
	    NSString = NSString;
	};
	"-initWithHost:port:protocol:realm:authenticationMethod:" = {
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-initWithIndex:" = {
	    NSIndexPath = NSIndexPath;
	    NSIndexSet = NSIndexSet;
	};
	"-initWithIndexSet:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-initWithIndexes:length:" = {
	    NSIndexPath = NSIndexPath;
	};
	"-initWithIndexesInRange:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-initWithInt:" = {
	    NSNumber = NSValue;
	};
	"-initWithInteger:" = {
	    NSNumber = NSValue;
	};
	"-initWithKeyOptions:valueOptions:capacity:" = {
	    NSMapTable = NSMapTable;
	};
	"-initWithKeyPointerFunctions:valuePointerFunctions:capacity:" = {
	    NSMapTable = NSMapTable;
	};
	"-initWithKind:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-initWithKind:options:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-initWithLength:" = {
	    NSMutableData = NSData;
	};
	"-initWithLocal:connection:" = {
	    NSDistantObject = NSDistantObject;
	};
	"-initWithLong:" = {
	    NSNumber = NSValue;
	};
	"-initWithLongLong:" = {
	    NSNumber = NSValue;
	};
	"-initWithMachMessage:" = {
	    NSPortMessage = NSPortMessage;
	};
	"-initWithMachPort:" = {
	    NSPort = NSPort;
	};
	"-initWithMantissa:exponent:isNegative:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-initWithMemoryCapacity:diskCapacity:diskPath:" = {
	    NSURLCache = NSURLCache;
	};
	"-initWithMethodSignature:" = {
	    "NSInvocation(MacroSetup)" = NSInvocation;
	};
	"-initWithName:" = {
	    NSTimeZone = NSTimeZone;
	    NSXMLElement = NSXMLElement;
	};
	"-initWithName:URI:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-initWithName:data:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-initWithName:reason:userInfo:" = {
	    NSException = NSException;
	};
	"-initWithName:stringValue:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-initWithName:value:" = {
	    NSURLQueryItem = NSURL;
	};
	"-initWithNativeHandle:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-initWithNativeHandle:closeOnDealloc:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-initWithNotificationCenter:" = {
	    NSNotificationQueue = NSNotificationQueue;
	};
	"-initWithObjects:,..." = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-initWithObjects:count:" = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-initWithObjects:forKeys:" = {
	    NSDictionary = NSDictionary;
	};
	"-initWithObjects:forKeys:count:" = {
	    NSDictionary = NSDictionary;
	};
	"-initWithObjectsAndKeys:,..." = {
	    NSDictionary = NSDictionary;
	};
	"-initWithOptions:" = {
	    NSPointerArray = NSPointerArray;
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-initWithOptions:capacity:" = {
	    NSHashTable = NSHashTable;
	};
	"-initWithPath:" = {
	    NSBundle = NSBundle;
	    NSDistributedLock = NSDistributedLock;
	};
	"-initWithPointerFunctions:" = {
	    NSPointerArray = NSPointerArray;
	};
	"-initWithPointerFunctions:capacity:" = {
	    NSHashTable = NSHashTable;
	};
	"-initWithProperties:" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"-initWithProxyHost:port:type:realm:authenticationMethod:" = {
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-initWithReceivePort:sendPort:" = {
	    NSConnection = NSConnection;
	};
	"-initWithReceivePort:sendPort:components:" = {
	    NSPortCoder = NSPortCoder;
	};
	"-initWithRequest:cachedResponse:client:" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"-initWithRequest:delegate:" = {
	    NSURLConnection = NSURLConnection;
	    NSURLDownload = NSURLDownload;
	};
	"-initWithRequest:delegate:startImmediately:" = {
	    NSURLConnection = NSURLConnection;
	};
	"-initWithResponse:data:" = {
	    NSCachedURLResponse = NSURLCache;
	};
	"-initWithResponse:data:userInfo:storagePolicy:" = {
	    NSCachedURLResponse = NSURLCache;
	};
	"-initWithResumeData:delegate:path:" = {
	    NSURLDownload = NSURLDownload;
	};
	"-initWithRootElement:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:" = {
	    NSDecimalNumberHandler = NSDecimalNumber;
	};
	"-initWithScheme:host:path:" = {
	    NSURL = NSURL;
	};
	"-initWithSendPort:receivePort:components:" = {
	    NSPortMessage = NSPortMessage;
	};
	"-initWithSet:" = {
	    NSSet = NSSet;
	};
	"-initWithSet:copyItems:" = {
	    NSSet = NSSet;
	};
	"-initWithShort:" = {
	    NSNumber = NSValue;
	};
	"-initWithStream:" = {
	    NSXMLParser = NSXMLParser;
	};
	"-initWithString:" = {
	    NSAttributedString = NSAttributedString;
	    NSCalendarDate = NSCalendarDate;
	    NSDate = NSDate;
	    NSDecimalNumber = NSDecimalNumber;
	    NSScanner = NSScanner;
	    NSString = NSString;
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	};
	"-initWithString:attributes:" = {
	    NSAttributedString = NSAttributedString;
	};
	"-initWithString:calendarFormat:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-initWithString:calendarFormat:locale:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-initWithString:locale:" = {
	    NSDecimalNumber = NSDecimalNumber;
	};
	"-initWithString:relativeToURL:" = {
	    NSURL = NSURL;
	};
	"-initWithTarget:connection:" = {
	    NSDistantObject = NSDistantObject;
	};
	"-initWithTarget:protocol:" = {
	    NSProtocolChecker = NSProtocolChecker;
	};
	"-initWithTarget:selector:object:" = {
	    NSThread = NSThread;
	};
	"-initWithTask:cachedResponse:client:" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"-initWithTimeInterval:sinceDate:" = {
	    NSDate = NSDate;
	};
	"-initWithTimeIntervalSince1970:" = {
	    NSDate = NSDate;
	};
	"-initWithTimeIntervalSinceNow:" = {
	    NSDate = NSDate;
	};
	"-initWithTimeIntervalSinceReferenceDate:" = {
	    NSDate = NSDate;
	};
	"-initWithTransform:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-initWithURL:" = {
	    NSBundle = NSBundle;
	    NSInputStream = NSStream;
	    NSURLRequest = NSURLRequest;
	};
	"-initWithURL:MIMEType:expectedContentLength:textEncodingName:" = {
	    NSURLResponse = NSURLResponse;
	};
	"-initWithURL:cachePolicy:timeoutInterval:" = {
	    NSURLRequest = NSURLRequest;
	};
	"-initWithURL:cached:" = {
	    NSURLHandle = NSURLHandle;
	};
	"-initWithURL:resolvingAgainstBaseURL:" = {
	    NSURLComponents = NSURL;
	};
	"-initWithURL:statusCode:HTTPVersion:headerFields:" = {
	    NSURLResponse = NSURLResponse;
	};
	"-initWithUTF8String:" = {
	    NSString = NSString;
	};
	"-initWithUnsignedChar:" = {
	    NSNumber = NSValue;
	};
	"-initWithUnsignedInt:" = {
	    NSNumber = NSValue;
	};
	"-initWithUnsignedInteger:" = {
	    NSNumber = NSValue;
	};
	"-initWithUnsignedLong:" = {
	    NSNumber = NSValue;
	};
	"-initWithUnsignedLongLong:" = {
	    NSNumber = NSValue;
	};
	"-initWithUnsignedShort:" = {
	    NSNumber = NSValue;
	};
	"-initWithUser:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-initWithUser:password:persistence:" = {
	    NSURLCredential = NSURLCredential;
	};
	"-initWithXMLString:" = {
	    NSXMLDTDNode = NSXMLDTDNode;
	};
	"-initWithXMLString:error:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-initWithXMLString:options:error:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-initWithYear:month:day:hour:minute:second:timeZone:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-insertAttributedString:atIndex:" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-insertChild:atIndex:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDocument = NSXMLDocument;
	    NSXMLElement = NSXMLElement;
	};
	"-insertChildren:atIndex:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDocument = NSXMLDocument;
	    NSXMLElement = NSXMLElement;
	};
	"-insertObject:atIndex:" = {
	    NSMutableArray = NSArray;
	};
	"-insertObjects:atIndexes:" = {
	    NSMutableArray = NSArray;
	};
	"-insertPointer:atIndex:" = {
	    NSPointerArray = NSPointerArray;
	};
	"-insertString:atIndex:" = {
	    NSMutableString = NSString;
	};
	"-intValue" = {
	    NSNumber = NSValue;
	    NSString = NSString;
	};
	"-integerForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-integerValue" = {
	    NSNumber = NSValue;
	    NSString = NSString;
	};
	"-internationalCurrencySymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-interrupt" = {
	    NSTask = NSTask;
	};
	"-intersectHashTable:" = {
	    NSHashTable = NSHashTable;
	};
	"-intersectSet:" = {
	    NSMutableSet = NSSet;
	};
	"-intersectsHashTable:" = {
	    NSHashTable = NSHashTable;
	};
	"-intersectsIndexesInRange:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-intersectsSet:" = {
	    NSSet = NSSet;
	};
	"-invalidate" = {
	    NSConnection = NSConnection;
	    NSPort = NSPort;
	    NSTimer = NSTimer;
	};
	"-inverseForRelationshipKey:" = {
	    NSClassDescription = NSClassDescription;
	    "NSObject(NSClassDescriptionPrimitives)" = NSClassDescription;
	};
	"-invert" = {
	    NSAffineTransform = NSAffineTransform;
	    NSMutableCharacterSet = NSCharacterSet;
	};
	"-invertedSet" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"-invoke" = {
	    NSInvocation = NSInvocation;
	};
	"-invokeWithTarget:" = {
	    NSInvocation = NSInvocation;
	};
	"-isAbsolutePath" = {
	    NSString = NSString;
	};
	"-isAtEnd" = {
	    NSScanner = NSScanner;
	    NSUnarchiver = NSArchiver;
	};
	"-isBycopy" = {
	    NSPortCoder = NSPortCoder;
	};
	"-isByref" = {
	    NSPortCoder = NSPortCoder;
	};
	"-isCancelled" = {
	    NSThread = NSThread;
	};
	"-isContentDiscarded" = {
	    "(NSDiscardableContent)" = NSObject;
	};
	"-isDaylightSavingTime" = {
	    NSTimeZone = NSTimeZone;
	};
	"-isDaylightSavingTimeForDate:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-isDaylightSavingTimeZone" = {
	    NSTimeZoneDetail = NSTimeZone;
	};
	"-isDeletableFileAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-isEqual:" = {
	    "(NSObject)" = NSObject;
	    NSDate = NSDate;
	    NSProxy = NSProxy;
	    NSString = NSString;
	    NSURLCredential = NSURLCredential;
	};
	"-isEqualFunction" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-isEqualToArray:" = {
	    NSArray = NSArray;
	};
	"-isEqualToAttributedString:" = {
	    NSAttributedString = NSAttributedString;
	};
	"-isEqualToData:" = {
	    NSData = NSData;
	};
	"-isEqualToDate:" = {
	    NSDate = NSDate;
	};
	"-isEqualToDictionary:" = {
	    NSDictionary = NSDictionary;
	};
	"-isEqualToHashTable:" = {
	    NSHashTable = NSHashTable;
	};
	"-isEqualToHost:" = {
	    NSHost = NSHost;
	};
	"-isEqualToIndexSet:" = {
	    NSIndexSet = NSIndexSet;
	};
	"-isEqualToNumber:" = {
	    NSNumber = NSValue;
	};
	"-isEqualToSet:" = {
	    NSSet = NSSet;
	};
	"-isEqualToString:" = {
	    NSString = NSString;
	};
	"-isEqualToTimeZone:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-isEqualToValue:" = {
	    NSValue = NSValue;
	};
	"-isExecutableFileAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-isExecuting" = {
	    NSThread = NSThread;
	};
	"-isExternal" = {
	    NSXMLDTDNode = NSXMLDTDNode;
	};
	"-isFileReferenceURL" = {
	    NSURL = NSURL;
	};
	"-isFileURL" = {
	    NSURL = NSURL;
	};
	"-isFinished" = {
	    NSThread = NSThread;
	};
	"-isHTTPOnly" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-isKindOfClass:" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	};
	"-isLenient" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-isLoaded" = {
	    NSBundle = NSBundle;
	};
	"-isLockedByCurrentThread" = {
	    NSConditionLock = NSLock;
	    NSLock = NSLock;
	    NSRecursiveLock = NSLock;
	};
	"-isMainThread" = {
	    NSThread = NSThread;
	};
	"-isMemberOfClass:" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	};
	"-isOneway" = {
	    NSMethodSignature = NSMethodSignature;
	};
	"-isPartialStringValid:newEditingString:errorDescription:" = {
	    NSFormatter = NSFormatter;
	};
	"-isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:" = {
	    NSFormatter = NSFormatter;
	};
	"-isPartialStringValidationEnabled" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-isProxy" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-isReadableFileAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-isRedoing" = {
	    NSUndoManager = NSUndoManager;
	};
	"-isRunning" = {
	    NSTask = NSTask;
	};
	"-isSecure" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-isSessionOnly" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-isStandalone" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-isSubsetOfHashTable:" = {
	    NSHashTable = NSHashTable;
	};
	"-isSubsetOfSet:" = {
	    NSSet = NSSet;
	};
	"-isSupersetOfSet:" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"-isUndoRegistrationEnabled" = {
	    NSUndoManager = NSUndoManager;
	};
	"-isUndoing" = {
	    NSUndoManager = NSUndoManager;
	};
	"-isValid" = {
	    NSConnection = NSConnection;
	    NSPort = NSPort;
	    NSTimer = NSTimer;
	};
	"-isWritableFileAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-keyEnumerator" = {
	    NSDictionary = NSDictionary;
	    NSMapTable = NSMapTable;
	};
	"-keyPointerFunctions" = {
	    NSMapTable = NSMapTable;
	};
	"-keysOfEntriesPassingTest:" = {
	    NSDictionary = NSDictionary;
	};
	"-keysOfEntriesWithOptions:passingTest:" = {
	    NSDictionary = NSDictionary;
	};
	"-keysSortedByValueUsingComparator:" = {
	    NSDictionary = NSDictionary;
	};
	"-keysSortedByValueUsingSelector:" = {
	    NSDictionary = NSDictionary;
	};
	"-keysSortedByValueWithOptions:usingComparator:" = {
	    NSDictionary = NSDictionary;
	};
	"-kind" = {
	    NSXMLNode = NSXMLNode;
	};
	"-lastDayOfGregorianMonth:year:" = {
	    "NSCalendarDate(GregorianDate)" = NSCalendarDate;
	};
	"-lastIndex" = {
	    NSIndexSet = NSIndexSet;
	};
	"-lastObject" = {
	    NSArray = NSArray;
	};
	"-lastPathComponent" = {
	    NSString = NSString;
	    NSURL = NSURL;
	};
	"-laterDate:" = {
	    NSDate = NSDate;
	};
	"-launch" = {
	    NSTask = NSTask;
	};
	"-launchPath" = {
	    NSTask = NSTask;
	};
	"-length" = {
	    NSAttributedString = NSAttributedString;
	    NSData = NSData;
	    NSIndexPath = NSIndexPath;
	    NSString = NSString;
	};
	"-lengthOfBytesUsingEncoding:" = {
	    NSString = NSString;
	};
	"-level" = {
	    NSXMLNode = NSXMLNode;
	};
	"-levelsOfUndo" = {
	    NSUndoManager = NSUndoManager;
	};
	"-limitDateForMode:" = {
	    NSRunLoop = NSRunLoop;
	};
	"-lineNumber" = {
	    "NSXMLParser(NSXMLParserLocatorAdditions)" = NSXMLParser;
	};
	"-lineRangeForRange:" = {
	    NSString = NSString;
	};
	"-linkPath:toPath:handler:" = {
	    NSFileManager = NSFileManager;
	};
	"-load" = {
	    NSBundle = NSBundle;
	};
	"-loadAndReturnError:" = {
	    NSBundle = NSBundle;
	};
	"-loadInBackground" = {
	    NSURLHandle = NSURLHandle;
	};
	"-loadInForeground" = {
	    NSURLHandle = NSURLHandle;
	};
	"-loadResourceDataNotifyingClient:usingCache:" = {
	    NSURL = NSURL;
	};
	"-localName" = {
	    NSXMLNode = NSXMLNode;
	};
	"-localObjects" = {
	    NSConnection = NSConnection;
	};
	"-locale" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	    NSScanner = NSScanner;
	};
	"-localizations" = {
	    NSBundle = NSBundle;
	};
	"-localizedCaseInsensitiveCompare:" = {
	    NSString = NSString;
	};
	"-localizedCompare:" = {
	    NSString = NSString;
	};
	"-localizedDescription" = {
	    NSError = NSError;
	};
	"-localizedFailureReason" = {
	    NSError = NSError;
	};
	"-localizedInfoDictionary" = {
	    NSBundle = NSBundle;
	};
	"-localizedName" = {
	    NSHost = NSHost;
	};
	"-localizedName:locale:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-localizedRecoveryOptions" = {
	    NSError = NSError;
	};
	"-localizedRecoverySuggestion" = {
	    NSError = NSError;
	};
	"-localizedStringForKey:value:table:" = {
	    NSBundle = NSBundle;
	};
	"-localizesFormat" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-lock" = {
	    "(NSLocking)" = NSLock;
	    NSConditionLock = NSLock;
	    NSLock = NSLock;
	    NSRecursiveLock = NSLock;
	};
	"-lockBeforeDate:" = {
	    NSConditionLock = NSLock;
	    NSLock = NSLock;
	    NSRecursiveLock = NSLock;
	};
	"-lockDate" = {
	    NSDistributedLock = NSDistributedLock;
	};
	"-lockWhenCondition:" = {
	    NSConditionLock = NSLock;
	};
	"-lockWhenCondition:beforeDate:" = {
	    NSConditionLock = NSLock;
	};
	"-longCharacterIsMember:" = {
	    NSCharacterSet = NSCharacterSet;
	};
	"-longEraSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-longLongValue" = {
	    NSNumber = NSValue;
	    NSString = NSString;
	};
	"-longValue" = {
	    NSNumber = NSValue;
	};
	"-lossyCString" = {
	    NSString = NSString;
	};
	"-lowercaseString" = {
	    NSString = NSString;
	};
	"-machPort" = {
	    NSPort = NSPort;
	};
	"-main" = {
	    NSThread = NSThread;
	};
	"-mainDocumentURL" = {
	    NSURLRequest = NSURLRequest;
	};
	"-makeNewConnection:sender:" = {
	    "NSObject(NSConnectionDelegate)" = NSConnection;
	};
	"-makeObjectsPerform:" = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-makeObjectsPerform:withObject:" = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-makeObjectsPerformSelector:" = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-makeObjectsPerformSelector:withObject:" = {
	    NSArray = NSArray;
	    NSSet = NSSet;
	};
	"-maximum" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-maximumFractionDigits" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-maximumIntegerDigits" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-maximumLengthOfBytesUsingEncoding:" = {
	    NSString = NSString;
	};
	"-maximumSignificantDigits" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-member:" = {
	    NSHashTable = NSHashTable;
	    NSSet = NSSet;
	};
	"-memoryCapacity" = {
	    NSURLCache = NSURLCache;
	};
	"-methodForSelector:" = {
	    NSObject = NSObject;
	};
	"-methodReturnLength" = {
	    NSMethodSignature = NSMethodSignature;
	};
	"-methodReturnType" = {
	    NSMethodSignature = NSMethodSignature;
	};
	"-methodSignature" = {
	    NSInvocation = NSInvocation;
	};
	"-methodSignatureForSelector:" = {
	    NSDistantObject = NSDistantObject;
	    NSObject = NSObject;
	    NSProxy = NSProxy;
	};
	"-minimum" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-minimumFractionDigits" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-minimumIntegerDigits" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-minimumSignificantDigits" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-minusHashTable:" = {
	    NSHashTable = NSHashTable;
	};
	"-minusSet:" = {
	    NSMutableSet = NSSet;
	};
	"-minusSign" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-minuteOfHour" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-monthOfYear" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-monthSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-moveItemAtPath:toPath:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-moveItemAtURL:toURL:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-movePath:toPath:handler:" = {
	    NSFileManager = NSFileManager;
	};
	"-msgid" = {
	    NSPortMessage = NSPortMessage;
	};
	"-multipleThreadsEnabled" = {
	    NSConnection = NSConnection;
	};
	"-multiplier" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-mutableArrayValueForKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-mutableArrayValueForKeyPath:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-mutableBytes" = {
	    NSMutableData = NSData;
	};
	"-mutableCopy" = {
	    NSObject = NSObject;
	};
	"-mutableCopyWithZone:" = {
	    "(NSMutableCopying)" = NSObject;
	};
	"-mutableSetValueForKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-mutableSetValueForKeyPath:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-mutableString" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-mutexDrop:" = {
	    "NSThread(GSLockInfo)" = NSThread;
	};
	"-mutexHold:" = {
	    "NSThread(GSLockInfo)" = NSThread;
	};
	"-mutexWait:" = {
	    "NSThread(GSLockInfo)" = NSThread;
	};
	"-name" = {
	    NSCondition = NSLock;
	    NSConditionLock = NSLock;
	    NSException = NSException;
	    NSHTTPCookie = NSHTTPCookie;
	    NSHost = NSHost;
	    NSLock = NSLock;
	    NSNetService = NSNetServices;
	    NSNotification = NSNotification;
	    NSRecursiveLock = NSLock;
	    NSThread = NSThread;
	    NSTimeZone = NSTimeZone;
	    NSURLQueryItem = NSURL;
	    NSXMLNode = NSXMLNode;
	};
	"-names" = {
	    NSHost = NSHost;
	};
	"-namespaceForPrefix:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-namespaces" = {
	    NSXMLElement = NSXMLElement;
	};
	"-nativeHandle" = {
	    NSFileHandle = NSFileHandle;
	};
	"-negativeFormat" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-negativeInfinitySymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-negativePrefix" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-negativeSuffix" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-netService:didAcceptConnectionWithInputStream:outputStream:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-netService:didNotPublish:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-netService:didNotResolve:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-netService:didUpdateTXTRecordData:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-netServiceBrowser:didFindDomain:moreComing:" = {
	    "NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	};
	"-netServiceBrowser:didFindService:moreComing:" = {
	    "NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	};
	"-netServiceBrowser:didNotSearch:" = {
	    "NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	};
	"-netServiceBrowser:didRemoveDomain:moreComing:" = {
	    "NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	};
	"-netServiceBrowser:didRemoveService:moreComing:" = {
	    "NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	};
	"-netServiceBrowserDidStopSearch:" = {
	    "NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	};
	"-netServiceBrowserWillSearch:" = {
	    "NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	};
	"-netServiceDidPublish:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-netServiceDidResolveAddress:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-netServiceDidStop:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-netServiceWillPublish:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-netServiceWillResolve:" = {
	    "NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	};
	"-nextDaylightSavingTimeTransition" = {
	    NSTimeZone = NSTimeZone;
	};
	"-nextDaylightSavingTimeTransitionAfterDate:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-nextNode" = {
	    NSXMLNode = NSXMLNode;
	};
	"-nextObject" = {
	    NSEnumerator = NSEnumerator;
	};
	"-nextSibling" = {
	    NSXMLNode = NSXMLNode;
	};
	"-nilSymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-nodesForXPath:error:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-nonretainedObjectValue" = {
	    NSValue = NSValue;
	};
	"-normalizeAdjacentTextNodesPreservingCDATA:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-notANumberSymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-notationDeclarationForName:" = {
	    NSXMLDTD = NSXMLDTD;
	};
	"-notationName" = {
	    NSXMLDTDNode = NSXMLDTDNode;
	};
	"-numberFromString:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-numberOfArguments" = {
	    NSMethodSignature = NSMethodSignature;
	};
	"-numberStyle" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-objCType" = {
	    NSDecimalNumber = NSDecimalNumber;
	    NSValue = NSValue;
	};
	"-object" = {
	    NSNotification = NSNotification;
	};
	"-objectAtIndex:" = {
	    NSArray = NSArray;
	};
	"-objectAtIndexedSubscript:" = {
	    NSArray = NSArray;
	};
	"-objectByApplyingXSLT:arguments:error:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-objectByApplyingXSLTAtURL:arguments:error:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-objectByApplyingXSLTString:arguments:error:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-objectEnumerator" = {
	    NSArray = NSArray;
	    NSDictionary = NSDictionary;
	    NSHashTable = NSHashTable;
	    NSMapTable = NSMapTable;
	    NSSet = NSSet;
	};
	"-objectForInfoDictionaryKey:" = {
	    NSBundle = NSBundle;
	};
	"-objectForKey:" = {
	    NSDictionary = NSDictionary;
	    NSMapTable = NSMapTable;
	    NSUserDefaults = NSUserDefaults;
	};
	"-objectForKeyedSubscript:" = {
	    NSDictionary = NSDictionary;
	};
	"-objectValue" = {
	    NSXMLNode = NSXMLNode;
	};
	"-objectZone" = {
	    NSCoder = NSCoder;
	    NSUnarchiver = NSArchiver;
	};
	"-objectsAtIndexes:" = {
	    NSArray = NSArray;
	};
	"-objectsForKeys:notFoundMarker:" = {
	    NSDictionary = NSDictionary;
	};
	"-objectsForXQuery:constants:error:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-objectsForXQuery:error:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-objectsPassingTest:" = {
	    NSSet = NSSet;
	};
	"-objectsWithOptions:passingTest:" = {
	    NSSet = NSSet;
	};
	"-observationInfo" = {
	    "NSObject(NSKeyValueObservingCustomization)" = NSKeyValueObserving;
	};
	"-observeValueForKeyPath:ofObject:change:context:" = {
	    "NSObject(NSKeyValueObserving)" = NSKeyValueObserving;
	};
	"-offsetInFile" = {
	    NSFileHandle = NSFileHandle;
	};
	"-open" = {
	    NSStream = NSStream;
	};
	"-operatingSystem" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-operatingSystemName" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-operatingSystemVersionString" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-outputFormat" = {
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-paddingCharacter" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-paddingPosition" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-paragraphRangeForRange:" = {
	    NSString = NSString;
	};
	"-parameterString" = {
	    NSURL = NSURL;
	};
	"-parent" = {
	    NSXMLNode = NSXMLNode;
	};
	"-parse" = {
	    NSXMLParser = NSXMLParser;
	};
	"-parser:didEndElement:namespaceURI:qualifiedName:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:didEndMappingPrefix:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:didStartElement:namespaceURI:qualifiedName:attributes:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:didStartMappingPrefix:toURI:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundCDATA:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundCharacters:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundComment:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundElementDeclarationWithName:model:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundExternalEntityDeclarationWithName:publicID:systemID:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundIgnorableWhitespace:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundInternalEntityDeclarationWithName:value:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundNotationDeclarationWithName:publicID:systemID:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundProcessingInstructionWithTarget:data:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:parseErrorOccurred:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:resolveExternalEntityName:systemID:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parser:validationErrorOccurred:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parserDidEndDocument:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parserDidStartDocument:" = {
	    "NSObject(NSXMLParserDelegateEventAdditions)" = NSXMLParser;
	};
	"-parserError" = {
	    NSXMLParser = NSXMLParser;
	};
	"-password" = {
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	    NSURLCredential = NSURLCredential;
	};
	"-path" = {
	    NSHTTPCookie = NSHTTPCookie;
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	};
	"-pathComponents" = {
	    NSString = NSString;
	    NSURL = NSURL;
	};
	"-pathContentOfSymbolicLinkAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-pathExtension" = {
	    NSString = NSString;
	    NSURL = NSURL;
	};
	"-pathForAuxiliaryExecutable:" = {
	    NSBundle = NSBundle;
	};
	"-pathForResource:ofType:" = {
	    NSBundle = NSBundle;
	};
	"-pathForResource:ofType:inDirectory:" = {
	    NSBundle = NSBundle;
	};
	"-pathForResource:ofType:inDirectory:forLocalization:" = {
	    NSBundle = NSBundle;
	};
	"-pathsForResourcesOfType:inDirectory:" = {
	    NSBundle = NSBundle;
	};
	"-pathsForResourcesOfType:inDirectory:forLocalization:" = {
	    NSBundle = NSBundle;
	};
	"-pathsMatchingExtensions:" = {
	    NSArray = NSArray;
	};
	"-perMillSymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-percentEncodedFragment" = {
	    NSURLComponents = NSURL;
	};
	"-percentEncodedHost" = {
	    NSURLComponents = NSURL;
	};
	"-percentEncodedPassword" = {
	    NSURLComponents = NSURL;
	};
	"-percentEncodedPath" = {
	    NSURLComponents = NSURL;
	};
	"-percentEncodedQuery" = {
	    NSURLComponents = NSURL;
	};
	"-percentEncodedQueryItems" = {
	    NSURLComponents = NSURL;
	};
	"-percentEncodedUser" = {
	    NSURLComponents = NSURL;
	};
	"-percentSymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-performActivityWithOptions:reason:usingBlock:" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-performExpiringActivityWithReason:usingBlock:" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-performSelector:" = {
	    "(NSObject)" = NSObject;
	};
	"-performSelector:onThread:withObject:waitUntilDone:" = {
	    "NSObject(NSThreadPerformAdditions)" = NSThread;
	};
	"-performSelector:onThread:withObject:waitUntilDone:modes:" = {
	    "NSObject(NSThreadPerformAdditions)" = NSThread;
	};
	"-performSelector:target:argument:order:modes:" = {
	    "NSRunLoop(OPENSTEP)" = NSRunLoop;
	};
	"-performSelector:withObject:" = {
	    "(NSObject)" = NSObject;
	};
	"-performSelector:withObject:afterDelay:" = {
	    "NSObject(TimedPerformers)" = NSObject;
	};
	"-performSelector:withObject:afterDelay:inModes:" = {
	    "NSObject(TimedPerformers)" = NSObject;
	};
	"-performSelector:withObject:withObject:" = {
	    "(NSObject)" = NSObject;
	};
	"-performSelectorInBackground:withObject:" = {
	    "NSObject(NSThreadPerformAdditions)" = NSThread;
	};
	"-performSelectorOnMainThread:withObject:waitUntilDone:" = {
	    "NSObject(NSThreadPerformAdditions)" = NSThread;
	};
	"-performSelectorOnMainThread:withObject:waitUntilDone:modes:" = {
	    "NSObject(NSThreadPerformAdditions)" = NSThread;
	};
	"-persistence" = {
	    NSURLCredential = NSURLCredential;
	};
	"-persistentDomainForName:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-persistentDomainNames" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-physicalMemory" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-plusSign" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-pointValue" = {
	    NSValue = NSValue;
	};
	"-pointerAtIndex:" = {
	    NSPointerArray = NSPointerArray;
	};
	"-pointerFunctions" = {
	    NSHashTable = NSHashTable;
	    NSPointerArray = NSPointerArray;
	};
	"-pointerValue" = {
	    NSValue = NSValue;
	};
	"-port" = {
	    NSNetService = NSNetServices;
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-portForName:" = {
	    NSMessagePortNameServer = NSPortNameServer;
	    NSPortNameServer = NSPortNameServer;
	};
	"-portForName:onHost:" = {
	    NSMessagePortNameServer = NSPortNameServer;
	    NSPortNameServer = NSPortNameServer;
	    NSSocketPortNameServer = NSPortNameServer;
	};
	"-portList" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-portNumber" = {
	    NSSocketPort = NSPort;
	};
	"-positiveFormat" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-positiveInfinitySymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-positivePrefix" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-positiveSuffix" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-postNotification:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	    NSNotificationCenter = NSNotification;
	};
	"-postNotificationName:object:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	    NSNotificationCenter = NSNotification;
	};
	"-postNotificationName:object:userInfo:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	    NSNotificationCenter = NSNotification;
	};
	"-postNotificationName:object:userInfo:deliverImmediately:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"-precomposedStringWithCanonicalMapping" = {
	    NSString = NSString;
	};
	"-precomposedStringWithCompatibilityMapping" = {
	    NSString = NSString;
	};
	"-preferredLocalizations" = {
	    NSBundle = NSBundle;
	};
	"-prefix" = {
	    NSXMLNode = NSXMLNode;
	};
	"-preflightAndReturnError:" = {
	    NSBundle = NSBundle;
	};
	"-prepareWithInvocationTarget:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-prependTransform:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-previousFailureCount" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"-previousNode" = {
	    NSXMLNode = NSXMLNode;
	};
	"-previousSibling" = {
	    NSXMLNode = NSXMLNode;
	};
	"-principalClass" = {
	    NSBundle = NSBundle;
	};
	"-privateFrameworksPath" = {
	    NSBundle = NSBundle;
	};
	"-privateFrameworksURL" = {
	    NSBundle = NSBundle;
	};
	"-processIdentifier" = {
	    NSProcessInfo = NSProcessInfo;
	    NSTask = NSTask;
	};
	"-processName" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-processorCount" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-properties" = {
	    NSHTTPCookie = NSHTTPCookie;
	};
	"-propertyForKey:" = {
	    NSStream = NSStream;
	    NSURL = NSURL;
	    NSURLHandle = NSURLHandle;
	};
	"-propertyForKeyIfAvailable:" = {
	    NSURLHandle = NSURLHandle;
	};
	"-propertyList" = {
	    NSString = NSString;
	};
	"-propertyListFromStringsFileFormat" = {
	    NSString = NSString;
	};
	"-proposedCredential" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"-protectionSpace" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"-protocol" = {
	    NSProtocolChecker = NSProtocolChecker;
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-protocolSpecificInformation" = {
	    NSNetService = NSNetServices;
	};
	"-proxyType" = {
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-publicID" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDTDNode = NSXMLDTDNode;
	    "NSXMLParser(NSXMLParserLocatorAdditions)" = NSXMLParser;
	};
	"-publish" = {
	    NSNetService = NSNetServices;
	};
	"-publishWithOptions:" = {
	    NSNetService = NSNetServices;
	};
	"-purge:" = {
	    "NSCountedSet(GNU_Uniquing)" = NSSet;
	};
	"-putBytes:ofLength:byHandle:" = {
	    "(GSLogDelegate)" = NSDebug;
	};
	"-quarterSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-query" = {
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	};
	"-queryItems" = {
	    NSURLComponents = NSURL;
	};
	"-raise" = {
	    NSException = NSException;
	};
	"-rangeOfCharacterFromSet:" = {
	    NSString = NSString;
	};
	"-rangeOfCharacterFromSet:options:" = {
	    NSString = NSString;
	};
	"-rangeOfCharacterFromSet:options:range:" = {
	    NSString = NSString;
	};
	"-rangeOfComposedCharacterSequenceAtIndex:" = {
	    NSString = NSString;
	};
	"-rangeOfComposedCharacterSequencesForRange:" = {
	    NSString = NSString;
	};
	"-rangeOfData:options:range:" = {
	    NSData = NSData;
	};
	"-rangeOfFragment" = {
	    NSURLComponents = NSURL;
	};
	"-rangeOfHost" = {
	    NSURLComponents = NSURL;
	};
	"-rangeOfPassword" = {
	    NSURLComponents = NSURL;
	};
	"-rangeOfPath" = {
	    NSURLComponents = NSURL;
	};
	"-rangeOfPort" = {
	    NSURLComponents = NSURL;
	};
	"-rangeOfQuery" = {
	    NSURLComponents = NSURL;
	};
	"-rangeOfScheme" = {
	    NSURLComponents = NSURL;
	};
	"-rangeOfString:" = {
	    NSString = NSString;
	};
	"-rangeOfString:options:" = {
	    NSString = NSString;
	};
	"-rangeOfString:options:range:" = {
	    NSString = NSString;
	};
	"-rangeOfString:options:range:locale:" = {
	    NSString = NSString;
	};
	"-rangeOfUser" = {
	    NSURLComponents = NSURL;
	};
	"-rangeValue" = {
	    NSValue = NSValue;
	};
	"-read:maxLength:" = {
	    NSInputStream = NSStream;
	};
	"-readDataInBackgroundAndNotifyLength:" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-readDataInBackgroundAndNotifyLength:forModes:" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-readDataOfLength:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-readDataToEndOfFile" = {
	    NSFileHandle = NSFileHandle;
	};
	"-readInBackgroundAndNotify" = {
	    NSFileHandle = NSFileHandle;
	};
	"-readInBackgroundAndNotifyForModes:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-readInProgress" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-readToEndOfFileInBackgroundAndNotify" = {
	    NSFileHandle = NSFileHandle;
	};
	"-readToEndOfFileInBackgroundAndNotifyForModes:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-realm" = {
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-reason" = {
	    NSException = NSException;
	};
	"-receivePort" = {
	    NSConnection = NSConnection;
	    NSPortMessage = NSPortMessage;
	};
	"-receivedEvent:type:extra:forMode:" = {
	    "(RunLoopEvents)" = NSRunLoop;
	};
	"-receivesCredentialSecurely" = {
	    NSURLProtectionSpace = NSURLProtectionSpace;
	};
	"-recoveryAttempter" = {
	    NSError = NSError;
	};
	"-rectValue" = {
	    NSValue = NSValue;
	};
	"-redo" = {
	    NSUndoManager = NSUndoManager;
	};
	"-redoActionName" = {
	    NSUndoManager = NSUndoManager;
	};
	"-redoMenuItemTitle" = {
	    NSUndoManager = NSUndoManager;
	};
	"-redoMenuTitleForUndoActionName:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-registerDefaults:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-registerName:" = {
	    NSConnection = NSConnection;
	};
	"-registerName:withNameServer:" = {
	    NSConnection = NSConnection;
	};
	"-registerPort:forName:" = {
	    NSPortNameServer = NSPortNameServer;
	    NSSocketPortNameServer = NSPortNameServer;
	};
	"-registerUndoWithTarget:selector:object:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-relativePath" = {
	    NSURL = NSURL;
	};
	"-relativeString" = {
	    NSURL = NSURL;
	};
	"-release" = {
	    "(NSObject)" = NSObject;
	    NSAutoreleasePool = NSAutoreleasePool;
	    NSProxy = NSProxy;
	};
	"-relinquishFunction" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-remoteObjects" = {
	    NSConnection = NSConnection;
	};
	"-removeAllActions" = {
	    NSUndoManager = NSUndoManager;
	};
	"-removeAllActionsWithTarget:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-removeAllCachedResponses" = {
	    NSURLCache = NSURLCache;
	};
	"-removeAllIndexes" = {
	    NSMutableIndexSet = NSIndexSet;
	};
	"-removeAllObjects" = {
	    NSHashTable = NSHashTable;
	    NSMapTable = NSMapTable;
	    NSMutableArray = NSArray;
	    NSMutableDictionary = NSDictionary;
	    NSMutableSet = NSSet;
	};
	"-removeAttribute:range:" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-removeAttributeForName:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-removeCachedResponseForDataTask:" = {
	    "NSURLCache(NSURLSessionTaskAdditions)" = NSURLCache;
	};
	"-removeCachedResponseForRequest:" = {
	    NSURLCache = NSURLCache;
	};
	"-removeCharactersInRange:" = {
	    NSMutableCharacterSet = NSCharacterSet;
	};
	"-removeCharactersInString:" = {
	    NSMutableCharacterSet = NSCharacterSet;
	};
	"-removeChildAtIndex:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDocument = NSXMLDocument;
	    NSXMLElement = NSXMLElement;
	};
	"-removeClient:" = {
	    NSURLHandle = NSURLHandle;
	};
	"-removeConnection:fromRunLoop:forMode:" = {
	    NSPort = NSPort;
	};
	"-removeCredential:forProtectionSpace:" = {
	    NSURLCredentialStorage = NSURLCredentialStorage;
	};
	"-removeEvent:type:forMode:all:" = {
	    "NSRunLoop(GNUstepExtensions)" = NSRunLoop;
	};
	"-removeFileAtPath:handler:" = {
	    NSFileManager = NSFileManager;
	};
	"-removeFromRunLoop:forMode:" = {
	    NSNetService = NSNetServices;
	    NSNetServiceBrowser = NSNetServices;
	    NSStream = NSStream;
	};
	"-removeIndex:" = {
	    NSMutableIndexSet = NSIndexSet;
	};
	"-removeIndexes:" = {
	    NSMutableIndexSet = NSIndexSet;
	};
	"-removeIndexesInRange:" = {
	    NSMutableIndexSet = NSIndexSet;
	};
	"-removeItemAtPath:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-removeItemAtURL:error:" = {
	    NSFileManager = NSFileManager;
	};
	"-removeLastObject" = {
	    NSMutableArray = NSArray;
	};
	"-removeNamespaceForPrefix:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-removeObject:" = {
	    NSHashTable = NSHashTable;
	    NSMutableArray = NSArray;
	    NSMutableSet = NSSet;
	};
	"-removeObject:inRange:" = {
	    NSMutableArray = NSArray;
	};
	"-removeObjectAtIndex:" = {
	    NSMutableArray = NSArray;
	};
	"-removeObjectForKey:" = {
	    NSMapTable = NSMapTable;
	    NSMutableDictionary = NSDictionary;
	    NSUserDefaults = NSUserDefaults;
	};
	"-removeObjectIdenticalTo:" = {
	    NSMutableArray = NSArray;
	};
	"-removeObjectIdenticalTo:inRange:" = {
	    NSMutableArray = NSArray;
	};
	"-removeObjectsAtIndexes:" = {
	    NSMutableArray = NSArray;
	};
	"-removeObjectsForKeys:" = {
	    NSMutableDictionary = NSDictionary;
	};
	"-removeObjectsFromIndices:numIndices:" = {
	    NSMutableArray = NSArray;
	};
	"-removeObjectsInArray:" = {
	    NSMutableArray = NSArray;
	};
	"-removeObjectsInRange:" = {
	    NSMutableArray = NSArray;
	};
	"-removeObserver:" = {
	    NSNotificationCenter = NSNotification;
	};
	"-removeObserver:forKeyPath:" = {
	    "NSObject(NSKeyValueObserverRegistration)" = NSKeyValueObserving;
	};
	"-removeObserver:fromObjectsAtIndexes:forKeyPath:" = {
	    "NSArray(NSKeyValueObserverRegistration)" = NSKeyValueObserving;
	};
	"-removeObserver:name:object:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	    NSNotificationCenter = NSNotification;
	};
	"-removePersistentDomainForName:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-removePointerAtIndex:" = {
	    NSPointerArray = NSPointerArray;
	};
	"-removePort:forMode:" = {
	    "NSRunLoop(OPENSTEP)" = NSRunLoop;
	};
	"-removePortForName:" = {
	    NSPortNameServer = NSPortNameServer;
	    NSSocketPortNameServer = NSPortNameServer;
	};
	"-removeRequestMode:" = {
	    NSConnection = NSConnection;
	};
	"-removeRunLoop:" = {
	    NSConnection = NSConnection;
	};
	"-removeSuiteNamed:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-removeVolatileDomainForName:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-replaceBytesInRange:withBytes:" = {
	    NSMutableData = NSData;
	};
	"-replaceBytesInRange:withBytes:length:" = {
	    NSMutableData = NSData;
	};
	"-replaceCharactersInRange:withAttributedString:" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-replaceCharactersInRange:withString:" = {
	    NSMutableAttributedString = NSAttributedString;
	    NSMutableString = NSString;
	};
	"-replaceChildAtIndex:withNode:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDocument = NSXMLDocument;
	    NSXMLElement = NSXMLElement;
	};
	"-replaceObject:withObject:" = {
	    NSArchiver = NSArchiver;
	    "NSKeyedUnarchiver(Internal)" = NSKeyedArchiver;
	    NSUnarchiver = NSArchiver;
	};
	"-replaceObjectAtIndex:withObject:" = {
	    NSMutableArray = NSArray;
	};
	"-replaceObjectsAtIndexes:withObjects:" = {
	    NSMutableArray = NSArray;
	};
	"-replaceObjectsInRange:withObjectsFromArray:" = {
	    NSMutableArray = NSArray;
	};
	"-replaceObjectsInRange:withObjectsFromArray:range:" = {
	    NSMutableArray = NSArray;
	};
	"-replaceOccurrencesOfString:withString:options:range:" = {
	    NSMutableString = NSString;
	};
	"-replacePointerAtIndex:withPointer:" = {
	    NSPointerArray = NSPointerArray;
	};
	"-replacementObjectForArchiver:" = {
	    NSObject = NSObject;
	};
	"-replacementObjectForCoder:" = {
	    NSObject = NSObject;
	};
	"-replacementObjectForKeyedArchiver:" = {
	    "NSObject(NSKeyedArchiverObjectSubstitution)" = NSKeyedArchiver;
	};
	"-replacementObjectForPortCoder:" = {
	    "NSObject(NSPortCoder)" = NSPortCoder;
	};
	"-replyTimeout" = {
	    NSConnection = NSConnection;
	};
	"-request" = {
	    NSURLDownload = NSURLDownload;
	    NSURLProtocol = NSURLProtocol;
	};
	"-requestModes" = {
	    NSConnection = NSConnection;
	};
	"-requestTimeout" = {
	    NSConnection = NSConnection;
	};
	"-requiresSecureCoding" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-reservedSpaceLength" = {
	    NSPort = NSPort;
	};
	"-resetArchiver" = {
	    "NSArchiver(GNUstep)" = NSArchiver;
	};
	"-resetBytesInRange:" = {
	    NSMutableData = NSData;
	};
	"-resetUnarchiverWithData:atIndex:" = {
	    "NSUnarchiver(GNUstep)" = NSArchiver;
	};
	"-resolve" = {
	    NSNetService = NSNetServices;
	};
	"-resolveNamespaceForName:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-resolvePrefixForNamespaceURI:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-resolveWithTimeout:" = {
	    NSNetService = NSNetServices;
	};
	"-resourceData" = {
	    NSURLHandle = NSURLHandle;
	};
	"-resourceDataUsingCache:" = {
	    NSURL = NSURL;
	};
	"-resourcePath" = {
	    NSBundle = NSBundle;
	};
	"-resourceSpecifier" = {
	    NSURL = NSURL;
	};
	"-resourceURL" = {
	    NSBundle = NSBundle;
	};
	"-respondsToSelector:" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	};
	"-response" = {
	    NSCachedURLResponse = NSURLCache;
	};
	"-resume" = {
	    NSTask = NSTask;
	};
	"-resumeData" = {
	    NSURLDownload = NSURLDownload;
	};
	"-retain" = {
	    "(NSObject)" = NSObject;
	    NSAutoreleasePool = NSAutoreleasePool;
	    NSProxy = NSProxy;
	};
	"-retainArguments" = {
	    NSInvocation = NSInvocation;
	};
	"-retainArgumentsIncludingTarget:" = {
	    NSInvocation = NSInvocation;
	};
	"-retainCount" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	};
	"-reverseObjectEnumerator" = {
	    NSArray = NSArray;
	};
	"-reverseTransformedValue:" = {
	    NSValueTransformer = NSValueTransformer;
	};
	"-rootDocument" = {
	    NSXMLNode = NSXMLNode;
	};
	"-rootElement" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-rootObject" = {
	    NSConnection = NSConnection;
	};
	"-rootProxy" = {
	    NSConnection = NSConnection;
	};
	"-rotateByDegrees:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-rotateByRadians:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-roundingBehavior" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-roundingIncrement" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-roundingMode" = {
	    "(NSDecimalNumberBehaviors)" = NSDecimalNumber;
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-run" = {
	    NSRunLoop = NSRunLoop;
	};
	"-runInNewThread" = {
	    NSConnection = NSConnection;
	};
	"-runLoopModes" = {
	    NSUndoManager = NSUndoManager;
	};
	"-runLoopShouldBlock:" = {
	    "NSObject(RunLoopEvents)" = NSRunLoop;
	};
	"-runMode:beforeDate:" = {
	    NSRunLoop = NSRunLoop;
	};
	"-runUntilDate:" = {
	    NSRunLoop = NSRunLoop;
	};
	"-scale" = {
	    "(NSDecimalNumberBehaviors)" = NSDecimalNumber;
	};
	"-scaleBy:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-scaleXBy:yBy:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-scanCharactersFromSet:intoString:" = {
	    NSScanner = NSScanner;
	};
	"-scanDecimal:" = {
	    NSScanner = NSScanner;
	};
	"-scanDouble:" = {
	    NSScanner = NSScanner;
	};
	"-scanFloat:" = {
	    NSScanner = NSScanner;
	};
	"-scanHexDouble:" = {
	    NSScanner = NSScanner;
	};
	"-scanHexFloat:" = {
	    NSScanner = NSScanner;
	};
	"-scanHexInt:" = {
	    NSScanner = NSScanner;
	};
	"-scanHexLongLong:" = {
	    NSScanner = NSScanner;
	};
	"-scanInt:" = {
	    NSScanner = NSScanner;
	};
	"-scanInteger:" = {
	    NSScanner = NSScanner;
	};
	"-scanLocation" = {
	    NSScanner = NSScanner;
	};
	"-scanLongLong:" = {
	    NSScanner = NSScanner;
	};
	"-scanRadixUnsignedInt:" = {
	    NSScanner = NSScanner;
	};
	"-scanRadixUnsignedLongLong:" = {
	    NSScanner = NSScanner;
	};
	"-scanString:intoString:" = {
	    NSScanner = NSScanner;
	};
	"-scanUpToCharactersFromSet:intoString:" = {
	    NSScanner = NSScanner;
	};
	"-scanUpToString:intoString:" = {
	    NSScanner = NSScanner;
	};
	"-scheduleInRunLoop:forMode:" = {
	    NSNetService = NSNetServices;
	    NSNetServiceBrowser = NSNetServices;
	    NSStream = NSStream;
	    NSURLConnection = NSURLConnection;
	};
	"-scheme" = {
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	};
	"-searchForAllDomains" = {
	    NSNetServiceBrowser = NSNetServices;
	};
	"-searchForBrowsableDomains" = {
	    NSNetServiceBrowser = NSNetServices;
	};
	"-searchForRegistrationDomains" = {
	    NSNetServiceBrowser = NSNetServices;
	};
	"-searchForServicesOfType:inDomain:" = {
	    NSNetServiceBrowser = NSNetServices;
	};
	"-searchList" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-secondOfMinute" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-secondaryGroupingSize" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-secondsFromGMT" = {
	    NSTimeZone = NSTimeZone;
	};
	"-secondsFromGMTForDate:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-seekToEndOfFile" = {
	    NSFileHandle = NSFileHandle;
	};
	"-seekToFileOffset:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-selector" = {
	    NSInvocation = NSInvocation;
	};
	"-self" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	};
	"-sendBeforeDate:" = {
	    NSPortMessage = NSPortMessage;
	};
	"-sendBeforeDate:components:from:reserved:" = {
	    NSPort = NSPort;
	};
	"-sendBeforeDate:msgid:components:from:reserved:" = {
	    NSPort = NSPort;
	};
	"-sendPort" = {
	    NSConnection = NSConnection;
	    NSPortMessage = NSPortMessage;
	};
	"-sender" = {
	    NSURLAuthenticationChallenge = NSURLAuthenticationChallenge;
	};
	"-sendsToSuper" = {
	    "NSInvocation(GNUstep)" = NSInvocation;
	};
	"-serializeAlignedBytesLength:" = {
	    NSMutableData = NSData;
	};
	"-serializeDataAt:ofObjCType:context:" = {
	    NSMutableData = NSData;
	};
	"-serializeHeaderAt:version:classes:objects:pointers:" = {
	    "NSArchiver(GNUstep)" = NSArchiver;
	};
	"-serializeInt:" = {
	    NSMutableData = NSData;
	};
	"-serializeInt:atIndex:" = {
	    NSMutableData = NSData;
	};
	"-serializeInts:count:" = {
	    NSMutableData = NSData;
	};
	"-serializeInts:count:atIndex:" = {
	    NSMutableData = NSData;
	};
	"-serializeObjectAt:ofObjCType:intoData:" = {
	    "(NSObjCTypeSerializationCallBack)" = NSSerialization;
	};
	"-serializeTypeTag:" = {
	    "NSMutableData(GNUstepExtensions)" = NSData;
	};
	"-serializeTypeTag:andCrossRef:" = {
	    "NSMutableData(GNUstepExtensions)" = NSData;
	};
	"-setAMSymbol:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setAcquireFunction:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-setActionName:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-setAllHTTPHeaderFields:" = {
	    "NSMutableURLRequest(NSMutableHTTPURLRequest)" = NSURLRequest;
	};
	"-setAllowsFloats:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setAlwaysShowsDecimalSeparator:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setArgument:atIndex:" = {
	    NSInvocation = NSInvocation;
	};
	"-setArguments:" = {
	    NSTask = NSTask;
	};
	"-setArray:" = {
	    NSMutableArray = NSArray;
	};
	"-setAttributedString:" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-setAttributedStringForNil:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setAttributedStringForNotANumber:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setAttributedStringForZero:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setAttributes:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-setAttributes:range:" = {
	    NSMutableAttributedString = NSAttributedString;
	};
	"-setAttributesAsDictionary:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-setAttributesWithDictionary:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-setBool:forKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-setBundleVersion:" = {
	    NSBundle = NSBundle;
	};
	"-setByAddingObject:" = {
	    NSSet = NSSet;
	};
	"-setByAddingObjectsFromArray:" = {
	    NSSet = NSSet;
	};
	"-setByAddingObjectsFromSet:" = {
	    NSSet = NSSet;
	};
	"-setCachePolicy:" = {
	    NSMutableURLRequest = NSURLRequest;
	};
	"-setCalendar:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setCalendarFormat:" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-setCapacity:" = {
	    "NSMutableData(GNUstepExtensions)" = NSData;
	};
	"-setCaseSensitive:" = {
	    NSScanner = NSScanner;
	};
	"-setCharacterEncoding:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-setCharactersToBeSkipped:" = {
	    NSScanner = NSScanner;
	};
	"-setChildren:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDocument = NSXMLDocument;
	    NSXMLElement = NSXMLElement;
	};
	"-setClass:forClassName:" = {
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-setClassName:forClass:" = {
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-setCookie:" = {
	    NSHTTPCookieStorage = NSHTTPCookieStorage;
	};
	"-setCookieAcceptPolicy:" = {
	    NSHTTPCookieStorage = NSHTTPCookieStorage;
	};
	"-setCookies:forURL:mainDocumentURL:" = {
	    NSHTTPCookieStorage = NSHTTPCookieStorage;
	};
	"-setCount:" = {
	    NSPointerArray = NSPointerArray;
	};
	"-setCredential:forProtectionSpace:" = {
	    NSURLCredentialStorage = NSURLCredentialStorage;
	};
	"-setCurrencyCode:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setCurrencyDecimalSeparator:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setCurrencyGroupingSeparator:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setCurrencySymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setCurrentDirectoryPath:" = {
	    NSTask = NSTask;
	};
	"-setDTD:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-setDTDKind:" = {
	    NSXMLDTDNode = NSXMLDTDNode;
	};
	"-setData:" = {
	    NSMutableData = NSData;
	};
	"-setDateFormat:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setDateStyle:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setDebug:" = {
	    "NSMutableURLRequest(GNUstep)" = NSURLRequest;
	    NSURLHandle = NSURLHandle;
	};
	"-setDebugLogDelegate:" = {
	    "NSMutableURLRequest(GNUstep)" = NSURLRequest;
	};
	"-setDecimalSeparator:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setDefaultCredential:forProtectionSpace:" = {
	    NSURLCredentialStorage = NSURLCredentialStorage;
	};
	"-setDefaultDate:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setDelegate:" = {
	    NSConnection = NSConnection;
	    NSFileManager = NSFileManager;
	    NSKeyedArchiver = NSKeyedArchiver;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	    NSNetService = NSNetServices;
	    NSNetServiceBrowser = NSNetServices;
	    NSPort = NSPort;
	    NSStream = NSStream;
	    NSXMLParser = NSXMLParser;
	};
	"-setDeletesFileUponFailure:" = {
	    NSURLDownload = NSURLDownload;
	};
	"-setDescriptionFunction:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-setDestination:allowOverwrite:" = {
	    NSURLDownload = NSURLDownload;
	};
	"-setDictionary:" = {
	    NSMutableDictionary = NSDictionary;
	};
	"-setDiskCapacity:" = {
	    NSURLCache = NSURLCache;
	};
	"-setDocumentContentKind:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-setDoesRelativeDateFormatting:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setDouble:forKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-setEnvironment:" = {
	    NSTask = NSTask;
	};
	"-setEraSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setExponentSymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setFireDate:" = {
	    NSTimer = NSTimer;
	};
	"-setFloat:forKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-setFormat:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setFormatWidth:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setFormatterBehavior:" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setFragment:" = {
	    NSURLComponents = NSURL;
	};
	"-setGeneratesCalendarDates:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setGeneratesDecimalNumbers:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setGregorianStartDate:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setGroupingSeparator:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setGroupingSize:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setGroupsByEvent:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-setHTTPBody:" = {
	    "NSMutableURLRequest(NSMutableHTTPURLRequest)" = NSURLRequest;
	};
	"-setHTTPBodyStream:" = {
	    "NSMutableURLRequest(NSMutableHTTPURLRequest)" = NSURLRequest;
	};
	"-setHTTPMethod:" = {
	    "NSMutableURLRequest(NSMutableHTTPURLRequest)" = NSURLRequest;
	};
	"-setHTTPShouldHandleCookies:" = {
	    "NSMutableURLRequest(NSMutableHTTPURLRequest)" = NSURLRequest;
	};
	"-setHasThousandSeparators:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setHashFunction:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-setHost:" = {
	    NSURLComponents = NSURL;
	};
	"-setIndependentConversationQueueing:" = {
	    NSConnection = NSConnection;
	};
	"-setInteger:forKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-setInternationalCurrencySymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setIsEqualFunction:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-setLaunchPath:" = {
	    NSTask = NSTask;
	};
	"-setLength:" = {
	    NSMutableData = NSData;
	};
	"-setLenient:" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setLevelsOfUndo:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-setLocale:" = {
	    NSDateFormatter = NSDateFormatter;
	    NSNumberFormatter = NSNumberFormatter;
	    NSScanner = NSScanner;
	};
	"-setLocalizesFormat:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setLogFile:" = {
	    "NSProcessInfo(GNUstep)" = NSProcessInfo;
	};
	"-setLongEraSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setMIMEType:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-setMainDocumentURL:" = {
	    NSMutableURLRequest = NSURLRequest;
	};
	"-setMaximum:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMaximumFractionDigits:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMaximumIntegerDigits:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMaximumSignificantDigits:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMemoryCapacity:" = {
	    NSURLCache = NSURLCache;
	};
	"-setMinimum:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMinimumFractionDigits:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMinimumIntegerDigits:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMinimumSignificantDigits:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMinusSign:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setMonthSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setMsgid:" = {
	    NSPortMessage = NSPortMessage;
	};
	"-setMultiplier:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setName:" = {
	    NSCondition = NSLock;
	    NSConditionLock = NSLock;
	    NSLock = NSLock;
	    NSRecursiveLock = NSLock;
	    NSThread = NSThread;
	    NSXMLNode = NSXMLNode;
	};
	"-setNamespaces:" = {
	    NSXMLElement = NSXMLElement;
	};
	"-setNegativeFormat:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setNegativeInfinitySymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setNegativePrefix:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setNegativeSuffix:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setNilSymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setNilValueForKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-setNotANumberSymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setNotationName:" = {
	    NSXMLDTDNode = NSXMLDTDNode;
	};
	"-setNumberStyle:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setObject:atIndexedSubscript:" = {
	    NSMutableArray = NSArray;
	};
	"-setObject:forKey:" = {
	    NSMapTable = NSMapTable;
	    NSMutableDictionary = NSDictionary;
	    NSUserDefaults = NSUserDefaults;
	};
	"-setObject:forKeyedSubscript:" = {
	    NSMutableDictionary = NSDictionary;
	};
	"-setObjectValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-setObjectZone:" = {
	    NSCoder = NSCoder;
	    NSUnarchiver = NSArchiver;
	};
	"-setObservationInfo:" = {
	    "NSObject(NSKeyValueObservingCustomization)" = NSKeyValueObserving;
	};
	"-setOutputFormat:" = {
	    NSKeyedArchiver = NSKeyedArchiver;
	};
	"-setPMSymbol:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setPaddingCharacter:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPaddingPosition:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPartialStringValidationEnabled:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPassword:" = {
	    NSURLComponents = NSURL;
	};
	"-setPath:" = {
	    NSURLComponents = NSURL;
	};
	"-setPerMillSymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPercentEncodedFragment:" = {
	    NSURLComponents = NSURL;
	};
	"-setPercentEncodedHost:" = {
	    NSURLComponents = NSURL;
	};
	"-setPercentEncodedPassword:" = {
	    NSURLComponents = NSURL;
	};
	"-setPercentEncodedPath:" = {
	    NSURLComponents = NSURL;
	};
	"-setPercentEncodedQuery:" = {
	    NSURLComponents = NSURL;
	};
	"-setPercentEncodedQueryItems:" = {
	    NSURLComponents = NSURL;
	};
	"-setPercentEncodedUser:" = {
	    NSURLComponents = NSURL;
	};
	"-setPercentSymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPersistentDomain:forName:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-setPlusSign:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPort:" = {
	    NSURLComponents = NSURL;
	};
	"-setPositiveFormat:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPositiveInfinitySymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPositivePrefix:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setPositiveSuffix:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setProcessName:" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-setProperty:forKey:" = {
	    NSStream = NSStream;
	    NSURL = NSURL;
	};
	"-setProtocolForProxy:" = {
	    NSDistantObject = NSDistantObject;
	};
	"-setProtocolSpecificInformation:" = {
	    NSNetService = NSNetServices;
	};
	"-setPublicID:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDTDNode = NSXMLDTDNode;
	};
	"-setQuarterSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setQuery:" = {
	    NSURLComponents = NSURL;
	};
	"-setQueryItems:" = {
	    NSURLComponents = NSURL;
	};
	"-setRelinquishFunction:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-setReplyTimeout:" = {
	    NSConnection = NSConnection;
	};
	"-setRepresentation" = {
	    NSHashTable = NSHashTable;
	};
	"-setRequestMode:" = {
	    NSConnection = NSConnection;
	};
	"-setRequestTimeout:" = {
	    NSConnection = NSConnection;
	};
	"-setRequiresSecureCoding:" = {
	    NSCoder = NSCoder;
	    NSKeyedArchiver = NSKeyedArchiver;
	    NSKeyedUnarchiver = NSKeyedArchiver;
	};
	"-setResourceData:" = {
	    NSURL = NSURL;
	};
	"-setReturnAll:" = {
	    NSURLHandle = NSURLHandle;
	};
	"-setReturnValue:" = {
	    NSInvocation = NSInvocation;
	};
	"-setRootElement:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-setRootObject:" = {
	    NSConnection = NSConnection;
	};
	"-setRoundingBehavior:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setRoundingIncrement:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setRoundingMode:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setRunLoopModes:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-setScanLocation:" = {
	    NSScanner = NSScanner;
	};
	"-setScheme:" = {
	    NSURLComponents = NSURL;
	};
	"-setSearchList:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-setSecondaryGroupingSize:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setSelector:" = {
	    NSInvocation = NSInvocation;
	};
	"-setSendsToSuper:" = {
	    "NSInvocation(GNUstep)" = NSInvocation;
	};
	"-setSet:" = {
	    NSMutableSet = NSSet;
	};
	"-setShortMonthSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setShortQuarterSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setShortStandaloneMonthSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setShortStandaloneQuarterSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setShortStandaloneWeekdaySymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setShortWeekdaySymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setShouldProcessNamespaces:" = {
	    NSXMLParser = NSXMLParser;
	};
	"-setShouldReportNamespacePrefixes:" = {
	    NSXMLParser = NSXMLParser;
	};
	"-setShouldResolveExternalEntities:" = {
	    NSXMLParser = NSXMLParser;
	};
	"-setSizeFunction:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-setStackSize:" = {
	    NSThread = NSThread;
	};
	"-setStandalone:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-setStandaloneMonthSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setStandaloneQuarterSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setStandaloneWeekdaySymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setStandardError:" = {
	    NSTask = NSTask;
	};
	"-setStandardInput:" = {
	    NSTask = NSTask;
	};
	"-setStandardOutput:" = {
	    NSTask = NSTask;
	};
	"-setString:" = {
	    NSMutableString = NSString;
	    NSURLComponents = NSURL;
	};
	"-setStringValue:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-setStringValue:resolvingEntities:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-setSuspended:" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"-setSystemID:" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDTDNode = NSXMLDTDNode;
	};
	"-setTXTRecordData:" = {
	    NSNetService = NSNetServices;
	};
	"-setTarget:" = {
	    NSInvocation = NSInvocation;
	};
	"-setTextAttributesForNegativeInfinity:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setTextAttributesForNegativeValues:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setTextAttributesForNil:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setTextAttributesForNotANumber:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setTextAttributesForPositiveInfinity:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setTextAttributesForPositiveValues:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setTextAttributesForZero:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setThousandSeparator:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setTimeStyle:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setTimeZone:" = {
	    NSCalendarDate = NSCalendarDate;
	    NSDateFormatter = NSDateFormatter;
	};
	"-setTimeoutInterval:" = {
	    NSMutableURLRequest = NSURLRequest;
	};
	"-setTransformStruct:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-setTwoDigitStartDate:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setURI:" = {
	    NSXMLNode = NSXMLNode;
	};
	"-setURL:" = {
	    NSMutableURLRequest = NSURLRequest;
	    NSURLComponents = NSURL;
	    NSURLHandle = NSURLHandle;
	};
	"-setUser:" = {
	    NSURLComponents = NSURL;
	};
	"-setUsesGroupingSeparator:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setUsesSignificantDigits:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-setUsesStrongWriteBarrier:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-setUsesWeakReadAndWriteBarriers:" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-setValue:forHTTPHeaderField:" = {
	    "NSMutableURLRequest(NSMutableHTTPURLRequest)" = NSURLRequest;
	};
	"-setValue:forKey:" = {
	    NSArray = NSArray;
	    NSMutableDictionary = NSDictionary;
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-setValue:forKeyPath:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-setValue:forUndefinedKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-setValuesForKeysWithDictionary:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-setVersion:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-setVeryShortMonthSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setVeryShortStandaloneMonthSymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setVeryShortStandaloneWeekdaySymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setVeryShortWeekdaySymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setVolatileDomain:forName:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-setWeekdaySymbols:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-setZeroSymbol:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-shiftIndexesStartingAtIndex:by:" = {
	    NSMutableIndexSet = NSIndexSet;
	};
	"-shmID" = {
	    "NSMutableData(GNUstepExtensions)" = NSData;
	};
	"-shortMonthSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-shortQuarterSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-shortStandaloneMonthSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-shortStandaloneQuarterSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-shortStandaloneWeekdaySymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-shortValue" = {
	    NSNumber = NSValue;
	};
	"-shortWeekdaySymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-shouldProcessNamespaces" = {
	    NSXMLParser = NSXMLParser;
	};
	"-shouldReportNamespacePrefixes" = {
	    NSXMLParser = NSXMLParser;
	};
	"-shouldResolveExternalEntities" = {
	    NSXMLParser = NSXMLParser;
	};
	"-signal" = {
	    NSCondition = NSLock;
	};
	"-sizeFunction" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-sizeValue" = {
	    NSValue = NSValue;
	};
	"-skipDescendents" = {
	    NSDirectoryEnumerator = NSFileManager;
	};
	"-smallestEncoding" = {
	    NSString = NSString;
	};
	"-socketAddress" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-socketLocalAddress" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-socketLocalService" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-socketProtocol" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-socketService" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-sortUsingComparator:" = {
	    NSMutableArray = NSArray;
	};
	"-sortUsingFunction:context:" = {
	    NSMutableArray = NSArray;
	};
	"-sortUsingSelector:" = {
	    NSMutableArray = NSArray;
	};
	"-sortWithOptions:usingComparator:" = {
	    NSMutableArray = NSArray;
	};
	"-sortedArrayHint" = {
	    NSArray = NSArray;
	};
	"-sortedArrayUsingComparator:" = {
	    NSArray = NSArray;
	};
	"-sortedArrayUsingFunction:context:" = {
	    NSArray = NSArray;
	};
	"-sortedArrayUsingFunction:context:hint:" = {
	    NSArray = NSArray;
	};
	"-sortedArrayUsingSelector:" = {
	    NSArray = NSArray;
	};
	"-sortedArrayWithOptions:usingComparator:" = {
	    NSArray = NSArray;
	};
	"-sslAccept" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"-sslConnect" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"-sslDisconnect" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"-sslHandshakeEstablished:outgoing:" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"-sslIssuer" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"-sslOwner" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"-sslSetCertificate:privateKey:PEMpasswd:" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"-sslSetOptions:" = {
	    "NSFileHandle(GNUstepTLS)" = NSFileHandle;
	};
	"-stackSize" = {
	    NSThread = NSThread;
	};
	"-standaloneMonthSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-standaloneQuarterSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-standaloneWeekdaySymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-standardError" = {
	    NSTask = NSTask;
	};
	"-standardInput" = {
	    NSTask = NSTask;
	};
	"-standardOutput" = {
	    NSTask = NSTask;
	};
	"-standardizedURL" = {
	    NSURL = NSURL;
	};
	"-start" = {
	    NSThread = NSThread;
	    NSURLConnection = NSURLConnection;
	};
	"-startLoading" = {
	    "NSURLProtocol(Subclassing)" = NSURLProtocol;
	};
	"-startMonitoring" = {
	    NSNetService = NSNetServices;
	};
	"-statistics" = {
	    NSConnection = NSConnection;
	};
	"-status" = {
	    NSURLHandle = NSURLHandle;
	};
	"-statusCode" = {
	    NSHTTPURLResponse = NSURLResponse;
	};
	"-stop" = {
	    NSNetService = NSNetServices;
	    NSNetServiceBrowser = NSNetServices;
	};
	"-stopLoading" = {
	    "NSURLProtocol(Subclassing)" = NSURLProtocol;
	};
	"-stopMonitoring" = {
	    NSNetService = NSNetServices;
	};
	"-storagePolicy" = {
	    NSCachedURLResponse = NSURLCache;
	};
	"-storeCachedResponse:forDataTask:" = {
	    "NSURLCache(NSURLSessionTaskAdditions)" = NSURLCache;
	};
	"-storeCachedResponse:forRequest:" = {
	    NSURLCache = NSURLCache;
	};
	"-storedValueForKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-stream:handleEvent:" = {
	    "(NSStreamDelegate)" = NSStream;
	    "NSObject(NSStreamDelegate)" = NSStream;
	};
	"-streamError" = {
	    NSStream = NSStream;
	};
	"-streamStatus" = {
	    NSStream = NSStream;
	};
	"-string" = {
	    NSAttributedString = NSAttributedString;
	    NSScanner = NSScanner;
	    NSURLComponents = NSURL;
	};
	"-stringArrayForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-stringByAbbreviatingWithTildeInPath" = {
	    NSString = NSString;
	};
	"-stringByAddingPercentEncodingWithAllowedCharacters:" = {
	    NSString = NSString;
	};
	"-stringByAddingPercentEscapesUsingEncoding:" = {
	    NSString = NSString;
	};
	"-stringByAppendingFormat:,..." = {
	    NSString = NSString;
	};
	"-stringByAppendingPathComponent:" = {
	    NSString = NSString;
	};
	"-stringByAppendingPathExtension:" = {
	    NSString = NSString;
	};
	"-stringByAppendingString:" = {
	    NSString = NSString;
	};
	"-stringByDeletingLastPathComponent" = {
	    NSString = NSString;
	};
	"-stringByDeletingPathExtension" = {
	    NSString = NSString;
	};
	"-stringByExpandingTildeInPath" = {
	    NSString = NSString;
	};
	"-stringByPaddingToLength:withString:startingAtIndex:" = {
	    NSString = NSString;
	};
	"-stringByRemovingPercentEncoding" = {
	    NSString = NSString;
	};
	"-stringByReplacingCharactersInRange:withString:" = {
	    NSString = NSString;
	};
	"-stringByReplacingOccurrencesOfString:withString:" = {
	    NSString = NSString;
	};
	"-stringByReplacingOccurrencesOfString:withString:options:range:" = {
	    NSString = NSString;
	};
	"-stringByReplacingPercentEscapesUsingEncoding:" = {
	    NSString = NSString;
	};
	"-stringByResolvingSymlinksInPath" = {
	    NSString = NSString;
	};
	"-stringByStandardizingPath" = {
	    NSString = NSString;
	};
	"-stringByTrimmingCharactersInSet:" = {
	    NSString = NSString;
	};
	"-stringForKey:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-stringForObjectValue:" = {
	    NSFormatter = NSFormatter;
	};
	"-stringFromDate:" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-stringFromNumber:" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-stringValue" = {
	    NSNumber = NSValue;
	    NSXMLNode = NSXMLNode;
	};
	"-stringWithFileSystemRepresentation:length:" = {
	    NSFileManager = NSFileManager;
	};
	"-stringsByAppendingPaths:" = {
	    NSString = NSString;
	};
	"-subarrayWithRange:" = {
	    NSArray = NSArray;
	};
	"-subdataWithRange:" = {
	    NSData = NSData;
	};
	"-subpathsAtPath:" = {
	    NSFileManager = NSFileManager;
	};
	"-substringFromIndex:" = {
	    NSString = NSString;
	};
	"-substringToIndex:" = {
	    NSString = NSString;
	};
	"-substringWithRange:" = {
	    NSString = NSString;
	};
	"-suggestedFilename" = {
	    NSURLResponse = NSURLResponse;
	};
	"-superclass" = {
	    "(NSObject)" = NSObject;
	    NSObject = NSObject;
	    NSProxy = NSProxy;
	};
	"-suspend" = {
	    NSTask = NSTask;
	};
	"-suspended" = {
	    NSDistributedNotificationCenter = NSDistributedNotificationCenter;
	};
	"-synchronize" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-synchronizeFile" = {
	    NSFileHandle = NSFileHandle;
	};
	"-systemID" = {
	    NSXMLDTD = NSXMLDTD;
	    NSXMLDTDNode = NSXMLDTDNode;
	    "NSXMLParser(NSXMLParserLocatorAdditions)" = NSXMLParser;
	};
	"-systemUptime" = {
	    NSProcessInfo = NSProcessInfo;
	};
	"-systemVersion" = {
	    NSCoder = NSCoder;
	    NSUnarchiver = NSArchiver;
	};
	"-takeStoredValue:forKey:" = {
	    NSMutableDictionary = NSDictionary;
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-takeStoredValuesFromDictionary:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-takeValue:forKey:" = {
	    NSMutableDictionary = NSDictionary;
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-takeValue:forKeyPath:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-takeValuesFromDictionary:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-target" = {
	    NSInvocation = NSInvocation;
	    NSProtocolChecker = NSProtocolChecker;
	};
	"-targetRetained" = {
	    NSInvocation = NSInvocation;
	};
	"-task" = {
	    NSURLProtocol = NSURLProtocol;
	};
	"-terminate" = {
	    NSTask = NSTask;
	};
	"-terminationReason" = {
	    NSTask = NSTask;
	};
	"-terminationStatus" = {
	    NSTask = NSTask;
	};
	"-textAttributesForNegativeInfinity" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-textAttributesForNegativeValues" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-textAttributesForNil" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-textAttributesForNotANumber" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-textAttributesForPositiveInfinity" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-textAttributesForPositiveValues" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-textAttributesForZero" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-textEncodingName" = {
	    NSURLResponse = NSURLResponse;
	};
	"-thousandSeparator" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-threadDictionary" = {
	    NSThread = NSThread;
	};
	"-timeInterval" = {
	    NSTimer = NSTimer;
	};
	"-timeIntervalSince1970" = {
	    NSDate = NSDate;
	};
	"-timeIntervalSinceDate:" = {
	    NSDate = NSDate;
	};
	"-timeIntervalSinceNow" = {
	    NSDate = NSDate;
	};
	"-timeIntervalSinceReferenceDate" = {
	    NSDate = NSDate;
	};
	"-timeStyle" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-timeZone" = {
	    NSCalendarDate = NSCalendarDate;
	    NSDateFormatter = NSDateFormatter;
	};
	"-timeZoneAbbreviation" = {
	    NSTimeZoneDetail = NSTimeZone;
	};
	"-timeZoneDetail" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-timeZoneDetailArray" = {
	    NSTimeZone = NSTimeZone;
	};
	"-timeZoneDetailForDate:" = {
	    NSTimeZone = NSTimeZone;
	};
	"-timeZoneName" = {
	    NSTimeZone = NSTimeZone;
	};
	"-timeZoneSecondsFromGMT" = {
	    NSTimeZoneDetail = NSTimeZone;
	};
	"-timeoutInterval" = {
	    NSURLRequest = NSURLRequest;
	};
	"-toManyRelationshipKeys" = {
	    NSClassDescription = NSClassDescription;
	    "NSObject(NSClassDescriptionPrimitives)" = NSClassDescription;
	};
	"-toOneRelationshipKeys" = {
	    NSClassDescription = NSClassDescription;
	    "NSObject(NSClassDescriptionPrimitives)" = NSClassDescription;
	};
	"-transformPoint:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-transformSize:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-transformStruct" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-transformedValue:" = {
	    NSValueTransformer = NSValueTransformer;
	};
	"-translateXBy:yBy:" = {
	    NSAffineTransform = NSAffineTransform;
	};
	"-truncateFileAtOffset:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-tryLock" = {
	    NSConditionLock = NSLock;
	    NSDistributedLock = NSDistributedLock;
	    NSLock = NSLock;
	    NSRecursiveLock = NSLock;
	};
	"-tryLockWhenCondition:" = {
	    NSConditionLock = NSLock;
	};
	"-twoDigitStartDate" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-type" = {
	    NSNetService = NSNetServices;
	};
	"-unableToSetNilForKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-unarchiver:cannotDecodeObjectOfClassName:originalClasses:" = {
	    "NSObject(NSKeyedUnarchiverDelegate)" = NSKeyedArchiver;
	};
	"-unarchiver:didDecodeObject:" = {
	    "NSObject(NSKeyedUnarchiverDelegate)" = NSKeyedArchiver;
	};
	"-unarchiver:willReplaceObject:withObject:" = {
	    "NSObject(NSKeyedUnarchiverDelegate)" = NSKeyedArchiver;
	};
	"-unarchiverDidFinish:" = {
	    "NSObject(NSKeyedUnarchiverDelegate)" = NSKeyedArchiver;
	};
	"-unarchiverWillFinish:" = {
	    "NSObject(NSKeyedUnarchiverDelegate)" = NSKeyedArchiver;
	};
	"-undo" = {
	    NSUndoManager = NSUndoManager;
	};
	"-undoActionName" = {
	    NSUndoManager = NSUndoManager;
	};
	"-undoMenuItemTitle" = {
	    NSUndoManager = NSUndoManager;
	};
	"-undoMenuTitleForUndoActionName:" = {
	    NSUndoManager = NSUndoManager;
	};
	"-undoNestedGroup" = {
	    NSUndoManager = NSUndoManager;
	};
	"-unionHashTable:" = {
	    NSHashTable = NSHashTable;
	};
	"-unionSet:" = {
	    NSMutableSet = NSSet;
	};
	"-unique:" = {
	    "NSCountedSet(GNU_Uniquing)" = NSSet;
	};
	"-unload" = {
	    NSBundle = NSBundle;
	};
	"-unlock" = {
	    "(NSLocking)" = NSLock;
	    NSConditionLock = NSLock;
	    NSDistributedLock = NSDistributedLock;
	    NSLock = NSLock;
	    NSRecursiveLock = NSLock;
	};
	"-unlockWithCondition:" = {
	    NSConditionLock = NSLock;
	};
	"-unscheduleFromRunLoop:forMode:" = {
	    NSURLConnection = NSURLConnection;
	};
	"-unsignedCharValue" = {
	    NSNumber = NSValue;
	};
	"-unsignedIntValue" = {
	    NSNumber = NSValue;
	};
	"-unsignedIntegerValue" = {
	    NSNumber = NSValue;
	};
	"-unsignedLongLongValue" = {
	    NSNumber = NSValue;
	};
	"-unsignedLongValue" = {
	    NSNumber = NSValue;
	};
	"-unsignedShortValue" = {
	    NSNumber = NSValue;
	};
	"-uppercaseString" = {
	    NSString = NSString;
	};
	"-useCompression" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-useCredential:forAuthenticationChallenge:" = {
	    "(NSURLAuthenticationChallengeSender)" = NSURLAuthenticationChallenge;
	};
	"-usePseudoTerminal" = {
	    NSTask = NSTask;
	};
	"-user" = {
	    NSURL = NSURL;
	    NSURLComponents = NSURL;
	    NSURLCredential = NSURLCredential;
	};
	"-userInfo" = {
	    NSCachedURLResponse = NSURLCache;
	    NSError = NSError;
	    NSException = NSException;
	    NSNotification = NSNotification;
	    NSTimer = NSTimer;
	};
	"-usesGroupingSeparator" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-usesSignificantDigits" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-usesStrongWriteBarrier" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-usesWeakReadAndWriteBarriers" = {
	    NSPointerFunctions = NSPointerFunctions;
	};
	"-validateAndReturnError:" = {
	    NSXMLDocument = NSXMLDocument;
	};
	"-validateValue:forKey:error:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-validateValue:forKeyPath:error:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-validatedLaunchPath" = {
	    NSTask = NSTask;
	};
	"-value" = {
	    NSHTTPCookie = NSHTTPCookie;
	    NSURLQueryItem = NSURL;
	};
	"-valueForHTTPHeaderField:" = {
	    "NSURLRequest(NSHTTPURLRequest)" = NSURLRequest;
	};
	"-valueForKey:" = {
	    NSArray = NSArray;
	    NSDictionary = NSDictionary;
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-valueForKeyPath:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-valueForUndefinedKey:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-valuePointerFunctions" = {
	    NSMapTable = NSMapTable;
	};
	"-valuesForKeys:" = {
	    "NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	};
	"-version" = {
	    NSHTTPCookie = NSHTTPCookie;
	    NSXMLDocument = NSXMLDocument;
	};
	"-versionForClassName:" = {
	    NSCoder = NSCoder;
	};
	"-veryShortMonthSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-veryShortStandaloneMonthSymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-veryShortStandaloneWeekdaySymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-veryShortWeekdaySymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-volatileDomainForName:" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-volatileDomainNames" = {
	    NSUserDefaults = NSUserDefaults;
	};
	"-wait" = {
	    NSCondition = NSLock;
	};
	"-waitForDataInBackgroundAndNotify" = {
	    NSFileHandle = NSFileHandle;
	};
	"-waitForDataInBackgroundAndNotifyForModes:" = {
	    NSFileHandle = NSFileHandle;
	};
	"-waitUntilDate:" = {
	    NSCondition = NSLock;
	};
	"-waitUntilExit" = {
	    NSTask = NSTask;
	};
	"-weekdaySymbols" = {
	    NSDateFormatter = NSDateFormatter;
	};
	"-willChange:valuesAtIndexes:forKey:" = {
	    "NSObject(NSKeyValueObserverNotification)" = NSKeyValueObserving;
	};
	"-willChangeValueForKey:" = {
	    "NSObject(NSKeyValueObserverNotification)" = NSKeyValueObserving;
	};
	"-willChangeValueForKey:withSetMutation:usingObjects:" = {
	    "NSObject(NSKeyValueObserverNotification)" = NSKeyValueObserving;
	};
	"-write:maxLength:" = {
	    NSOutputStream = NSStream;
	};
	"-writeData:" = {
	    NSFileHandle = NSFileHandle;
	    NSURLHandle = NSURLHandle;
	};
	"-writeInBackgroundAndNotify:" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-writeInBackgroundAndNotify:forModes:" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-writeInProgress" = {
	    "NSFileHandle(GNUstepExtensions)" = NSFileHandle;
	};
	"-writeProperty:forKey:" = {
	    NSURLHandle = NSURLHandle;
	};
	"-writeToFile:atomically:" = {
	    NSArray = NSArray;
	    NSData = NSData;
	    NSDictionary = NSDictionary;
	    NSString = NSString;
	};
	"-writeToFile:atomically:encoding:error:" = {
	    NSString = NSString;
	};
	"-writeToFile:options:error:" = {
	    NSData = NSData;
	};
	"-writeToURL:atomically:" = {
	    NSArray = NSArray;
	    NSData = NSData;
	    NSDictionary = NSDictionary;
	    NSString = NSString;
	};
	"-writeToURL:atomically:encoding:error:" = {
	    NSString = NSString;
	};
	"-writeToURL:options:error:" = {
	    NSData = NSData;
	};
	"-yearOfCommonEra" = {
	    NSCalendarDate = NSCalendarDate;
	};
	"-years:months:days:hours:minutes:seconds:sinceDate:" = {
	    "NSCalendarDate(OPENSTEP)" = NSCalendarDate;
	};
	"-zeroSymbol" = {
	    NSNumberFormatter = NSNumberFormatter;
	};
	"-zone" = {
	    "(NSObject)" = NSObject;
	    NSProxy = NSProxy;
	};
    };
    output = {
	"../Headers/Foundation/NSAffineTransform.h" = (
	    "../Documentation/Base/NSAffineTransform.gsdoc"
	);
	"../Headers/Foundation/NSArchiver.h" = (
	    "../Documentation/Base/NSArchiver.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSArray.h" = (
	    "../Documentation/Base/NSArray.gsdoc"
	);
	"../Headers/Foundation/NSAttributedString.h" = (
	    "../Documentation/Base/NSAttributedString.gsdoc"
	);
	"../Headers/Foundation/NSAutoreleasePool.h" = (
	    "../Documentation/Base/NSAutoreleasePool.gsdoc"
	);
	"../Headers/Foundation/NSBundle.h" = (
	    "../Documentation/Base/NSBundle.gsdoc",
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSCalendarDate.h" = (
	    "../Documentation/Base/NSCalendarDate.gsdoc"
	);
	"../Headers/Foundation/NSCharacterSet.h" = (
	    "../Documentation/Base/NSCharacterSet.gsdoc"
	);
	"../Headers/Foundation/NSClassDescription.h" = (
	    "../Documentation/Base/NSClassDescription.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSCoder.h" = (
	    "../Documentation/Base/NSCoder.gsdoc"
	);
	"../Headers/Foundation/NSConnection.h" = (
	    "../Documentation/Base/NSConnection.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSData.h" = (
	    "../Documentation/Base/NSData.gsdoc"
	);
	"../Headers/Foundation/NSDate.h" = (
	    "../Documentation/Base/NSDate.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSDateFormatter.h" = (
	    "../Documentation/Base/NSDateFormatter.gsdoc"
	);
	"../Headers/Foundation/NSDebug.h" = (
	    "../Documentation/Base/NSDebug.gsdoc",
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSDecimal.h" = (
	    "../Documentation/Base/Functions.gsdoc"
	);
	"../Headers/Foundation/NSDecimalNumber.h" = (
	    "../Documentation/Base/NSDecimalNumber.gsdoc"
	);
	"../Headers/Foundation/NSDictionary.h" = (
	    "../Documentation/Base/NSDictionary.gsdoc"
	);
	"../Headers/Foundation/NSDistantObject.h" = (
	    "../Documentation/Base/NSDistantObject.gsdoc"
	);
	"../Headers/Foundation/NSDistributedLock.h" = (
	    "../Documentation/Base/NSDistributedLock.gsdoc"
	);
	"../Headers/Foundation/NSDistributedNotificationCenter.h" = (
	    "../Documentation/Base/NSDistributedNotificationCenter.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSEnumerator.h" = (
	    "../Documentation/Base/NSEnumerator.gsdoc"
	);
	"../Headers/Foundation/NSError.h" = (
	    "../Documentation/Base/NSError.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSException.h" = (
	    "../Documentation/Base/NSException.gsdoc",
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSFileHandle.h" = (
	    "../Documentation/Base/NSFileHandle.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSFileManager.h" = (
	    "../Documentation/Base/NSFileManager.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSFormatter.h" = (
	    "../Documentation/Base/NSFormatter.gsdoc"
	);
	"../Headers/Foundation/NSGeometry.h" = (
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSHTTPCookie.h" = (
	    "../Documentation/Base/NSHTTPCookie.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSHTTPCookieStorage.h" = (
	    "../Documentation/Base/NSHTTPCookieStorage.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSHashTable.h" = (
	    "../Documentation/Base/NSHashTable.gsdoc",
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSHost.h" = (
	    "../Documentation/Base/NSHost.gsdoc"
	);
	"../Headers/Foundation/NSIndexPath.h" = (
	    "../Documentation/Base/NSIndexPath.gsdoc"
	);
	"../Headers/Foundation/NSIndexSet.h" = (
	    "../Documentation/Base/NSIndexSet.gsdoc"
	);
	"../Headers/Foundation/NSInvocation.h" = (
	    "../Documentation/Base/NSInvocation.gsdoc",
	    "../Documentation/Base/Functions.gsdoc"
	);
	"../Headers/Foundation/NSKeyValueCoding.h" = (
	    "../Documentation/Base/NSKeyValueCoding.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSKeyValueObserving.h" = (
	    "../Documentation/Base/NSKeyValueObserving.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSKeyedArchiver.h" = (
	    "../Documentation/Base/NSKeyedArchiver.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSLock.h" = (
	    "../Documentation/Base/NSLock.gsdoc",
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSMapTable.h" = (
	    "../Documentation/Base/NSMapTable.gsdoc",
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSMethodSignature.h" = (
	    "../Documentation/Base/NSMethodSignature.gsdoc"
	);
	"../Headers/Foundation/NSNetServices.h" = (
	    "../Documentation/Base/NSNetServices.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSNotification.h" = (
	    "../Documentation/Base/NSNotification.gsdoc"
	);
	"../Headers/Foundation/NSNotificationQueue.h" = (
	    "../Documentation/Base/NSNotificationQueue.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSNull.h" = (
	    "../Documentation/Base/NSNull.gsdoc"
	);
	"../Headers/Foundation/NSNumberFormatter.h" = (
	    "../Documentation/Base/NSNumberFormatter.gsdoc"
	);
	"../Headers/Foundation/NSObjCRuntime.h" = (
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSObject.h" = (
	    "../Documentation/Base/NSObject.gsdoc",
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSPathUtilities.h" = (
	    "../Documentation/Base/Functions.gsdoc"
	);
	"../Headers/Foundation/NSPointerArray.h" = (
	    "../Documentation/Base/NSPointerArray.gsdoc"
	);
	"../Headers/Foundation/NSPointerFunctions.h" = (
	    "../Documentation/Base/NSPointerFunctions.gsdoc"
	);
	"../Headers/Foundation/NSPort.h" = (
	    "../Documentation/Base/NSPort.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSPortCoder.h" = (
	    "../Documentation/Base/NSPortCoder.gsdoc"
	);
	"../Headers/Foundation/NSPortMessage.h" = (
	    "../Documentation/Base/NSPortMessage.gsdoc"
	);
	"../Headers/Foundation/NSPortNameServer.h" = (
	    "../Documentation/Base/NSPortNameServer.gsdoc"
	);
	"../Headers/Foundation/NSProcessInfo.h" = (
	    "../Documentation/Base/NSProcessInfo.gsdoc",
	    "../Documentation/Base/Functions.gsdoc"
	);
	"../Headers/Foundation/NSPropertyList.h" = (
	    "../Documentation/Base/NSPropertyList.gsdoc"
	);
	"../Headers/Foundation/NSProtocolChecker.h" = (
	    "../Documentation/Base/NSProtocolChecker.gsdoc"
	);
	"../Headers/Foundation/NSProxy.h" = (
	    "../Documentation/Base/NSProxy.gsdoc"
	);
	"../Headers/Foundation/NSRange.h" = (
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSRunLoop.h" = (
	    "../Documentation/Base/NSRunLoop.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSScanner.h" = (
	    "../Documentation/Base/NSScanner.gsdoc"
	);
	"../Headers/Foundation/NSSerialization.h" = (
	    "../Documentation/Base/NSSerialization.gsdoc"
	);
	"../Headers/Foundation/NSSet.h" = (
	    "../Documentation/Base/NSSet.gsdoc",
	    "../Documentation/Base/Functions.gsdoc"
	);
	"../Headers/Foundation/NSStream.h" = (
	    "../Documentation/Base/NSStream.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSString.h" = (
	    "../Documentation/Base/NSString.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSTask.h" = (
	    "../Documentation/Base/NSTask.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSThread.h" = (
	    "../Documentation/Base/NSThread.gsdoc",
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSTimeZone.h" = (
	    "../Documentation/Base/NSTimeZone.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSTimer.h" = (
	    "../Documentation/Base/NSTimer.gsdoc"
	);
	"../Headers/Foundation/NSURL.h" = (
	    "../Documentation/Base/NSURL.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSURLAuthenticationChallenge.h" = (
	    "../Documentation/Base/NSURLAuthenticationChallenge.gsdoc"
	);
	"../Headers/Foundation/NSURLCache.h" = (
	    "../Documentation/Base/NSURLCache.gsdoc"
	);
	"../Headers/Foundation/NSURLConnection.h" = (
	    "../Documentation/Base/NSURLConnection.gsdoc"
	);
	"../Headers/Foundation/NSURLCredential.h" = (
	    "../Documentation/Base/NSURLCredential.gsdoc"
	);
	"../Headers/Foundation/NSURLCredentialStorage.h" = (
	    "../Documentation/Base/NSURLCredentialStorage.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSURLDownload.h" = (
	    "../Documentation/Base/NSURLDownload.gsdoc"
	);
	"../Headers/Foundation/NSURLError.h" = (
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSURLHandle.h" = (
	    "../Documentation/Base/NSURLHandle.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSURLProtectionSpace.h" = (
	    "../Documentation/Base/NSURLProtectionSpace.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSURLProtocol.h" = (
	    "../Documentation/Base/NSURLProtocol.gsdoc"
	);
	"../Headers/Foundation/NSURLRequest.h" = (
	    "../Documentation/Base/NSURLRequest.gsdoc"
	);
	"../Headers/Foundation/NSURLResponse.h" = (
	    "../Documentation/Base/NSURLResponse.gsdoc"
	);
	"../Headers/Foundation/NSUndoManager.h" = (
	    "../Documentation/Base/NSUndoManager.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSUserDefaults.h" = (
	    "../Documentation/Base/NSUserDefaults.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSValue.h" = (
	    "../Documentation/Base/NSValue.gsdoc"
	);
	"../Headers/Foundation/NSValueTransformer.h" = (
	    "../Documentation/Base/NSValueTransformer.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSXMLDTD.h" = (
	    "../Documentation/Base/NSXMLDTD.gsdoc"
	);
	"../Headers/Foundation/NSXMLDTDNode.h" = (
	    "../Documentation/Base/NSXMLDTDNode.gsdoc"
	);
	"../Headers/Foundation/NSXMLDocument.h" = (
	    "../Documentation/Base/NSXMLDocument.gsdoc"
	);
	"../Headers/Foundation/NSXMLElement.h" = (
	    "../Documentation/Base/NSXMLElement.gsdoc"
	);
	"../Headers/Foundation/NSXMLNode.h" = (
	    "../Documentation/Base/NSXMLNode.gsdoc"
	);
	"../Headers/Foundation/NSXMLNodeOptions.h" = (
	    "../Documentation/Base/NSXMLNodeOptions.gsdoc"
	);
	"../Headers/Foundation/NSXMLParser.h" = (
	    "../Documentation/Base/NSXMLParser.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
	"../Headers/Foundation/NSZone.h" = (
	    "../Documentation/Base/Functions.gsdoc",
	    "../Documentation/Base/TypesAndConstants.gsdoc"
	);
    };
    protocol = {
	"(GSLogDelegate)" = NSDebug;
	"(NSCoding)" = NSObject;
	"(NSCopying)" = NSObject;
	"(NSDecimalNumberBehaviors)" = NSDecimalNumber;
	"(NSDiscardableContent)" = NSObject;
	"(NSFastEnumeration)" = NSEnumerator;
	"(NSFileManagerDelegate)" = NSFileManager;
	"(NSLocking)" = NSLock;
	"(NSMutableCopying)" = NSObject;
	"(NSNetServiceBrowserDelegate)" = NSNetServices;
	"(NSNetServiceDelegate)" = NSNetServices;
	"(NSObjCTypeSerializationCallBack)" = NSSerialization;
	"(NSObject)" = NSObject;
	"(NSSecureCoding)" = NSObject;
	"(NSStreamDelegate)" = NSStream;
	"(NSURLAuthenticationChallengeSender)" = NSURLAuthenticationChallenge;
	"(NSURLConnectionDelegate)" = NSURLConnection;
	"(NSURLDownloadDelegate)" = NSURLDownload;
	"(NSURLHandleClient)" = NSURLHandle;
	"(NSURLProtocolClient)" = NSURLProtocol;
	"(NSXMLParserDelegate)" = NSXMLParser;
	"(RunLoopEvents)" = NSRunLoop;
	"NSObject(GSTraceLocks)" = NSLock;
	"NSObject(NSConnectionDelegate)" = NSConnection;
	"NSObject(NSFileManagerDelegate)" = NSFileManager;
	"NSObject(NSFileManagerHandler)" = NSFileManager;
	"NSObject(NSKeyValueCoding)" = NSKeyValueCoding;
	"NSObject(NSNetServiceBrowserDelegateMethods)" = NSNetServices;
	"NSObject(NSNetServiceDelegateMethods)" = NSNetServices;
	"NSObject(NSStreamDelegate)" = NSStream;
	"NSObject(RunLoopEvents)" = NSRunLoop;
	"NSObject(TimedPerformers)" = NSObject;
    };
    source = {
	"../Headers/Foundation/NSAffineTransform.h" = (
	    "NSAffineTransform.m"
	);
	"../Headers/Foundation/NSArchiver.h" = (
	    "NSUnarchiver.m",
	    "NSArchiver.m"
	);
	"../Headers/Foundation/NSArray.h" = (
	    "NSArray.m"
	);
	"../Headers/Foundation/NSAttributedString.h" = (
	    "NSAttributedString.m"
	);
	"../Headers/Foundation/NSAutoreleasePool.h" = (
	    "NSAutoreleasePool.m"
	);
	"../Headers/Foundation/NSBundle.h" = (
	    "NSBundle.m"
	);
	"../Headers/Foundation/NSCalendarDate.h" = (
	    "NSCalendarDate.m"
	);
	"../Headers/Foundation/NSCharacterSet.h" = (
	    "NSCharacterSet.m"
	);
	"../Headers/Foundation/NSClassDescription.h" = (
	    "NSClassDescription.m"
	);
	"../Headers/Foundation/NSCoder.h" = (
	    "NSCoder.m"
	);
	"../Headers/Foundation/NSConnection.h" = (
	    "NSConnection.m"
	);
	"../Headers/Foundation/NSData.h" = (
	    "NSData.m"
	);
	"../Headers/Foundation/NSDate.h" = (
	    "NSDate.m"
	);
	"../Headers/Foundation/NSDateFormatter.h" = (
	    "NSDateFormatter.m"
	);
	"../Headers/Foundation/NSDebug.h" = (
	    "NSDebug.m"
	);
	"../Headers/Foundation/NSDecimal.h" = (
	    "NSDecimal.m"
	);
	"../Headers/Foundation/NSDecimalNumber.h" = (
	    "NSDecimalNumber.m"
	);
	"../Headers/Foundation/NSDictionary.h" = (
	    "NSDictionary.m"
	);
	"../Headers/Foundation/NSDistantObject.h" = (
	    "NSDistantObject.m"
	);
	"../Headers/Foundation/NSDistributedLock.h" = (
	    "NSDistributedLock.m"
	);
	"../Headers/Foundation/NSDistributedNotificationCenter.h" = (
	    "NSDistributedNotificationCenter.m"
	);
	"../Headers/Foundation/NSEnumerator.h" = (
	    "NSEnumerator.m"
	);
	"../Headers/Foundation/NSError.h" = (
	    "NSError.m"
	);
	"../Headers/Foundation/NSException.h" = (
	    "NSAssertionHandler.m",
	    "NSException.m"
	);
	"../Headers/Foundation/NSFileHandle.h" = (
	    "NSFileHandle.m",
	    "NSPipe.m"
	);
	"../Headers/Foundation/NSFileManager.h" = (
	    "NSFileManager.m"
	);
	"../Headers/Foundation/NSFormatter.h" = (
	    "NSFormatter.m"
	);
	"../Headers/Foundation/NSGeometry.h" = (
	    "NSGeometry.m"
	);
	"../Headers/Foundation/NSHTTPCookie.h" = (
	    "NSHTTPCookie.m"
	);
	"../Headers/Foundation/NSHTTPCookieStorage.h" = (
	    "NSHTTPCookieStorage.m"
	);
	"../Headers/Foundation/NSHashTable.h" = (
	    "NSHashTable.m"
	);
	"../Headers/Foundation/NSHost.h" = (
	    "NSHost.m"
	);
	"../Headers/Foundation/NSIndexPath.h" = (
	    "NSIndexPath.m"
	);
	"../Headers/Foundation/NSIndexSet.h" = (
	    "NSIndexSet.m"
	);
	"../Headers/Foundation/NSInvocation.h" = (
	    "NSInvocation.m"
	);
	"../Headers/Foundation/NSKeyValueCoding.h" = (
	    "NSKeyValueCoding.m"
	);
	"../Headers/Foundation/NSKeyValueObserving.h" = (
	    "NSKeyValueObserving.m"
	);
	"../Headers/Foundation/NSKeyedArchiver.h" = (
	    "NSKeyedArchiver.m",
	    "NSKeyedUnarchiver.m"
	);
	"../Headers/Foundation/NSLock.h" = (
	    "NSLock.m"
	);
	"../Headers/Foundation/NSMapTable.h" = (
	    "NSMapTable.m"
	);
	"../Headers/Foundation/NSMethodSignature.h" = (
	    "NSMethodSignature.m"
	);
	"../Headers/Foundation/NSNetServices.h" = (
	    "NSNetServices.m"
	);
	"../Headers/Foundation/NSNotification.h" = (
	    "NSNotification.m",
	    "NSNotificationCenter.m"
	);
	"../Headers/Foundation/NSNotificationQueue.h" = (
	    "NSNotificationQueue.m"
	);
	"../Headers/Foundation/NSNull.h" = (
	    "NSNull.m"
	);
	"../Headers/Foundation/NSNumberFormatter.h" = (
	    "NSNumberFormatter.m"
	);
	"../Headers/Foundation/NSObjCRuntime.h" = (
	    "NSObjCRuntime.m",
	    "NSLog.m"
	);
	"../Headers/Foundation/NSObject.h" = (
	    "NSObject.m"
	);
	"../Headers/Foundation/NSPathUtilities.h" = (
	    "NSPathUtilities.m"
	);
	"../Headers/Foundation/NSPointerArray.h" = (
	    "NSPointerArray.m"
	);
	"../Headers/Foundation/NSPointerFunctions.h" = (
	    "NSPointerFunctions.m"
	);
	"../Headers/Foundation/NSPort.h" = (
	    "NSPort.m",
	    "NSSocketPort.m",
	    "NSMessagePort.m"
	);
	"../Headers/Foundation/NSPortCoder.h" = (
	    "NSPortCoder.m"
	);
	"../Headers/Foundation/NSPortMessage.h" = (
	    "NSPortMessage.m"
	);
	"../Headers/Foundation/NSPortNameServer.h" = (
	    "NSPortNameServer.m",
	    "NSSocketPortNameServer.m",
	    "NSMessagePortNameServer.m"
	);
	"../Headers/Foundation/NSProcessInfo.h" = (
	    "NSProcessInfo.m"
	);
	"../Headers/Foundation/NSPropertyList.h" = (
	    "NSPropertyList.m"
	);
	"../Headers/Foundation/NSProtocolChecker.h" = (
	    "NSProtocolChecker.m"
	);
	"../Headers/Foundation/NSProxy.h" = (
	    "NSProxy.m"
	);
	"../Headers/Foundation/NSRange.h" = (
	    "NSRange.m"
	);
	"../Headers/Foundation/NSRunLoop.h" = (
	    "NSRunLoop.m"
	);
	"../Headers/Foundation/NSScanner.h" = (
	    "NSScanner.m"
	);
	"../Headers/Foundation/NSSerialization.h" = (
	    "../Headers/Foundation/NSSerialization.h"
	);
	"../Headers/Foundation/NSSet.h" = (
	    "NSSet.m",
	    "NSCountedSet.m"
	);
	"../Headers/Foundation/NSStream.h" = (
	    "../Headers/Foundation/NSStream.h"
	);
	"../Headers/Foundation/NSString.h" = (
	    "NSString.m"
	);
	"../Headers/Foundation/NSTask.h" = (
	    "NSTask.m"
	);
	"../Headers/Foundation/NSThread.h" = (
	    "NSThread.m"
	);
	"../Headers/Foundation/NSTimeZone.h" = (
	    "NSTimeZone.m"
	);
	"../Headers/Foundation/NSTimer.h" = (
	    "NSTimer.m"
	);
	"../Headers/Foundation/NSURL.h" = (
	    "NSURL.m"
	);
	"../Headers/Foundation/NSURLAuthenticationChallenge.h" = (
	    "NSURLAuthenticationChallenge.m"
	);
	"../Headers/Foundation/NSURLCache.h" = (
	    "NSURLCache.m"
	);
	"../Headers/Foundation/NSURLConnection.h" = (
	    "NSURLConnection.m"
	);
	"../Headers/Foundation/NSURLCredential.h" = (
	    "NSURLCredential.m"
	);
	"../Headers/Foundation/NSURLCredentialStorage.h" = (
	    "NSURLCredentialStorage.m"
	);
	"../Headers/Foundation/NSURLDownload.h" = (
	    "NSURLDownload.m"
	);
	"../Headers/Foundation/NSURLError.h" = (
	    "../Headers/Foundation/NSURLError.h"
	);
	"../Headers/Foundation/NSURLHandle.h" = (
	    "NSURLHandle.m"
	);
	"../Headers/Foundation/NSURLProtectionSpace.h" = (
	    "NSURLProtectionSpace.m"
	);
	"../Headers/Foundation/NSURLProtocol.h" = (
	    "NSURLProtocol.m"
	);
	"../Headers/Foundation/NSURLRequest.h" = (
	    "NSURLRequest.m"
	);
	"../Headers/Foundation/NSURLResponse.h" = (
	    "NSURLResponse.m"
	);
	"../Headers/Foundation/NSUndoManager.h" = (
	    "NSUndoManager.m"
	);
	"../Headers/Foundation/NSUserDefaults.h" = (
	    "NSUserDefaults.m"
	);
	"../Headers/Foundation/NSValue.h" = (
	    "NSValue.m"
	);
	"../Headers/Foundation/NSValueTransformer.h" = (
	    "NSValueTransformer.m"
	);
	"../Headers/Foundation/NSXMLDTD.h" = (
	    "NSXMLDTD.m"
	);
	"../Headers/Foundation/NSXMLDTDNode.h" = (
	    "NSXMLDTDNode.m"
	);
	"../Headers/Foundation/NSXMLDocument.h" = (
	    "NSXMLDocument.m"
	);
	"../Headers/Foundation/NSXMLElement.h" = (
	    "NSXMLElement.m"
	);
	"../Headers/Foundation/NSXMLNode.h" = (
	    "NSXMLNode.m"
	);
	"../Headers/Foundation/NSXMLNodeOptions.h" = (
	    "../Headers/Foundation/NSXMLNodeOptions.h"
	);
	"../Headers/Foundation/NSXMLParser.h" = (
	    "NSXMLParser.m"
	);
	"../Headers/Foundation/NSZone.h" = (
	    "NSZone.m",
	    "NSPage.m"
	);
    };
    super = {
	NSAffineTransform = NSObject;
	NSArchiver = NSCoder;
	NSArray = NSObject;
	NSAssertionHandler = NSObject;
	NSAttributedString = NSObject;
	NSAutoreleasePool = NSObject;
	NSBundle = NSObject;
	NSCachedURLResponse = NSObject;
	NSCalendarDate = NSDate;
	NSCharacterSet = NSObject;
	NSClassDescription = NSObject;
	NSCoder = NSObject;
	NSCondition = NSObject;
	NSConditionLock = NSObject;
	NSConnection = NSObject;
	NSCountedSet = NSMutableSet;
	NSData = NSObject;
	NSDate = NSObject;
	NSDateFormatter = NSFormatter;
	NSDecimalNumber = NSNumber;
	NSDecimalNumberHandler = NSObject;
	NSDeserializer = NSObject;
	NSDictionary = NSObject;
	NSDirectoryEnumerator = NSEnumerator;
	NSDistantObject = NSProxy;
	NSDistributedLock = NSObject;
	NSDistributedNotificationCenter = NSNotificationCenter;
	NSEnumerator = NSObject;
	NSError = NSObject;
	NSException = NSObject;
	NSFileHandle = NSObject;
	NSFileManager = NSObject;
	NSFormatter = NSObject;
	NSHTTPCookie = NSObject;
	NSHTTPCookieStorage = NSObject;
	NSHTTPURLResponse = NSURLResponse;
	NSHashTable = NSObject;
	NSHost = NSObject;
	NSIndexPath = NSObject;
	NSIndexSet = NSObject;
	NSInputStream = NSStream;
	NSInvocation = NSObject;
	NSKeyedArchiver = NSCoder;
	NSKeyedUnarchiver = NSCoder;
	NSLock = NSObject;
	NSMapTable = NSObject;
	NSMessagePort = NSPort;
	NSMessagePortNameServer = NSPortNameServer;
	NSMethodSignature = NSObject;
	NSMutableArray = NSArray;
	NSMutableAttributedString = NSAttributedString;
	NSMutableCharacterSet = NSCharacterSet;
	NSMutableData = NSData;
	NSMutableDictionary = NSDictionary;
	NSMutableIndexSet = NSIndexSet;
	NSMutableSet = NSSet;
	NSMutableString = NSString;
	NSMutableURLRequest = NSURLRequest;
	NSNetService = NSObject;
	NSNetServiceBrowser = NSObject;
	NSNotification = NSObject;
	NSNotificationCenter = NSObject;
	NSNotificationQueue = NSObject;
	NSNull = NSObject;
	NSNumber = NSValue;
	NSNumberFormatter = NSFormatter;
	NSOutputStream = NSStream;
	NSPipe = NSObject;
	NSPointerArray = NSObject;
	NSPointerFunctions = NSObject;
	NSPort = NSObject;
	NSPortCoder = NSCoder;
	NSPortMessage = NSObject;
	NSPortNameServer = NSObject;
	NSProcessInfo = NSObject;
	NSPropertyListSerialization = NSObject;
	NSProtocolChecker = NSProxy;
	NSRecursiveLock = NSObject;
	NSRunLoop = NSObject;
	NSScanner = NSObject;
	NSSerializer = NSObject;
	NSSet = NSObject;
	NSSocketPort = NSPort;
	NSSocketPortNameServer = NSPortNameServer;
	NSStream = NSObject;
	NSString = NSObject;
	NSTask = NSObject;
	NSThread = NSObject;
	NSTimeZone = NSObject;
	NSTimeZoneDetail = NSTimeZone;
	NSTimer = NSObject;
	NSURL = NSObject;
	NSURLAuthenticationChallenge = NSObject;
	NSURLCache = NSObject;
	NSURLComponents = NSObject;
	NSURLConnection = NSObject;
	NSURLCredential = NSObject;
	NSURLCredentialStorage = NSObject;
	NSURLDownload = NSObject;
	NSURLHandle = NSObject;
	NSURLProtectionSpace = NSObject;
	NSURLProtocol = NSObject;
	NSURLQueryItem = NSObject;
	NSURLRequest = NSObject;
	NSURLResponse = NSObject;
	NSUnarchiver = NSCoder;
	NSUndoManager = NSObject;
	NSUserDefaults = NSObject;
	NSValue = NSObject;
	NSValueTransformer = NSObject;
	NSXMLDTD = NSXMLNode;
	NSXMLDTDNode = NSXMLNode;
	NSXMLDocument = NSXMLNode;
	NSXMLElement = NSXMLNode;
	NSXMLNode = NSObject;
	NSXMLParser = NSObject;
	NXConstantString = NSString;
    };
    title = {
	Base = "GNUstep Base";
	Functions = Functions;
	NSAffineTransform = "NSAffineTransform.m";
	NSArchiver = "NSArchiver class reference";
	NSArray = "NSArray class reference";
	NSAttributedString = "NSAttributedString class reference";
	NSAutoreleasePool = "NSAutoreleasePool class reference";
	NSBundle = "NSBundle class reference";
	NSCalendarDate = "NSCalendarDate class reference";
	NSCharacterSet = "NSCharacterSet class reference";
	NSClassDescription = "NSClassDescription class reference";
	NSCoder = "NSCoder class reference";
	NSConnection = "NSConnection class reference";
	NSData = "NSData class reference";
	NSDate = "NSDate class reference";
	NSDateFormatter = "NSDateFormatter class reference";
	NSDebug = "NSDebug utilities reference";
	NSDecimalNumber = "NSDecimalNumber class reference";
	NSDictionary = "NSDictionary class reference";
	NSDistantObject = "NSDistantObject class reference";
	NSDistributedLock = "NSDistributedLock class reference";
	NSDistributedNotificationCenter = "NSDistributedNotificationCenter
      class reference";
	NSEnumerator = "NSEnumerator class reference";
	NSError = "NSError class documentation";
	NSException = "NSAssertionHandler class reference";
	NSFileHandle = "NSFileHandle class reference";
	NSFileManager = "NSFileManager class reference";
	NSFormatter = "NSFormatter class reference";
	NSHTTPCookie = "NSHTTPCookie class documentation";
	NSHTTPCookieStorage = "NSHTTPCookieStorage class documentation";
	NSHashTable = "NSHashTable class reference";
	NSHost = "NSHost class reference";
	NSIndexPath = "NSIndexPath class documentation";
	NSIndexSet = "NSIndexSet documentation";
	NSInvocation = "NSInvocation class reference";
	NSKeyValueCoding = "NSKeyValueCoding informal protocol reference";
	NSKeyValueObserving = "NSKeyValueObserving documentation";
	NSKeyedArchiver = "NSKeyedArchiver documentation";
	NSLock = "NSLock class reference";
	NSMapTable = "NSMapTable class reference";
	NSMethodSignature = "NSMethodSignature class reference";
	NSNetServices = "NSNetServices documentation";
	NSNotification = "NSNotificationCenter class reference";
	NSNotificationQueue = "NSNotificationQueue class reference";
	NSNull = "NSNull class reference";
	NSNumberFormatter = "NSNumberFormatter class reference";
	NSObject = "NSObject class reference";
	NSPointerArray = "NSPointerArray class documentation";
	NSPointerFunctions = "NSPointerFunctions class documentation";
	NSPort = "NSPort class reference";
	NSPortCoder = "NSPortCoder class reference";
	NSPortMessage = "NSPortMessage class reference";
	NSPortNameServer = "NSPortNameServer class reference";
	NSProcessInfo = "NSProcessInfo class reference";
	NSPropertyList = "NSPropertyListSerialization class documentation";
	NSProtocolChecker = "NSProtocolChecker class reference";
	NSProxy = "NSProxy class reference";
	NSRunLoop = "NSRunLoop class reference";
	NSScanner = "NSScanner class reference";
	NSSerialization = "NSSerialization documentation";
	NSSet = "NSCountedSet class reference";
	NSStream = "NSStream documentation";
	NSString = "NSString class reference";
	NSTask = "NSTask class reference";
	NSThread = "NSThread class reference";
	NSTimeZone = "NSTimeZone class reference";
	NSTimer = "NSTimer class reference";
	NSURL = "NSURL class reference";
	NSURLAuthenticationChallenge = "NSURLAuthenticationChallenge class documentation";
	NSURLCache = "NSURLCache documentation";
	NSURLConnection = "NSURLConnection class documentation";
	NSURLCredential = "NSURLCredential class documentation";
	NSURLCredentialStorage = "NSURLCredentialStorage class documentation";
	NSURLDownload = "NSURLDownload class documentation";
	NSURLHandle = "NSURLHandle class reference";
	NSURLProtectionSpace = "NSURLProtectionSpace class documentation";
	NSURLProtocol = "NSURLProtocol class documentation";
	NSURLRequest = "NSURLRequest documentation";
	NSURLResponse = "NSURLResponse documentation";
	NSUndoManager = "NSUndoManager class reference";
	NSUserDefaults = "NSUserDefaults class reference";
	NSValue = "NSValue class reference";
	NSValueTransformer = "NSValueTransformer class documentation";
	NSXMLDTD = "NSXMLDTD class documentation";
	NSXMLDTDNode = "NSXMLDTDNode class documentation";
	NSXMLDocument = "NSXMLDocument class documentation";
	NSXMLElement = "NSXMLElement class documentation";
	NSXMLNode = "NSXMLNode class documentation";
	NSXMLParser = "NSXMLParser class documentation";
	TypesAndConstants = "Types and Constants";
    };
    type = {
	CGFloat = TypesAndConstants;
	NSActivityOptions = TypesAndConstants;
	NSAttributedStringKey = TypesAndConstants;
	NSBinarySearchingOptions = TypesAndConstants;
	NSCalculationError = TypesAndConstants;
	NSComparisonResult = TypesAndConstants;
	NSDataBase64DecodingOptions = TypesAndConstants;
	NSDataBase64EncodingOptions = TypesAndConstants;
	NSDataSearchOptions = TypesAndConstants;
	NSDateFormatterBehavior = TypesAndConstants;
	NSDateFormatterStyle = TypesAndConstants;
	NSDirectoryEnumerationOptions = TypesAndConstants;
	NSEnumerationOptions = TypesAndConstants;
	NSErrorDomain = TypesAndConstants;
	NSExceptionName = TypesAndConstants;
	NSFormattingContext = TypesAndConstants;
	NSFormattingUnitStyle = TypesAndConstants;
	NSHTTPCookieAcceptPolicy = TypesAndConstants;
	NSHashTableOptions = TypesAndConstants;
	NSInteger = TypesAndConstants;
	NSKeyValueChange = TypesAndConstants;
	NSKeyValueObservingOptions = TypesAndConstants;
	NSKeyValueSetMutationKind = TypesAndConstants;
	NSMapTableOptions = TypesAndConstants;
	NSMapTableValueCallBacks = TypesAndConstants;
	NSNetServiceOptions = TypesAndConstants;
	NSNetServicesError = TypesAndConstants;
	NSNotificationCoalescing = TypesAndConstants;
	NSNotificationName = TypesAndConstants;
	NSNotificationSuspensionBehavior = TypesAndConstants;
	NSNumberFormatterBehavior = TypesAndConstants;
	NSNumberFormatterPadPosition = TypesAndConstants;
	NSNumberFormatterRoundingMode = TypesAndConstants;
	NSNumberFormatterStyle = TypesAndConstants;
	NSPoint = TypesAndConstants;
	NSPointArray = TypesAndConstants;
	NSPointPointer = TypesAndConstants;
	NSPointerFunctionsOptions = TypesAndConstants;
	NSPostingStyle = TypesAndConstants;
	NSPropertyListFormat = TypesAndConstants;
	NSPropertyListMutabilityOptions = TypesAndConstants;
	NSPropertyListReadOptions = TypesAndConstants;
	NSPropertyListWriteOptions = TypesAndConstants;
	NSRange = TypesAndConstants;
	NSRangePointer = TypesAndConstants;
	NSRect = TypesAndConstants;
	NSRectArray = TypesAndConstants;
	NSRectEdge = TypesAndConstants;
	NSRectPointer = TypesAndConstants;
	NSRoundingMode = TypesAndConstants;
	NSRunLoopMode = TypesAndConstants;
	NSSearchPathDirectory = TypesAndConstants;
	NSSearchPathDomainMask = TypesAndConstants;
	NSSize = TypesAndConstants;
	NSSizeArray = TypesAndConstants;
	NSSizePointer = TypesAndConstants;
	NSSocketNativeHandle = TypesAndConstants;
	NSSortOptions = TypesAndConstants;
	NSStreamEvent = TypesAndConstants;
	NSStreamStatus = TypesAndConstants;
	NSStringCompareOptions = TypesAndConstants;
	NSStringEncoding = TypesAndConstants;
	NSStringEncodingConversionOptions = TypesAndConstants;
	NSTaskTerminationReason = TypesAndConstants;
	NSTimeInterval = TypesAndConstants;
	NSTimeZoneNameStyle = TypesAndConstants;
	NSUInteger = TypesAndConstants;
	NSURLBookmarkResolutionOptions = TypesAndConstants;
	NSURLCacheStoragePolicy = TypesAndConstants;
	NSURLCredentialPersistence = TypesAndConstants;
	NSURLHandleStatus = TypesAndConstants;
	NSURLRequestCachePolicy = TypesAndConstants;
	NSXMLDTDNodeKind = TypesAndConstants;
	NSXMLDocumentContentKind = TypesAndConstants;
	NSXMLNodeKind = TypesAndConstants;
	NSXMLParserError = TypesAndConstants;
	NSZone = TypesAndConstants;
	OSType = TypesAndConstants;
	RunLoopEventType = TypesAndConstants;
	"struct NSEdgeInsets" = TypesAndConstants;
	"struct _NSHandler" = TypesAndConstants;
	"struct _NSHashTableCallBacks" = TypesAndConstants;
	"struct _NSMapTableKeyCallBacks" = TypesAndConstants;
	"struct autorelease_array_list" = TypesAndConstants;
	"struct autorelease_thread_vars" = TypesAndConstants;
	unichar = TypesAndConstants;
    };
    unitmethods = {
	"(GSLogDelegate)" = {
	    "-getBytes:ofLength:byHandle:" = NSDebug;
	    "-putBytes:ofLength:byHandle:" = NSDebug;
	};
	"(NSCoding)" = {
	    "-encodeWithCoder:" = NSObject;
	    "-initWithCoder:" = NSObject;
	};
	"(NSCopying)" = {
	    "-copyWithZone:" = NSObject;
	};
	"(NSDecimalNumberBehaviors)" = {
	    "-exceptionDuringOperation:error:leftOperand:rightOperand:" = NSDecimalNumber;
	    "-roundingMode" = NSDecimalNumber;
	    "-scale" = NSDecimalNumber;
	};
	"(NSDiscardableContent)" = {
	    "-beginContentAccess" = NSObject;
	    "-discardContentIfPossible" = NSObject;
	    "-endContentAccess" = NSObject;
	    "-isContentDiscarded" = NSObject;
	};
	"(NSFastEnumeration)" = {
	    "-countByEnumeratingWithState:objects:count:" = NSEnumerator;
	};
	"(NSLocking)" = {
	    "-lock" = NSLock;
	    "-unlock" = NSLock;
	};
	"(NSMutableCopying)" = {
	    "-mutableCopyWithZone:" = NSObject;
	};
	"(NSObjCTypeSerializationCallBack)" = {
	    "-deserializeObjectAt:ofObjCType:fromData:atCursor:" = NSSerialization;
	    "-serializeObjectAt:ofObjCType:intoData:" = NSSerialization;
	};
	"(NSObject)" = {
	    "-autorelease" = NSObject;
	    "-class" = NSObject;
	    "-conformsToProtocol:" = NSObject;
	    "-description" = NSObject;
	    "-hash" = NSObject;
	    "-isEqual:" = NSObject;
	    "-isKindOfClass:" = NSObject;
	    "-isMemberOfClass:" = NSObject;
	    "-isProxy" = NSObject;
	    "-performSelector:" = NSObject;
	    "-performSelector:withObject:" = NSObject;
	    "-performSelector:withObject:withObject:" = NSObject;
	    "-release" = NSObject;
	    "-respondsToSelector:" = NSObject;
	    "-retain" = NSObject;
	    "-retainCount" = NSObject;
	    "-self" = NSObject;
	    "-superclass" = NSObject;
	    "-zone" = NSObject;
	};
	"(NSSecureCoding)" = {
	    "+supportsSecureCoding" = NSObject;
	};
	"(NSStreamDelegate)" = {
	    "-stream:handleEvent:" = NSStream;
	};
	"(NSURLAuthenticationChallengeSender)" = {
	    "-cancelAuthenticationChallenge:" = NSURLAuthenticationChallenge;
	    "-continueWithoutCredentialForAuthenticationChallenge:" = NSURLAuthenticationChallenge;
	    "-useCredential:forAuthenticationChallenge:" = NSURLAuthenticationChallenge;
	};
	"(NSURLHandleClient)" = {
	    "-URLHandle:resourceDataDidBecomeAvailable:" = NSURLHandle;
	    "-URLHandle:resourceDidFailLoadingWithReason:" = NSURLHandle;
	    "-URLHandleResourceDidBeginLoading:" = NSURLHandle;
	    "-URLHandleResourceDidCancelLoading:" = NSURLHandle;
	    "-URLHandleResourceDidFinishLoading:" = NSURLHandle;
	};
	"(NSURLProtocolClient)" = {
	    "-URLProtocol:cachedResponseIsValid:" = NSURLProtocol;
	    "-URLProtocol:didCancelAuthenticationChallenge:" = NSURLProtocol;
	    "-URLProtocol:didFailWithError:" = NSURLProtocol;
	    "-URLProtocol:didLoadData:" = NSURLProtocol;
	    "-URLProtocol:didReceiveAuthenticationChallenge:" = NSURLProtocol;
	    "-URLProtocol:didReceiveResponse:cacheStoragePolicy:" = NSURLProtocol;
	    "-URLProtocol:wasRedirectedToRequest:redirectResponse:" = NSURLProtocol;
	    "-URLProtocolDidFinishLoading:" = NSURLProtocol;
	};
	"(RunLoopEvents)" = {
	    "-receivedEvent:type:extra:forMode:" = NSRunLoop;
	};
	NSAffineTransform = {
	    "+transform" = NSAffineTransform;
	    "-appendTransform:" = NSAffineTransform;
	    "-initWithTransform:" = NSAffineTransform;
	    "-invert" = NSAffineTransform;
	    "-prependTransform:" = NSAffineTransform;
	    "-rotateByDegrees:" = NSAffineTransform;
	    "-rotateByRadians:" = NSAffineTransform;
	    "-scaleBy:" = NSAffineTransform;
	    "-scaleXBy:yBy:" = NSAffineTransform;
	    "-setTransformStruct:" = NSAffineTransform;
	    "-transformPoint:" = NSAffineTransform;
	    "-transformSize:" = NSAffineTransform;
	    "-transformStruct" = NSAffineTransform;
	    "-translateXBy:yBy:" = NSAffineTransform;
	};
	NSArchiver = {
	    "+archiveRootObject:toFile:" = NSArchiver;
	    "+archivedDataWithRootObject:" = NSArchiver;
	    "-archiverData" = NSArchiver;
	    "-classNameEncodedForTrueClassName:" = NSArchiver;
	    "-encodeClassName:intoClassName:" = NSArchiver;
	    "-initForWritingWithMutableData:" = NSArchiver;
	    "-replaceObject:withObject:" = NSArchiver;
	};
	"NSArchiver(GNUstep)" = {
	    "-directDataAccess" = NSArchiver;
	    "-resetArchiver" = NSArchiver;
	    "-serializeHeaderAt:version:classes:objects:pointers:" = NSArchiver;
	};
	NSArray = {
	    "+array" = NSArray;
	    "+arrayWithArray:" = NSArray;
	    "+arrayWithContentsOfFile:" = NSArray;
	    "+arrayWithContentsOfURL:" = NSArray;
	    "+arrayWithObject:" = NSArray;
	    "+arrayWithObjects:,..." = NSArray;
	    "+arrayWithObjects:count:" = NSArray;
	    "-arrayByAddingObject:" = NSArray;
	    "-arrayByAddingObjectsFromArray:" = NSArray;
	    "-componentsJoinedByString:" = NSArray;
	    "-containsObject:" = NSArray;
	    "-count" = NSArray;
	    "-description" = NSArray;
	    "-descriptionWithLocale:" = NSArray;
	    "-descriptionWithLocale:indent:" = NSArray;
	    "-enumerateObjectsAtIndexes:options:usingBlock:" = NSArray;
	    "-enumerateObjectsUsingBlock:" = NSArray;
	    "-enumerateObjectsWithOptions:usingBlock:" = NSArray;
	    "-firstObject" = NSArray;
	    "-firstObjectCommonWithArray:" = NSArray;
	    "-getObjects:" = NSArray;
	    "-getObjects:range:" = NSArray;
	    "-indexOfObject:" = NSArray;
	    "-indexOfObject:inRange:" = NSArray;
	    "-indexOfObject:inSortedRange:options:usingComparator:" = NSArray;
	    "-indexOfObjectAtIndexes:options:passingTest:" = NSArray;
	    "-indexOfObjectIdenticalTo:" = NSArray;
	    "-indexOfObjectIdenticalTo:inRange:" = NSArray;
	    "-indexOfObjectPassingTest:" = NSArray;
	    "-indexOfObjectWithOptions:passingTest:" = NSArray;
	    "-indexesOfObjectsAtIndexes:options:passingTest:" = NSArray;
	    "-indexesOfObjectsPassingTest:" = NSArray;
	    "-indexesOfObjectsWithOptions:passingTest:" = NSArray;
	    "-init" = NSArray;
	    "-initWithArray:" = NSArray;
	    "-initWithArray:copyItems:" = NSArray;
	    "-initWithContentsOfFile:" = NSArray;
	    "-initWithContentsOfURL:" = NSArray;
	    "-initWithObjects:,..." = NSArray;
	    "-initWithObjects:count:" = NSArray;
	    "-isEqualToArray:" = NSArray;
	    "-lastObject" = NSArray;
	    "-makeObjectsPerform:" = NSArray;
	    "-makeObjectsPerform:withObject:" = NSArray;
	    "-makeObjectsPerformSelector:" = NSArray;
	    "-makeObjectsPerformSelector:withObject:" = NSArray;
	    "-objectAtIndex:" = NSArray;
	    "-objectAtIndexedSubscript:" = NSArray;
	    "-objectEnumerator" = NSArray;
	    "-objectsAtIndexes:" = NSArray;
	    "-pathsMatchingExtensions:" = NSArray;
	    "-reverseObjectEnumerator" = NSArray;
	    "-setValue:forKey:" = NSArray;
	    "-sortedArrayHint" = NSArray;
	    "-sortedArrayUsingComparator:" = NSArray;
	    "-sortedArrayUsingFunction:context:" = NSArray;
	    "-sortedArrayUsingFunction:context:hint:" = NSArray;
	    "-sortedArrayUsingSelector:" = NSArray;
	    "-sortedArrayWithOptions:usingComparator:" = NSArray;
	    "-subarrayWithRange:" = NSArray;
	    "-valueForKey:" = NSArray;
	    "-writeToFile:atomically:" = NSArray;
	    "-writeToURL:atomically:" = NSArray;
	};
	"NSArray(NSKeyValueObserverRegistration)" = {
	    "-addObserver:toObjectsAtIndexes:forKeyPath:options:context:" = NSKeyValueObserving;
	    "-removeObserver:fromObjectsAtIndexes:forKeyPath:" = NSKeyValueObserving;
	};
	NSAssertionHandler = {
	    "+currentHandler" = NSException;
	    "-handleFailureInFunction:file:lineNumber:description:,..." = NSException;
	    "-handleFailureInMethod:object:file:lineNumber:description:,..." = NSException;
	};
	NSAttributedString = {
	    "-attribute:atIndex:effectiveRange:" = NSAttributedString;
	    "-attribute:atIndex:longestEffectiveRange:inRange:" = NSAttributedString;
	    "-attributedSubstringFromRange:" = NSAttributedString;
	    "-attributesAtIndex:effectiveRange:" = NSAttributedString;
	    "-attributesAtIndex:longestEffectiveRange:inRange:" = NSAttributedString;
	    "-initWithAttributedString:" = NSAttributedString;
	    "-initWithString:" = NSAttributedString;
	    "-initWithString:attributes:" = NSAttributedString;
	    "-isEqualToAttributedString:" = NSAttributedString;
	    "-length" = NSAttributedString;
	    "-string" = NSAttributedString;
	};
	NSAutoreleasePool = {
	    "+addObject:" = NSAutoreleasePool;
	    "+allocWithZone:" = NSAutoreleasePool;
	    "+autoreleaseCountForObject:" = NSAutoreleasePool;
	    "+currentPool" = NSAutoreleasePool;
	    "+enableRelease:" = NSAutoreleasePool;
	    "+freeCache" = NSAutoreleasePool;
	    "+setPoolCountThreshold:" = NSAutoreleasePool;
	    "-addObject:" = NSAutoreleasePool;
	    "-autorelease" = NSAutoreleasePool;
	    "-autoreleaseCount" = NSAutoreleasePool;
	    "-drain" = NSAutoreleasePool;
	    "-emptyPool" = NSAutoreleasePool;
	    "-release" = NSAutoreleasePool;
	    "-retain" = NSAutoreleasePool;
	};
	NSBundle = {
	    "+URLForResource:withExtension:subdirectory:inBundleWithURL:" = NSBundle;
	    "+allBundles" = NSBundle;
	    "+allFrameworks" = NSBundle;
	    "+bundleForClass:" = NSBundle;
	    "+bundleWithIdentifier:" = NSBundle;
	    "+bundleWithPath:" = NSBundle;
	    "+bundleWithURL:" = NSBundle;
	    "+mainBundle" = NSBundle;
	    "+pathForResource:ofType:inDirectory:" = NSBundle;
	    "+pathForResource:ofType:inDirectory:withVersion:" = NSBundle;
	    "+pathsForResourcesOfType:inDirectory:" = NSBundle;
	    "+preferredLocalizationsFromArray:" = NSBundle;
	    "+preferredLocalizationsFromArray:forPreferences:" = NSBundle;
	    "-URLForAuxiliaryExecutable:" = NSBundle;
	    "-URLForResource:withExtension:" = NSBundle;
	    "-URLForResource:withExtension:subdirectory:" = NSBundle;
	    "-URLForResource:withExtension:subdirectory:localization:" = NSBundle;
	    "-builtInPlugInsPath" = NSBundle;
	    "-builtInPlugInsURL" = NSBundle;
	    "-bundleIdentifier" = NSBundle;
	    "-bundlePath" = NSBundle;
	    "-bundleURL" = NSBundle;
	    "-bundleVersion" = NSBundle;
	    "-classNamed:" = NSBundle;
	    "-developmentLocalization" = NSBundle;
	    "-executableArchitectures" = NSBundle;
	    "-executablePath" = NSBundle;
	    "-executableURL" = NSBundle;
	    "-infoDictionary" = NSBundle;
	    "-initWithPath:" = NSBundle;
	    "-initWithURL:" = NSBundle;
	    "-isLoaded" = NSBundle;
	    "-load" = NSBundle;
	    "-loadAndReturnError:" = NSBundle;
	    "-localizations" = NSBundle;
	    "-localizedInfoDictionary" = NSBundle;
	    "-localizedStringForKey:value:table:" = NSBundle;
	    "-objectForInfoDictionaryKey:" = NSBundle;
	    "-pathForAuxiliaryExecutable:" = NSBundle;
	    "-pathForResource:ofType:" = NSBundle;
	    "-pathForResource:ofType:inDirectory:" = NSBundle;
	    "-pathForResource:ofType:inDirectory:forLocalization:" = NSBundle;
	    "-pathsForResourcesOfType:inDirectory:" = NSBundle;
	    "-pathsForResourcesOfType:inDirectory:forLocalization:" = NSBundle;
	    "-preferredLocalizations" = NSBundle;
	    "-preflightAndReturnError:" = NSBundle;
	    "-principalClass" = NSBundle;
	    "-privateFrameworksPath" = NSBundle;
	    "-privateFrameworksURL" = NSBundle;
	    "-resourcePath" = NSBundle;
	    "-resourceURL" = NSBundle;
	    "-setBundleVersion:" = NSBundle;
	    "-unload" = NSBundle;
	};
	"NSBundle(GNUstep)" = {
	    "+assetDirForPath:" = NSBundle;
	    "+assetForPath:" = NSBundle;
	    "+assetForPath:withMode:" = NSBundle;
	    "+assetManager" = NSBundle;
	    "+bundleForLibrary:" = NSBundle;
	    "+bundleForLibrary:version:" = NSBundle;
	    "+pathForLibraryResource:ofType:inDirectory:" = NSBundle;
	    "+setJavaAssetManager:withJNIEnv:" = NSBundle;
	    "-cleanPathCache" = NSBundle;
	};
	NSCachedURLResponse = {
	    "-data" = NSURLCache;
	    "-initWithResponse:data:" = NSURLCache;
	    "-initWithResponse:data:userInfo:storagePolicy:" = NSURLCache;
	    "-response" = NSURLCache;
	    "-storagePolicy" = NSURLCache;
	    "-userInfo" = NSURLCache;
	};
	NSCalendarDate = {
	    "+calendarDate" = NSCalendarDate;
	    "+dateWithString:calendarFormat:" = NSCalendarDate;
	    "+dateWithString:calendarFormat:locale:" = NSCalendarDate;
	    "+dateWithYear:month:day:hour:minute:second:timeZone:" = NSCalendarDate;
	    "-addYear:month:day:hour:minute:second:" = NSCalendarDate;
	    "-calendarFormat" = NSCalendarDate;
	    "-dayOfCommonEra" = NSCalendarDate;
	    "-dayOfMonth" = NSCalendarDate;
	    "-dayOfWeek" = NSCalendarDate;
	    "-dayOfYear" = NSCalendarDate;
	    "-description" = NSCalendarDate;
	    "-descriptionWithCalendarFormat:" = NSCalendarDate;
	    "-descriptionWithCalendarFormat:locale:" = NSCalendarDate;
	    "-descriptionWithLocale:" = NSCalendarDate;
	    "-hourOfDay" = NSCalendarDate;
	    "-initWithString:" = NSCalendarDate;
	    "-initWithString:calendarFormat:" = NSCalendarDate;
	    "-initWithString:calendarFormat:locale:" = NSCalendarDate;
	    "-initWithYear:month:day:hour:minute:second:timeZone:" = NSCalendarDate;
	    "-minuteOfHour" = NSCalendarDate;
	    "-monthOfYear" = NSCalendarDate;
	    "-secondOfMinute" = NSCalendarDate;
	    "-setCalendarFormat:" = NSCalendarDate;
	    "-setTimeZone:" = NSCalendarDate;
	    "-timeZone" = NSCalendarDate;
	    "-timeZoneDetail" = NSCalendarDate;
	    "-yearOfCommonEra" = NSCalendarDate;
	};
	"NSCalendarDate(GregorianDate)" = {
	    "-absoluteGregorianDay:month:year:" = NSCalendarDate;
	    "-gregorianDateFromAbsolute:day:month:year:" = NSCalendarDate;
	    "-lastDayOfGregorianMonth:year:" = NSCalendarDate;
	};
	"NSCalendarDate(OPENSTEP)" = {
	    "-dateByAddingYears:months:days:hours:minutes:seconds:" = NSCalendarDate;
	    "-years:months:days:hours:minutes:seconds:sinceDate:" = NSCalendarDate;
	};
	NSCharacterSet = {
	    "+URLFragmentAllowedCharacterSet" = NSCharacterSet;
	    "+URLHostAllowedCharacterSet" = NSCharacterSet;
	    "+URLPasswordAllowedCharacterSet" = NSCharacterSet;
	    "+URLPathAllowedCharacterSet" = NSCharacterSet;
	    "+URLQueryAllowedCharacterSet" = NSCharacterSet;
	    "+URLUserAllowedCharacterSet" = NSCharacterSet;
	    "+alphanumericCharacterSet" = NSCharacterSet;
	    "+capitalizedLetterCharacterSet" = NSCharacterSet;
	    "+characterSetWithBitmapRepresentation:" = NSCharacterSet;
	    "+characterSetWithCharactersInString:" = NSCharacterSet;
	    "+characterSetWithContentsOfFile:" = NSCharacterSet;
	    "+characterSetWithRange:" = NSCharacterSet;
	    "+controlCharacterSet" = NSCharacterSet;
	    "+decimalDigitCharacterSet" = NSCharacterSet;
	    "+decomposableCharacterSet" = NSCharacterSet;
	    "+illegalCharacterSet" = NSCharacterSet;
	    "+letterCharacterSet" = NSCharacterSet;
	    "+lowercaseLetterCharacterSet" = NSCharacterSet;
	    "+newlineCharacterSet" = NSCharacterSet;
	    "+nonBaseCharacterSet" = NSCharacterSet;
	    "+punctuationCharacterSet" = NSCharacterSet;
	    "+symbolCharacterSet" = NSCharacterSet;
	    "+uppercaseLetterCharacterSet" = NSCharacterSet;
	    "+whitespaceAndNewlineCharacterSet" = NSCharacterSet;
	    "+whitespaceCharacterSet" = NSCharacterSet;
	    "-bitmapRepresentation" = NSCharacterSet;
	    "-characterIsMember:" = NSCharacterSet;
	    "-hasMemberInPlane:" = NSCharacterSet;
	    "-invertedSet" = NSCharacterSet;
	    "-isSupersetOfSet:" = NSCharacterSet;
	    "-longCharacterIsMember:" = NSCharacterSet;
	};
	NSClassDescription = {
	    "+classDescriptionForClass:" = NSClassDescription;
	    "+invalidateClassDescriptionCache" = NSClassDescription;
	    "+registerClassDescription:forClass:" = NSClassDescription;
	    "-attributeKeys" = NSClassDescription;
	    "-inverseForRelationshipKey:" = NSClassDescription;
	    "-toManyRelationshipKeys" = NSClassDescription;
	    "-toOneRelationshipKeys" = NSClassDescription;
	};
	NSCoder = {
	    "-allowsKeyedCoding" = NSCoder;
	    "-containsValueForKey:" = NSCoder;
	    "-decodeArrayOfObjCType:count:at:" = NSCoder;
	    "-decodeBoolForKey:" = NSCoder;
	    "-decodeBytesForKey:returnedLength:" = NSCoder;
	    "-decodeBytesWithReturnedLength:" = NSCoder;
	    "-decodeDataObject" = NSCoder;
	    "-decodeDoubleForKey:" = NSCoder;
	    "-decodeFloatForKey:" = NSCoder;
	    "-decodeInt32ForKey:" = NSCoder;
	    "-decodeInt64ForKey:" = NSCoder;
	    "-decodeIntForKey:" = NSCoder;
	    "-decodeIntegerForKey:" = NSCoder;
	    "-decodeObject" = NSCoder;
	    "-decodeObjectForKey:" = NSCoder;
	    "-decodeObjectOfClass:forKey:" = NSCoder;
	    "-decodeObjectOfClasses:forKey:" = NSCoder;
	    "-decodePoint" = NSCoder;
	    "-decodePropertyList" = NSCoder;
	    "-decodeRect" = NSCoder;
	    "-decodeSize" = NSCoder;
	    "-decodeValueOfObjCType:at:" = NSCoder;
	    "-decodeValuesOfObjCTypes:,..." = NSCoder;
	    "-encodeArrayOfObjCType:count:at:" = NSCoder;
	    "-encodeBool:forKey:" = NSCoder;
	    "-encodeBycopyObject:" = NSCoder;
	    "-encodeByrefObject:" = NSCoder;
	    "-encodeBytes:length:" = NSCoder;
	    "-encodeBytes:length:forKey:" = NSCoder;
	    "-encodeConditionalObject:" = NSCoder;
	    "-encodeConditionalObject:forKey:" = NSCoder;
	    "-encodeDataObject:" = NSCoder;
	    "-encodeDouble:forKey:" = NSCoder;
	    "-encodeFloat:forKey:" = NSCoder;
	    "-encodeInt32:forKey:" = NSCoder;
	    "-encodeInt64:forKey:" = NSCoder;
	    "-encodeInt:forKey:" = NSCoder;
	    "-encodeInteger:forKey:" = NSCoder;
	    "-encodeObject:" = NSCoder;
	    "-encodeObject:forKey:" = NSCoder;
	    "-encodePoint:" = NSCoder;
	    "-encodePropertyList:" = NSCoder;
	    "-encodeRect:" = NSCoder;
	    "-encodeRootObject:" = NSCoder;
	    "-encodeSize:" = NSCoder;
	    "-encodeValueOfObjCType:at:" = NSCoder;
	    "-encodeValuesOfObjCTypes:,..." = NSCoder;
	    "-objectZone" = NSCoder;
	    "-requiresSecureCoding" = NSCoder;
	    "-setObjectZone:" = NSCoder;
	    "-setRequiresSecureCoding:" = NSCoder;
	    "-systemVersion" = NSCoder;
	    "-versionForClassName:" = NSCoder;
	};
	"NSCoder(NSGeometryKeyedCoding)" = {
	    "-decodePointForKey:" = NSKeyedArchiver;
	    "-decodeRectForKey:" = NSKeyedArchiver;
	    "-decodeSizeForKey:" = NSKeyedArchiver;
	    "-encodePoint:forKey:" = NSKeyedArchiver;
	    "-encodeRect:forKey:" = NSKeyedArchiver;
	    "-encodeSize:forKey:" = NSKeyedArchiver;
	};
	NSCondition = {
	    "-broadcast" = NSLock;
	    "-name" = NSLock;
	    "-setName:" = NSLock;
	    "-signal" = NSLock;
	    "-wait" = NSLock;
	    "-waitUntilDate:" = NSLock;
	};
	NSConditionLock = {
	    "-condition" = NSLock;
	    "-initWithCondition:" = NSLock;
	    "-isLockedByCurrentThread" = NSLock;
	    "-lock" = NSLock;
	    "-lockBeforeDate:" = NSLock;
	    "-lockWhenCondition:" = NSLock;
	    "-lockWhenCondition:beforeDate:" = NSLock;
	    "-name" = NSLock;
	    "-setName:" = NSLock;
	    "-tryLock" = NSLock;
	    "-tryLockWhenCondition:" = NSLock;
	    "-unlock" = NSLock;
	    "-unlockWithCondition:" = NSLock;
	};
	NSConnection = {
	    "+allConnections" = NSConnection;
	    "+connectionWithReceivePort:sendPort:" = NSConnection;
	    "+connectionWithRegisteredName:host:" = NSConnection;
	    "+connectionWithRegisteredName:host:usingNameServer:" = NSConnection;
	    "+currentConversation" = NSConnection;
	    "+defaultConnection" = NSConnection;
	    "+rootProxyForConnectionWithRegisteredName:host:" = NSConnection;
	    "+rootProxyForConnectionWithRegisteredName:host:usingNameServer:" = NSConnection;
	    "+serviceConnectionWithName:rootObject:" = NSConnection;
	    "+serviceConnectionWithName:rootObject:usingNameServer:" = NSConnection;
	    "-addRequestMode:" = NSConnection;
	    "-addRunLoop:" = NSConnection;
	    "-delegate" = NSConnection;
	    "-enableMultipleThreads" = NSConnection;
	    "-independentConversationQueueing" = NSConnection;
	    "-initWithReceivePort:sendPort:" = NSConnection;
	    "-invalidate" = NSConnection;
	    "-isValid" = NSConnection;
	    "-localObjects" = NSConnection;
	    "-multipleThreadsEnabled" = NSConnection;
	    "-receivePort" = NSConnection;
	    "-registerName:" = NSConnection;
	    "-registerName:withNameServer:" = NSConnection;
	    "-remoteObjects" = NSConnection;
	    "-removeRequestMode:" = NSConnection;
	    "-removeRunLoop:" = NSConnection;
	    "-replyTimeout" = NSConnection;
	    "-requestModes" = NSConnection;
	    "-requestTimeout" = NSConnection;
	    "-rootObject" = NSConnection;
	    "-rootProxy" = NSConnection;
	    "-runInNewThread" = NSConnection;
	    "-sendPort" = NSConnection;
	    "-setDelegate:" = NSConnection;
	    "-setIndependentConversationQueueing:" = NSConnection;
	    "-setReplyTimeout:" = NSConnection;
	    "-setRequestMode:" = NSConnection;
	    "-setRequestTimeout:" = NSConnection;
	    "-setRootObject:" = NSConnection;
	    "-statistics" = NSConnection;
	};
	NSCountedSet = {
	    "-countForObject:" = NSSet;
	};
	"NSCountedSet(GNU_Uniquing)" = {
	    "-purge:" = NSSet;
	    "-unique:" = NSSet;
	};
	NSData = {
	    "+data" = NSData;
	    "+dataWithBytes:length:" = NSData;
	    "+dataWithBytesNoCopy:length:" = NSData;
	    "+dataWithBytesNoCopy:length:freeWhenDone:" = NSData;
	    "+dataWithContentsOfFile:" = NSData;
	    "+dataWithContentsOfMappedFile:" = NSData;
	    "+dataWithContentsOfURL:" = NSData;
	    "+dataWithData:" = NSData;
	    "-base64EncodedDataWithOptions:" = NSData;
	    "-base64EncodedStringWithOptions:" = NSData;
	    "-bytes" = NSData;
	    "-description" = NSData;
	    "-deserializeAlignedBytesLengthAtCursor:" = NSData;
	    "-deserializeBytes:length:atCursor:" = NSData;
	    "-deserializeDataAt:ofObjCType:atCursor:context:" = NSData;
	    "-deserializeIntAtCursor:" = NSData;
	    "-deserializeIntAtIndex:" = NSData;
	    "-deserializeInts:count:atCursor:" = NSData;
	    "-deserializeInts:count:atIndex:" = NSData;
	    "-getBytes:" = NSData;
	    "-getBytes:length:" = NSData;
	    "-getBytes:range:" = NSData;
	    "-initWithBase64EncodedData:options:" = NSData;
	    "-initWithBase64EncodedString:options:" = NSData;
	    "-initWithBytes:length:" = NSData;
	    "-initWithBytesNoCopy:length:" = NSData;
	    "-initWithBytesNoCopy:length:deallocator:" = NSData;
	    "-initWithBytesNoCopy:length:freeWhenDone:" = NSData;
	    "-initWithContentsOfFile:" = NSData;
	    "-initWithContentsOfMappedFile:" = NSData;
	    "-initWithContentsOfURL:" = NSData;
	    "-initWithData:" = NSData;
	    "-isEqualToData:" = NSData;
	    "-length" = NSData;
	    "-rangeOfData:options:range:" = NSData;
	    "-subdataWithRange:" = NSData;
	    "-writeToFile:atomically:" = NSData;
	    "-writeToFile:options:error:" = NSData;
	    "-writeToURL:atomically:" = NSData;
	    "-writeToURL:options:error:" = NSData;
	};
	"NSData(GNUstepExtensions)" = {
	    "+dataWithSharedBytes:length:" = NSData;
	    "+dataWithShmID:length:" = NSData;
	    "-deserializeTypeTag:andCrossRef:atCursor:" = NSData;
	};
	NSDate = {
	    "+date" = NSDate;
	    "+dateWithNaturalLanguageString:" = NSDate;
	    "+dateWithNaturalLanguageString:locale:" = NSDate;
	    "+dateWithString:" = NSDate;
	    "+dateWithTimeInterval:sinceDate:" = NSDate;
	    "+dateWithTimeIntervalSince1970:" = NSDate;
	    "+dateWithTimeIntervalSinceNow:" = NSDate;
	    "+dateWithTimeIntervalSinceReferenceDate:" = NSDate;
	    "+distantFuture" = NSDate;
	    "+distantPast" = NSDate;
	    "+timeIntervalSinceReferenceDate" = NSDate;
	    "-addTimeInterval:" = NSDate;
	    "-compare:" = NSDate;
	    "-dateByAddingTimeInterval:" = NSDate;
	    "-dateWithCalendarFormat:timeZone:" = NSDate;
	    "-description" = NSDate;
	    "-descriptionWithCalendarFormat:timeZone:locale:" = NSDate;
	    "-descriptionWithLocale:" = NSDate;
	    "-earlierDate:" = NSDate;
	    "-init" = NSDate;
	    "-initWithString:" = NSDate;
	    "-initWithTimeInterval:sinceDate:" = NSDate;
	    "-initWithTimeIntervalSince1970:" = NSDate;
	    "-initWithTimeIntervalSinceNow:" = NSDate;
	    "-initWithTimeIntervalSinceReferenceDate:" = NSDate;
	    "-isEqual:" = NSDate;
	    "-isEqualToDate:" = NSDate;
	    "-laterDate:" = NSDate;
	    "-timeIntervalSince1970" = NSDate;
	    "-timeIntervalSinceDate:" = NSDate;
	    "-timeIntervalSinceNow" = NSDate;
	    "-timeIntervalSinceReferenceDate" = NSDate;
	};
	NSDateFormatter = {
	    "+dateFormatFromTemplate:options:locale:" = NSDateFormatter;
	    "+defaultFormatterBehavior" = NSDateFormatter;
	    "+localizedStringFromDate:dateStyle:timeStyle:" = NSDateFormatter;
	    "+setDefaultFormatterBehavior:" = NSDateFormatter;
	    "-AMSymbol" = NSDateFormatter;
	    "-PMSymbol" = NSDateFormatter;
	    "-allowsNaturalLanguage" = NSDateFormatter;
	    "-calendar" = NSDateFormatter;
	    "-dateFormat" = NSDateFormatter;
	    "-dateFromString:" = NSDateFormatter;
	    "-dateStyle" = NSDateFormatter;
	    "-defaultDate" = NSDateFormatter;
	    "-doesRelativeDateFormatting" = NSDateFormatter;
	    "-eraSymbols" = NSDateFormatter;
	    "-formatterBehavior" = NSDateFormatter;
	    "-generatesCalendarDates" = NSDateFormatter;
	    "-getObjectValue:forString:range:error:" = NSDateFormatter;
	    "-gregorianStartDate" = NSDateFormatter;
	    "-initWithDateFormat:allowNaturalLanguage:" = NSDateFormatter;
	    "-isLenient" = NSDateFormatter;
	    "-locale" = NSDateFormatter;
	    "-longEraSymbols" = NSDateFormatter;
	    "-monthSymbols" = NSDateFormatter;
	    "-quarterSymbols" = NSDateFormatter;
	    "-setAMSymbol:" = NSDateFormatter;
	    "-setCalendar:" = NSDateFormatter;
	    "-setDateFormat:" = NSDateFormatter;
	    "-setDateStyle:" = NSDateFormatter;
	    "-setDefaultDate:" = NSDateFormatter;
	    "-setDoesRelativeDateFormatting:" = NSDateFormatter;
	    "-setEraSymbols:" = NSDateFormatter;
	    "-setFormatterBehavior:" = NSDateFormatter;
	    "-setGeneratesCalendarDates:" = NSDateFormatter;
	    "-setGregorianStartDate:" = NSDateFormatter;
	    "-setLenient:" = NSDateFormatter;
	    "-setLocale:" = NSDateFormatter;
	    "-setLongEraSymbols:" = NSDateFormatter;
	    "-setMonthSymbols:" = NSDateFormatter;
	    "-setPMSymbol:" = NSDateFormatter;
	    "-setQuarterSymbols:" = NSDateFormatter;
	    "-setShortMonthSymbols:" = NSDateFormatter;
	    "-setShortQuarterSymbols:" = NSDateFormatter;
	    "-setShortStandaloneMonthSymbols:" = NSDateFormatter;
	    "-setShortStandaloneQuarterSymbols:" = NSDateFormatter;
	    "-setShortStandaloneWeekdaySymbols:" = NSDateFormatter;
	    "-setShortWeekdaySymbols:" = NSDateFormatter;
	    "-setStandaloneMonthSymbols:" = NSDateFormatter;
	    "-setStandaloneQuarterSymbols:" = NSDateFormatter;
	    "-setStandaloneWeekdaySymbols:" = NSDateFormatter;
	    "-setTimeStyle:" = NSDateFormatter;
	    "-setTimeZone:" = NSDateFormatter;
	    "-setTwoDigitStartDate:" = NSDateFormatter;
	    "-setVeryShortMonthSymbols:" = NSDateFormatter;
	    "-setVeryShortStandaloneMonthSymbols:" = NSDateFormatter;
	    "-setVeryShortStandaloneWeekdaySymbols:" = NSDateFormatter;
	    "-setVeryShortWeekdaySymbols:" = NSDateFormatter;
	    "-setWeekdaySymbols:" = NSDateFormatter;
	    "-shortMonthSymbols" = NSDateFormatter;
	    "-shortQuarterSymbols" = NSDateFormatter;
	    "-shortStandaloneMonthSymbols" = NSDateFormatter;
	    "-shortStandaloneQuarterSymbols" = NSDateFormatter;
	    "-shortStandaloneWeekdaySymbols" = NSDateFormatter;
	    "-shortWeekdaySymbols" = NSDateFormatter;
	    "-standaloneMonthSymbols" = NSDateFormatter;
	    "-standaloneQuarterSymbols" = NSDateFormatter;
	    "-standaloneWeekdaySymbols" = NSDateFormatter;
	    "-stringFromDate:" = NSDateFormatter;
	    "-timeStyle" = NSDateFormatter;
	    "-timeZone" = NSDateFormatter;
	    "-twoDigitStartDate" = NSDateFormatter;
	    "-veryShortMonthSymbols" = NSDateFormatter;
	    "-veryShortStandaloneMonthSymbols" = NSDateFormatter;
	    "-veryShortStandaloneWeekdaySymbols" = NSDateFormatter;
	    "-veryShortWeekdaySymbols" = NSDateFormatter;
	    "-weekdaySymbols" = NSDateFormatter;
	};
	NSDecimalNumber = {
	    "+decimalNumberWithDecimal:" = NSDecimalNumber;
	    "+decimalNumberWithMantissa:exponent:isNegative:" = NSDecimalNumber;
	    "+decimalNumberWithString:" = NSDecimalNumber;
	    "+decimalNumberWithString:locale:" = NSDecimalNumber;
	    "+defaultBehavior" = NSDecimalNumber;
	    "+maximumDecimalNumber" = NSDecimalNumber;
	    "+minimumDecimalNumber" = NSDecimalNumber;
	    "+notANumber" = NSDecimalNumber;
	    "+one" = NSDecimalNumber;
	    "+setDefaultBehavior:" = NSDecimalNumber;
	    "+zero" = NSDecimalNumber;
	    "-compare:" = NSDecimalNumber;
	    "-decimalNumberByAdding:" = NSDecimalNumber;
	    "-decimalNumberByAdding:withBehavior:" = NSDecimalNumber;
	    "-decimalNumberByDividingBy:" = NSDecimalNumber;
	    "-decimalNumberByDividingBy:withBehavior:" = NSDecimalNumber;
	    "-decimalNumberByMultiplyingBy:" = NSDecimalNumber;
	    "-decimalNumberByMultiplyingBy:withBehavior:" = NSDecimalNumber;
	    "-decimalNumberByMultiplyingByPowerOf10:" = NSDecimalNumber;
	    "-decimalNumberByMultiplyingByPowerOf10:withBehavior:" = NSDecimalNumber;
	    "-decimalNumberByRaisingToPower:" = NSDecimalNumber;
	    "-decimalNumberByRaisingToPower:withBehavior:" = NSDecimalNumber;
	    "-decimalNumberByRoundingAccordingToBehavior:" = NSDecimalNumber;
	    "-decimalNumberBySubtracting:" = NSDecimalNumber;
	    "-decimalNumberBySubtracting:withBehavior:" = NSDecimalNumber;
	    "-decimalValue" = NSDecimalNumber;
	    "-descriptionWithLocale:" = NSDecimalNumber;
	    "-doubleValue" = NSDecimalNumber;
	    "-initWithDecimal:" = NSDecimalNumber;
	    "-initWithMantissa:exponent:isNegative:" = NSDecimalNumber;
	    "-initWithString:" = NSDecimalNumber;
	    "-initWithString:locale:" = NSDecimalNumber;
	    "-objCType" = NSDecimalNumber;
	};
	NSDecimalNumberHandler = {
	    "+decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:" = NSDecimalNumber;
	    "+defaultDecimalNumberHandler" = NSDecimalNumber;
	    "-initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:" = NSDecimalNumber;
	};
	NSDeserializer = {
	    "+deserializePropertyListFromData:atCursor:mutableContainers:" = NSSerialization;
	    "+deserializePropertyListFromData:mutableContainers:" = NSSerialization;
	    "+deserializePropertyListLazilyFromData:atCursor:length:mutableContainers:" = NSSerialization;
	};
	"NSDeserializer(GNUstep)" = {
	    "+uniquing:" = NSSerialization;
	};
	NSDictionary = {
	    "+dictionary" = NSDictionary;
	    "+dictionaryWithContentsOfFile:" = NSDictionary;
	    "+dictionaryWithContentsOfURL:" = NSDictionary;
	    "+dictionaryWithDictionary:" = NSDictionary;
	    "+dictionaryWithObject:forKey:" = NSDictionary;
	    "+dictionaryWithObjects:forKeys:" = NSDictionary;
	    "+dictionaryWithObjects:forKeys:count:" = NSDictionary;
	    "+dictionaryWithObjectsAndKeys:,..." = NSDictionary;
	    "-allKeys" = NSDictionary;
	    "-allKeysForObject:" = NSDictionary;
	    "-allValues" = NSDictionary;
	    "-count" = NSDictionary;
	    "-description" = NSDictionary;
	    "-descriptionInStringsFileFormat" = NSDictionary;
	    "-descriptionWithLocale:" = NSDictionary;
	    "-descriptionWithLocale:indent:" = NSDictionary;
	    "-enumerateKeysAndObjectsUsingBlock:" = NSDictionary;
	    "-enumerateKeysAndObjectsWithOptions:usingBlock:" = NSDictionary;
	    "-getObjects:andKeys:" = NSDictionary;
	    "-init" = NSDictionary;
	    "-initWithContentsOfFile:" = NSDictionary;
	    "-initWithContentsOfURL:" = NSDictionary;
	    "-initWithDictionary:" = NSDictionary;
	    "-initWithDictionary:copyItems:" = NSDictionary;
	    "-initWithObjects:forKeys:" = NSDictionary;
	    "-initWithObjects:forKeys:count:" = NSDictionary;
	    "-initWithObjectsAndKeys:,..." = NSDictionary;
	    "-isEqualToDictionary:" = NSDictionary;
	    "-keyEnumerator" = NSDictionary;
	    "-keysOfEntriesPassingTest:" = NSDictionary;
	    "-keysOfEntriesWithOptions:passingTest:" = NSDictionary;
	    "-keysSortedByValueUsingComparator:" = NSDictionary;
	    "-keysSortedByValueUsingSelector:" = NSDictionary;
	    "-keysSortedByValueWithOptions:usingComparator:" = NSDictionary;
	    "-objectEnumerator" = NSDictionary;
	    "-objectForKey:" = NSDictionary;
	    "-objectForKeyedSubscript:" = NSDictionary;
	    "-objectsForKeys:notFoundMarker:" = NSDictionary;
	    "-valueForKey:" = NSDictionary;
	    "-writeToFile:atomically:" = NSDictionary;
	    "-writeToURL:atomically:" = NSDictionary;
	};
	"NSDictionary(NSFileAttributes)" = {
	    "-fileCreationDate" = NSFileManager;
	    "-fileExtensionHidden" = NSFileManager;
	    "-fileGroupOwnerAccountID" = NSFileManager;
	    "-fileGroupOwnerAccountName" = NSFileManager;
	    "-fileHFSCreatorCode" = NSFileManager;
	    "-fileHFSTypeCode" = NSFileManager;
	    "-fileIsAppendOnly" = NSFileManager;
	    "-fileIsImmutable" = NSFileManager;
	    "-fileModificationDate" = NSFileManager;
	    "-fileOwnerAccountID" = NSFileManager;
	    "-fileOwnerAccountName" = NSFileManager;
	    "-filePosixPermissions" = NSFileManager;
	    "-fileSize" = NSFileManager;
	    "-fileSystemFileNumber" = NSFileManager;
	    "-fileSystemNumber" = NSFileManager;
	    "-fileType" = NSFileManager;
	};
	NSDirectoryEnumerator = {
	    "-directoryAttributes" = NSFileManager;
	    "-fileAttributes" = NSFileManager;
	    "-skipDescendents" = NSFileManager;
	};
	NSDistantObject = {
	    "+proxyWithLocal:connection:" = NSDistantObject;
	    "+proxyWithTarget:connection:" = NSDistantObject;
	    "-connectionForProxy" = NSDistantObject;
	    "-initWithLocal:connection:" = NSDistantObject;
	    "-initWithTarget:connection:" = NSDistantObject;
	    "-methodSignatureForSelector:" = NSDistantObject;
	    "-setProtocolForProxy:" = NSDistantObject;
	};
	NSDistributedLock = {
	    "+lockWithPath:" = NSDistributedLock;
	    "-breakLock" = NSDistributedLock;
	    "-initWithPath:" = NSDistributedLock;
	    "-lockDate" = NSDistributedLock;
	    "-tryLock" = NSDistributedLock;
	    "-unlock" = NSDistributedLock;
	};
	NSDistributedNotificationCenter = {
	    "+defaultCenter" = NSDistributedNotificationCenter;
	    "+notificationCenterForType:" = NSDistributedNotificationCenter;
	    "-addObserver:selector:name:object:" = NSDistributedNotificationCenter;
	    "-addObserver:selector:name:object:suspensionBehavior:" = NSDistributedNotificationCenter;
	    "-postNotification:" = NSDistributedNotificationCenter;
	    "-postNotificationName:object:" = NSDistributedNotificationCenter;
	    "-postNotificationName:object:userInfo:" = NSDistributedNotificationCenter;
	    "-postNotificationName:object:userInfo:deliverImmediately:" = NSDistributedNotificationCenter;
	    "-removeObserver:name:object:" = NSDistributedNotificationCenter;
	    "-setSuspended:" = NSDistributedNotificationCenter;
	    "-suspended" = NSDistributedNotificationCenter;
	};
	NSEnumerator = {
	    "-allObjects" = NSEnumerator;
	    "-nextObject" = NSEnumerator;
	};
	NSError = {
	    "+errorWithDomain:code:userInfo:" = NSError;
	    "-code" = NSError;
	    "-domain" = NSError;
	    "-initWithDomain:code:userInfo:" = NSError;
	    "-localizedDescription" = NSError;
	    "-localizedFailureReason" = NSError;
	    "-localizedRecoveryOptions" = NSError;
	    "-localizedRecoverySuggestion" = NSError;
	    "-recoveryAttempter" = NSError;
	    "-userInfo" = NSError;
	};
	NSException = {
	    "+exceptionWithName:reason:userInfo:" = NSException;
	    "+raise:format:,..." = NSException;
	    "+raise:format:arguments:" = NSException;
	    "-callStackReturnAddresses" = NSException;
	    "-callStackSymbols" = NSException;
	    "-initWithName:reason:userInfo:" = NSException;
	    "-name" = NSException;
	    "-raise" = NSException;
	    "-reason" = NSException;
	    "-userInfo" = NSException;
	};
	NSFileHandle = {
	    "+fileHandleForReadingAtPath:" = NSFileHandle;
	    "+fileHandleForReadingFromURL:error:" = NSFileHandle;
	    "+fileHandleForUpdatingAtPath:" = NSFileHandle;
	    "+fileHandleForUpdatingURL:error:" = NSFileHandle;
	    "+fileHandleForWritingAtPath:" = NSFileHandle;
	    "+fileHandleForWritingToURL:error:" = NSFileHandle;
	    "+fileHandleWithNullDevice" = NSFileHandle;
	    "+fileHandleWithStandardError" = NSFileHandle;
	    "+fileHandleWithStandardInput" = NSFileHandle;
	    "+fileHandleWithStandardOutput" = NSFileHandle;
	    "-acceptConnectionInBackgroundAndNotify" = NSFileHandle;
	    "-acceptConnectionInBackgroundAndNotifyForModes:" = NSFileHandle;
	    "-availableData" = NSFileHandle;
	    "-closeFile" = NSFileHandle;
	    "-fileDescriptor" = NSFileHandle;
	    "-initWithFileDescriptor:" = NSFileHandle;
	    "-initWithFileDescriptor:closeOnDealloc:" = NSFileHandle;
	    "-initWithNativeHandle:" = NSFileHandle;
	    "-initWithNativeHandle:closeOnDealloc:" = NSFileHandle;
	    "-nativeHandle" = NSFileHandle;
	    "-offsetInFile" = NSFileHandle;
	    "-readDataOfLength:" = NSFileHandle;
	    "-readDataToEndOfFile" = NSFileHandle;
	    "-readInBackgroundAndNotify" = NSFileHandle;
	    "-readInBackgroundAndNotifyForModes:" = NSFileHandle;
	    "-readToEndOfFileInBackgroundAndNotify" = NSFileHandle;
	    "-readToEndOfFileInBackgroundAndNotifyForModes:" = NSFileHandle;
	    "-seekToEndOfFile" = NSFileHandle;
	    "-seekToFileOffset:" = NSFileHandle;
	    "-synchronizeFile" = NSFileHandle;
	    "-truncateFileAtOffset:" = NSFileHandle;
	    "-waitForDataInBackgroundAndNotify" = NSFileHandle;
	    "-waitForDataInBackgroundAndNotifyForModes:" = NSFileHandle;
	    "-writeData:" = NSFileHandle;
	};
	"NSFileHandle(GNUstepExtensions)" = {
	    "+fileHandleAsClientAtAddress:service:protocol:" = NSFileHandle;
	    "+fileHandleAsClientInBackgroundAtAddress:service:protocol:" = NSFileHandle;
	    "+fileHandleAsClientInBackgroundAtAddress:service:protocol:forModes:" = NSFileHandle;
	    "+fileHandleAsServerAtAddress:service:protocol:" = NSFileHandle;
	    "-readDataInBackgroundAndNotifyLength:" = NSFileHandle;
	    "-readDataInBackgroundAndNotifyLength:forModes:" = NSFileHandle;
	    "-readInProgress" = NSFileHandle;
	    "-socketAddress" = NSFileHandle;
	    "-socketLocalAddress" = NSFileHandle;
	    "-socketLocalService" = NSFileHandle;
	    "-socketProtocol" = NSFileHandle;
	    "-socketService" = NSFileHandle;
	    "-useCompression" = NSFileHandle;
	    "-writeInBackgroundAndNotify:" = NSFileHandle;
	    "-writeInBackgroundAndNotify:forModes:" = NSFileHandle;
	    "-writeInProgress" = NSFileHandle;
	};
	"NSFileHandle(GNUstepTLS)" = {
	    "+setData:forTLSFile:" = NSFileHandle;
	    "+sslClass" = NSFileHandle;
	    "-sslAccept" = NSFileHandle;
	    "-sslConnect" = NSFileHandle;
	    "-sslDisconnect" = NSFileHandle;
	    "-sslHandshakeEstablished:outgoing:" = NSFileHandle;
	    "-sslIssuer" = NSFileHandle;
	    "-sslOwner" = NSFileHandle;
	    "-sslSetCertificate:privateKey:PEMpasswd:" = NSFileHandle;
	    "-sslSetOptions:" = NSFileHandle;
	};
	NSFileManager = {
	    "+defaultManager" = NSFileManager;
	    "-URLForDirectory:inDomain:appropriateForURL:create:error:" = NSFileManager;
	    "-attributesOfFileSystemForPath:error:" = NSFileManager;
	    "-attributesOfItemAtPath:error:" = NSFileManager;
	    "-changeCurrentDirectoryPath:" = NSFileManager;
	    "-changeFileAttributes:atPath:" = NSFileManager;
	    "-componentsToDisplayForPath:" = NSFileManager;
	    "-contentsAtPath:" = NSFileManager;
	    "-contentsEqualAtPath:andPath:" = NSFileManager;
	    "-contentsOfDirectoryAtPath:error:" = NSFileManager;
	    "-contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:" = NSFileManager;
	    "-copyItemAtPath:toPath:error:" = NSFileManager;
	    "-copyItemAtURL:toURL:error:" = NSFileManager;
	    "-copyPath:toPath:handler:" = NSFileManager;
	    "-createDirectoryAtPath:attributes:" = NSFileManager;
	    "-createDirectoryAtPath:withIntermediateDirectories:attributes:error:" = NSFileManager;
	    "-createDirectoryAtURL:withIntermediateDirectories:attributes:error:" = NSFileManager;
	    "-createFileAtPath:contents:attributes:" = NSFileManager;
	    "-createSymbolicLinkAtPath:pathContent:" = NSFileManager;
	    "-createSymbolicLinkAtPath:withDestinationPath:error:" = NSFileManager;
	    "-currentDirectoryPath" = NSFileManager;
	    "-delegate" = NSFileManager;
	    "-directoryContentsAtPath:" = NSFileManager;
	    "-displayNameAtPath:" = NSFileManager;
	    "-enumeratorAtPath:" = NSFileManager;
	    "-enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:" = NSFileManager;
	    "-fileAttributesAtPath:traverseLink:" = NSFileManager;
	    "-fileExistsAtPath:" = NSFileManager;
	    "-fileExistsAtPath:isDirectory:" = NSFileManager;
	    "-fileSystemAttributesAtPath:" = NSFileManager;
	    "-fileSystemRepresentationWithPath:" = NSFileManager;
	    "-isDeletableFileAtPath:" = NSFileManager;
	    "-isExecutableFileAtPath:" = NSFileManager;
	    "-isReadableFileAtPath:" = NSFileManager;
	    "-isWritableFileAtPath:" = NSFileManager;
	    "-linkPath:toPath:handler:" = NSFileManager;
	    "-moveItemAtPath:toPath:error:" = NSFileManager;
	    "-moveItemAtURL:toURL:error:" = NSFileManager;
	    "-movePath:toPath:handler:" = NSFileManager;
	    "-pathContentOfSymbolicLinkAtPath:" = NSFileManager;
	    "-removeFileAtPath:handler:" = NSFileManager;
	    "-removeItemAtPath:error:" = NSFileManager;
	    "-removeItemAtURL:error:" = NSFileManager;
	    "-setDelegate:" = NSFileManager;
	    "-stringWithFileSystemRepresentation:length:" = NSFileManager;
	    "-subpathsAtPath:" = NSFileManager;
	};
	NSFormatter = {
	    "-attributedStringForObjectValue:withDefaultAttributes:" = NSFormatter;
	    "-editingStringForObjectValue:" = NSFormatter;
	    "-getObjectValue:forString:errorDescription:" = NSFormatter;
	    "-isPartialStringValid:newEditingString:errorDescription:" = NSFormatter;
	    "-isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:" = NSFormatter;
	    "-stringForObjectValue:" = NSFormatter;
	};
	NSHTTPCookie = {
	    "+cookieWithProperties:" = NSHTTPCookie;
	    "+cookiesWithResponseHeaderFields:forURL:" = NSHTTPCookie;
	    "+requestHeaderFieldsWithCookies:" = NSHTTPCookie;
	    "-comment" = NSHTTPCookie;
	    "-commentURL" = NSHTTPCookie;
	    "-domain" = NSHTTPCookie;
	    "-expiresDate" = NSHTTPCookie;
	    "-initWithProperties:" = NSHTTPCookie;
	    "-isHTTPOnly" = NSHTTPCookie;
	    "-isSecure" = NSHTTPCookie;
	    "-isSessionOnly" = NSHTTPCookie;
	    "-name" = NSHTTPCookie;
	    "-path" = NSHTTPCookie;
	    "-portList" = NSHTTPCookie;
	    "-properties" = NSHTTPCookie;
	    "-value" = NSHTTPCookie;
	    "-version" = NSHTTPCookie;
	};
	NSHTTPCookieStorage = {
	    "+sharedHTTPCookieStorage" = NSHTTPCookieStorage;
	    "-cookieAcceptPolicy" = NSHTTPCookieStorage;
	    "-cookies" = NSHTTPCookieStorage;
	    "-cookiesForURL:" = NSHTTPCookieStorage;
	    "-deleteCookie:" = NSHTTPCookieStorage;
	    "-setCookie:" = NSHTTPCookieStorage;
	    "-setCookieAcceptPolicy:" = NSHTTPCookieStorage;
	    "-setCookies:forURL:mainDocumentURL:" = NSHTTPCookieStorage;
	};
	NSHTTPURLResponse = {
	    "+localizedStringForStatusCode:" = NSURLResponse;
	    "-allHeaderFields" = NSURLResponse;
	    "-statusCode" = NSURLResponse;
	};
	NSHashTable = {
	    "+hashTableWithOptions:" = NSHashTable;
	    "+hashTableWithWeakObjects" = NSHashTable;
	    "+weakObjectsHashTable" = NSHashTable;
	    "-addObject:" = NSHashTable;
	    "-allObjects" = NSHashTable;
	    "-anyObject" = NSHashTable;
	    "-containsObject:" = NSHashTable;
	    "-count" = NSHashTable;
	    "-initWithOptions:capacity:" = NSHashTable;
	    "-initWithPointerFunctions:capacity:" = NSHashTable;
	    "-intersectHashTable:" = NSHashTable;
	    "-intersectsHashTable:" = NSHashTable;
	    "-isEqualToHashTable:" = NSHashTable;
	    "-isSubsetOfHashTable:" = NSHashTable;
	    "-member:" = NSHashTable;
	    "-minusHashTable:" = NSHashTable;
	    "-objectEnumerator" = NSHashTable;
	    "-pointerFunctions" = NSHashTable;
	    "-removeAllObjects" = NSHashTable;
	    "-removeObject:" = NSHashTable;
	    "-setRepresentation" = NSHashTable;
	    "-unionHashTable:" = NSHashTable;
	};
	NSHost = {
	    "+currentHost" = NSHost;
	    "+flushHostCache" = NSHost;
	    "+hostWithAddress:" = NSHost;
	    "+hostWithName:" = NSHost;
	    "+isHostCacheEnabled" = NSHost;
	    "+setHostCacheEnabled:" = NSHost;
	    "-address" = NSHost;
	    "-addresses" = NSHost;
	    "-isEqualToHost:" = NSHost;
	    "-localizedName" = NSHost;
	    "-name" = NSHost;
	    "-names" = NSHost;
	};
	"NSHost(GNUstep)" = {
	    "+localHost" = NSHost;
	};
	NSIndexPath = {
	    "+indexPathWithIndex:" = NSIndexPath;
	    "+indexPathWithIndexes:length:" = NSIndexPath;
	    "-compare:" = NSIndexPath;
	    "-getIndexes:" = NSIndexPath;
	    "-indexAtPosition:" = NSIndexPath;
	    "-indexPathByAddingIndex:" = NSIndexPath;
	    "-indexPathByRemovingLastIndex" = NSIndexPath;
	    "-initWithIndex:" = NSIndexPath;
	    "-initWithIndexes:length:" = NSIndexPath;
	    "-length" = NSIndexPath;
	};
	NSIndexSet = {
	    "+indexSet" = NSIndexSet;
	    "+indexSetWithIndex:" = NSIndexSet;
	    "+indexSetWithIndexesInRange:" = NSIndexSet;
	    "-containsIndex:" = NSIndexSet;
	    "-containsIndexes:" = NSIndexSet;
	    "-containsIndexesInRange:" = NSIndexSet;
	    "-count" = NSIndexSet;
	    "-countOfIndexesInRange:" = NSIndexSet;
	    "-enumerateIndexesInRange:options:usingBlock:" = NSIndexSet;
	    "-enumerateIndexesUsingBlock:" = NSIndexSet;
	    "-enumerateIndexesWithOptions:usingBlock:" = NSIndexSet;
	    "-firstIndex" = NSIndexSet;
	    "-getIndexes:maxCount:inIndexRange:" = NSIndexSet;
	    "-indexGreaterThanIndex:" = NSIndexSet;
	    "-indexGreaterThanOrEqualToIndex:" = NSIndexSet;
	    "-indexLessThanIndex:" = NSIndexSet;
	    "-indexLessThanOrEqualToIndex:" = NSIndexSet;
	    "-initWithIndex:" = NSIndexSet;
	    "-initWithIndexSet:" = NSIndexSet;
	    "-initWithIndexesInRange:" = NSIndexSet;
	    "-intersectsIndexesInRange:" = NSIndexSet;
	    "-isEqualToIndexSet:" = NSIndexSet;
	    "-lastIndex" = NSIndexSet;
	};
	NSInputStream = {
	    "+inputStreamWithData:" = NSStream;
	    "+inputStreamWithFileAtPath:" = NSStream;
	    "+inputStreamWithURL:" = NSStream;
	    "-getBuffer:length:" = NSStream;
	    "-hasBytesAvailable" = NSStream;
	    "-initWithData:" = NSStream;
	    "-initWithFileAtPath:" = NSStream;
	    "-initWithURL:" = NSStream;
	    "-read:maxLength:" = NSStream;
	};
	NSInvocation = {
	    "+invocationWithMethodSignature:" = NSInvocation;
	    "-argumentsRetained" = NSInvocation;
	    "-getArgument:atIndex:" = NSInvocation;
	    "-getReturnValue:" = NSInvocation;
	    "-invoke" = NSInvocation;
	    "-invokeWithTarget:" = NSInvocation;
	    "-methodSignature" = NSInvocation;
	    "-retainArguments" = NSInvocation;
	    "-retainArgumentsIncludingTarget:" = NSInvocation;
	    "-selector" = NSInvocation;
	    "-setArgument:atIndex:" = NSInvocation;
	    "-setReturnValue:" = NSInvocation;
	    "-setSelector:" = NSInvocation;
	    "-setTarget:" = NSInvocation;
	    "-target" = NSInvocation;
	    "-targetRetained" = NSInvocation;
	};
	"NSInvocation(GNUstep)" = {
	    "-sendsToSuper" = NSInvocation;
	    "-setSendsToSuper:" = NSInvocation;
	};
	"NSInvocation(MacroSetup)" = {
	    "+_newProxyForInvocation:" = NSInvocation;
	    "+_newProxyForMessage:" = NSInvocation;
	    "+_returnInvocationAndDestroyProxy:" = NSInvocation;
	    "-initWithMethodSignature:" = NSInvocation;
	};
	NSKeyedArchiver = {
	    "+archiveRootObject:toFile:" = NSKeyedArchiver;
	    "+archivedDataWithRootObject:" = NSKeyedArchiver;
	    "+archivedDataWithRootObject:requiringSecureCoding:error:" = NSKeyedArchiver;
	    "+classNameForClass:" = NSKeyedArchiver;
	    "+setClassName:forClass:" = NSKeyedArchiver;
	    "-classNameForClass:" = NSKeyedArchiver;
	    "-delegate" = NSKeyedArchiver;
	    "-encodeBool:forKey:" = NSKeyedArchiver;
	    "-encodeBytes:length:forKey:" = NSKeyedArchiver;
	    "-encodeConditionalObject:forKey:" = NSKeyedArchiver;
	    "-encodeDouble:forKey:" = NSKeyedArchiver;
	    "-encodeFloat:forKey:" = NSKeyedArchiver;
	    "-encodeInt32:forKey:" = NSKeyedArchiver;
	    "-encodeInt64:forKey:" = NSKeyedArchiver;
	    "-encodeInt:forKey:" = NSKeyedArchiver;
	    "-encodeObject:forKey:" = NSKeyedArchiver;
	    "-finishEncoding" = NSKeyedArchiver;
	    "-initForWritingWithMutableData:" = NSKeyedArchiver;
	    "-outputFormat" = NSKeyedArchiver;
	    "-requiresSecureCoding" = NSKeyedArchiver;
	    "-setClassName:forClass:" = NSKeyedArchiver;
	    "-setDelegate:" = NSKeyedArchiver;
	    "-setOutputFormat:" = NSKeyedArchiver;
	    "-setRequiresSecureCoding:" = NSKeyedArchiver;
	};
	"NSKeyedArchiver(Internal)" = {
	    "-_encodeArrayOfObjects:forKey:" = NSKeyedArchiver;
	    "-_encodePropertyList:forKey:" = NSKeyedArchiver;
	};
	NSKeyedUnarchiver = {
	    "+classForClassName:" = NSKeyedArchiver;
	    "+setClass:forClassName:" = NSKeyedArchiver;
	    "+unarchiveObjectWithData:" = NSKeyedArchiver;
	    "+unarchiveObjectWithFile:" = NSKeyedArchiver;
	    "-classForClassName:" = NSKeyedArchiver;
	    "-containsValueForKey:" = NSKeyedArchiver;
	    "-decodeBoolForKey:" = NSKeyedArchiver;
	    "-decodeBytesForKey:returnedLength:" = NSKeyedArchiver;
	    "-decodeDoubleForKey:" = NSKeyedArchiver;
	    "-decodeFloatForKey:" = NSKeyedArchiver;
	    "-decodeInt32ForKey:" = NSKeyedArchiver;
	    "-decodeInt64ForKey:" = NSKeyedArchiver;
	    "-decodeIntForKey:" = NSKeyedArchiver;
	    "-decodeObjectForKey:" = NSKeyedArchiver;
	    "-delegate" = NSKeyedArchiver;
	    "-finishDecoding" = NSKeyedArchiver;
	    "-initForReadingWithData:" = NSKeyedArchiver;
	    "-requiresSecureCoding" = NSKeyedArchiver;
	    "-setClass:forClassName:" = NSKeyedArchiver;
	    "-setDelegate:" = NSKeyedArchiver;
	    "-setRequiresSecureCoding:" = NSKeyedArchiver;
	};
	"NSKeyedUnarchiver(Internal)" = {
	    "-_decodeArrayOfObjectsForKey:" = NSKeyedArchiver;
	    "-_decodePropertyListForKey:" = NSKeyedArchiver;
	    "-replaceObject:withObject:" = NSKeyedArchiver;
	};
	NSLock = {
	    "-isLockedByCurrentThread" = NSLock;
	    "-lock" = NSLock;
	    "-lockBeforeDate:" = NSLock;
	    "-name" = NSLock;
	    "-setName:" = NSLock;
	    "-tryLock" = NSLock;
	    "-unlock" = NSLock;
	};
	NSMapTable = {
	    "+mapTableWithKeyOptions:valueOptions:" = NSMapTable;
	    "+mapTableWithStrongToStrongObjects" = NSMapTable;
	    "+mapTableWithStrongToWeakObjects" = NSMapTable;
	    "+mapTableWithWeakToStrongObjects" = NSMapTable;
	    "+mapTableWithWeakToWeakObjects" = NSMapTable;
	    "+strongToStrongObjectsMapTable" = NSMapTable;
	    "+strongToWeakObjectsMapTable" = NSMapTable;
	    "+weakToStrongObjectsMapTable" = NSMapTable;
	    "+weakToWeakObjectsMapTable" = NSMapTable;
	    "-count" = NSMapTable;
	    "-dictionaryRepresentation" = NSMapTable;
	    "-initWithKeyOptions:valueOptions:capacity:" = NSMapTable;
	    "-initWithKeyPointerFunctions:valuePointerFunctions:capacity:" = NSMapTable;
	    "-keyEnumerator" = NSMapTable;
	    "-keyPointerFunctions" = NSMapTable;
	    "-objectEnumerator" = NSMapTable;
	    "-objectForKey:" = NSMapTable;
	    "-removeAllObjects" = NSMapTable;
	    "-removeObjectForKey:" = NSMapTable;
	    "-setObject:forKey:" = NSMapTable;
	    "-valuePointerFunctions" = NSMapTable;
	};
	NSMessagePortNameServer = {
	    "+sharedInstance" = NSPortNameServer;
	    "-portForName:" = NSPortNameServer;
	    "-portForName:onHost:" = NSPortNameServer;
	};
	NSMethodSignature = {
	    "+signatureWithObjCTypes:" = NSMethodSignature;
	    "-frameLength" = NSMethodSignature;
	    "-getArgumentTypeAtIndex:" = NSMethodSignature;
	    "-isOneway" = NSMethodSignature;
	    "-methodReturnLength" = NSMethodSignature;
	    "-methodReturnType" = NSMethodSignature;
	    "-numberOfArguments" = NSMethodSignature;
	};
	NSMutableArray = {
	    "+arrayWithCapacity:" = NSArray;
	    "-addObject:" = NSArray;
	    "-addObjectsFromArray:" = NSArray;
	    "-exchangeObjectAtIndex:withObjectAtIndex:" = NSArray;
	    "-initWithCapacity:" = NSArray;
	    "-insertObject:atIndex:" = NSArray;
	    "-insertObjects:atIndexes:" = NSArray;
	    "-removeAllObjects" = NSArray;
	    "-removeLastObject" = NSArray;
	    "-removeObject:" = NSArray;
	    "-removeObject:inRange:" = NSArray;
	    "-removeObjectAtIndex:" = NSArray;
	    "-removeObjectIdenticalTo:" = NSArray;
	    "-removeObjectIdenticalTo:inRange:" = NSArray;
	    "-removeObjectsAtIndexes:" = NSArray;
	    "-removeObjectsFromIndices:numIndices:" = NSArray;
	    "-removeObjectsInArray:" = NSArray;
	    "-removeObjectsInRange:" = NSArray;
	    "-replaceObjectAtIndex:withObject:" = NSArray;
	    "-replaceObjectsAtIndexes:withObjects:" = NSArray;
	    "-replaceObjectsInRange:withObjectsFromArray:" = NSArray;
	    "-replaceObjectsInRange:withObjectsFromArray:range:" = NSArray;
	    "-setArray:" = NSArray;
	    "-setObject:atIndexedSubscript:" = NSArray;
	    "-sortUsingComparator:" = NSArray;
	    "-sortUsingFunction:context:" = NSArray;
	    "-sortUsingSelector:" = NSArray;
	    "-sortWithOptions:usingComparator:" = NSArray;
	};
	NSMutableAttributedString = {
	    "-addAttribute:value:range:" = NSAttributedString;
	    "-addAttributes:range:" = NSAttributedString;
	    "-appendAttributedString:" = NSAttributedString;
	    "-beginEditing" = NSAttributedString;
	    "-deleteCharactersInRange:" = NSAttributedString;
	    "-endEditing" = NSAttributedString;
	    "-insertAttributedString:atIndex:" = NSAttributedString;
	    "-mutableString" = NSAttributedString;
	    "-removeAttribute:range:" = NSAttributedString;
	    "-replaceCharactersInRange:withAttributedString:" = NSAttributedString;
	    "-replaceCharactersInRange:withString:" = NSAttributedString;
	    "-setAttributedString:" = NSAttributedString;
	    "-setAttributes:range:" = NSAttributedString;
	};
	NSMutableCharacterSet = {
	    "-addCharactersInRange:" = NSCharacterSet;
	    "-addCharactersInString:" = NSCharacterSet;
	    "-formIntersectionWithCharacterSet:" = NSCharacterSet;
	    "-formUnionWithCharacterSet:" = NSCharacterSet;
	    "-invert" = NSCharacterSet;
	    "-removeCharactersInRange:" = NSCharacterSet;
	    "-removeCharactersInString:" = NSCharacterSet;
	};
	NSMutableData = {
	    "+dataWithCapacity:" = NSData;
	    "+dataWithLength:" = NSData;
	    "-appendBytes:length:" = NSData;
	    "-appendData:" = NSData;
	    "-increaseLengthBy:" = NSData;
	    "-initWithCapacity:" = NSData;
	    "-initWithLength:" = NSData;
	    "-mutableBytes" = NSData;
	    "-replaceBytesInRange:withBytes:" = NSData;
	    "-replaceBytesInRange:withBytes:length:" = NSData;
	    "-resetBytesInRange:" = NSData;
	    "-serializeAlignedBytesLength:" = NSData;
	    "-serializeDataAt:ofObjCType:context:" = NSData;
	    "-serializeInt:" = NSData;
	    "-serializeInt:atIndex:" = NSData;
	    "-serializeInts:count:" = NSData;
	    "-serializeInts:count:atIndex:" = NSData;
	    "-setData:" = NSData;
	    "-setLength:" = NSData;
	};
	"NSMutableData(GNUstepExtensions)" = {
	    "-capacity" = NSData;
	    "-serializeTypeTag:" = NSData;
	    "-serializeTypeTag:andCrossRef:" = NSData;
	    "-setCapacity:" = NSData;
	    "-shmID" = NSData;
	};
	NSMutableDictionary = {
	    "+dictionaryWithCapacity:" = NSDictionary;
	    "-addEntriesFromDictionary:" = NSDictionary;
	    "-initWithCapacity:" = NSDictionary;
	    "-removeAllObjects" = NSDictionary;
	    "-removeObjectForKey:" = NSDictionary;
	    "-removeObjectsForKeys:" = NSDictionary;
	    "-setDictionary:" = NSDictionary;
	    "-setObject:forKey:" = NSDictionary;
	    "-setObject:forKeyedSubscript:" = NSDictionary;
	    "-setValue:forKey:" = NSDictionary;
	    "-takeStoredValue:forKey:" = NSDictionary;
	    "-takeValue:forKey:" = NSDictionary;
	};
	NSMutableIndexSet = {
	    "-addIndex:" = NSIndexSet;
	    "-addIndexes:" = NSIndexSet;
	    "-addIndexesInRange:" = NSIndexSet;
	    "-removeAllIndexes" = NSIndexSet;
	    "-removeIndex:" = NSIndexSet;
	    "-removeIndexes:" = NSIndexSet;
	    "-removeIndexesInRange:" = NSIndexSet;
	    "-shiftIndexesStartingAtIndex:by:" = NSIndexSet;
	};
	NSMutableSet = {
	    "+setWithCapacity:" = NSSet;
	    "-addObject:" = NSSet;
	    "-addObjectsFromArray:" = NSSet;
	    "-initWithCapacity:" = NSSet;
	    "-intersectSet:" = NSSet;
	    "-minusSet:" = NSSet;
	    "-removeAllObjects" = NSSet;
	    "-removeObject:" = NSSet;
	    "-setSet:" = NSSet;
	    "-unionSet:" = NSSet;
	};
	NSMutableString = {
	    "+string" = NSString;
	    "+stringWithCString:" = NSString;
	    "+stringWithCString:length:" = NSString;
	    "+stringWithCapacity:" = NSString;
	    "+stringWithCharacters:length:" = NSString;
	    "+stringWithContentsOfFile:" = NSString;
	    "+stringWithFormat:,..." = NSString;
	    "-appendFormat:,..." = NSString;
	    "-appendString:" = NSString;
	    "-deleteCharactersInRange:" = NSString;
	    "-initWithCapacity:" = NSString;
	    "-insertString:atIndex:" = NSString;
	    "-replaceCharactersInRange:withString:" = NSString;
	    "-replaceOccurrencesOfString:withString:options:range:" = NSString;
	    "-setString:" = NSString;
	};
	NSMutableURLRequest = {
	    "-setCachePolicy:" = NSURLRequest;
	    "-setMainDocumentURL:" = NSURLRequest;
	    "-setTimeoutInterval:" = NSURLRequest;
	    "-setURL:" = NSURLRequest;
	};
	"NSMutableURLRequest(GNUstep)" = {
	    "-setDebug:" = NSURLRequest;
	    "-setDebugLogDelegate:" = NSURLRequest;
	};
	"NSMutableURLRequest(NSMutableHTTPURLRequest)" = {
	    "-addValue:forHTTPHeaderField:" = NSURLRequest;
	    "-setAllHTTPHeaderFields:" = NSURLRequest;
	    "-setHTTPBody:" = NSURLRequest;
	    "-setHTTPBodyStream:" = NSURLRequest;
	    "-setHTTPMethod:" = NSURLRequest;
	    "-setHTTPShouldHandleCookies:" = NSURLRequest;
	    "-setValue:forHTTPHeaderField:" = NSURLRequest;
	};
	NSNetService = {
	    "+dataFromTXTRecordDictionary:" = NSNetServices;
	    "+dictionaryFromTXTRecordData:" = NSNetServices;
	    "-TXTRecordData" = NSNetServices;
	    "-addresses" = NSNetServices;
	    "-delegate" = NSNetServices;
	    "-domain" = NSNetServices;
	    "-getInputStream:outputStream:" = NSNetServices;
	    "-hostName" = NSNetServices;
	    "-initWithDomain:type:name:" = NSNetServices;
	    "-initWithDomain:type:name:port:" = NSNetServices;
	    "-name" = NSNetServices;
	    "-port" = NSNetServices;
	    "-protocolSpecificInformation" = NSNetServices;
	    "-publish" = NSNetServices;
	    "-publishWithOptions:" = NSNetServices;
	    "-removeFromRunLoop:forMode:" = NSNetServices;
	    "-resolve" = NSNetServices;
	    "-resolveWithTimeout:" = NSNetServices;
	    "-scheduleInRunLoop:forMode:" = NSNetServices;
	    "-setDelegate:" = NSNetServices;
	    "-setProtocolSpecificInformation:" = NSNetServices;
	    "-setTXTRecordData:" = NSNetServices;
	    "-startMonitoring" = NSNetServices;
	    "-stop" = NSNetServices;
	    "-stopMonitoring" = NSNetServices;
	    "-type" = NSNetServices;
	};
	NSNetServiceBrowser = {
	    "-delegate" = NSNetServices;
	    "-init" = NSNetServices;
	    "-removeFromRunLoop:forMode:" = NSNetServices;
	    "-scheduleInRunLoop:forMode:" = NSNetServices;
	    "-searchForAllDomains" = NSNetServices;
	    "-searchForBrowsableDomains" = NSNetServices;
	    "-searchForRegistrationDomains" = NSNetServices;
	    "-searchForServicesOfType:inDomain:" = NSNetServices;
	    "-setDelegate:" = NSNetServices;
	    "-stop" = NSNetServices;
	};
	NSNotification = {
	    "+notificationWithName:object:" = NSNotification;
	    "+notificationWithName:object:userInfo:" = NSNotification;
	    "-name" = NSNotification;
	    "-object" = NSNotification;
	    "-userInfo" = NSNotification;
	};
	NSNotificationCenter = {
	    "+defaultCenter" = NSNotification;
	    "-addObserver:selector:name:object:" = NSNotification;
	    "-addObserverForName:object:queue:usingBlock:" = NSNotification;
	    "-postNotification:" = NSNotification;
	    "-postNotificationName:object:" = NSNotification;
	    "-postNotificationName:object:userInfo:" = NSNotification;
	    "-removeObserver:" = NSNotification;
	    "-removeObserver:name:object:" = NSNotification;
	};
	NSNotificationQueue = {
	    "+defaultQueue" = NSNotificationQueue;
	    "-dequeueNotificationsMatching:coalesceMask:" = NSNotificationQueue;
	    "-enqueueNotification:postingStyle:" = NSNotificationQueue;
	    "-enqueueNotification:postingStyle:coalesceMask:forModes:" = NSNotificationQueue;
	    "-initWithNotificationCenter:" = NSNotificationQueue;
	};
	NSNull = {
	    "+null" = NSNull;
	};
	NSNumber = {
	    "+numberWithBool:" = NSValue;
	    "+numberWithChar:" = NSValue;
	    "+numberWithDouble:" = NSValue;
	    "+numberWithFloat:" = NSValue;
	    "+numberWithInt:" = NSValue;
	    "+numberWithInteger:" = NSValue;
	    "+numberWithLong:" = NSValue;
	    "+numberWithLongLong:" = NSValue;
	    "+numberWithShort:" = NSValue;
	    "+numberWithUnsignedChar:" = NSValue;
	    "+numberWithUnsignedInt:" = NSValue;
	    "+numberWithUnsignedInteger:" = NSValue;
	    "+numberWithUnsignedLong:" = NSValue;
	    "+numberWithUnsignedLongLong:" = NSValue;
	    "+numberWithUnsignedShort:" = NSValue;
	    "-boolValue" = NSValue;
	    "-charValue" = NSValue;
	    "-compare:" = NSValue;
	    "-description" = NSValue;
	    "-descriptionWithLocale:" = NSValue;
	    "-doubleValue" = NSValue;
	    "-floatValue" = NSValue;
	    "-initWithBool:" = NSValue;
	    "-initWithChar:" = NSValue;
	    "-initWithDouble:" = NSValue;
	    "-initWithFloat:" = NSValue;
	    "-initWithInt:" = NSValue;
	    "-initWithInteger:" = NSValue;
	    "-initWithLong:" = NSValue;
	    "-initWithLongLong:" = NSValue;
	    "-initWithShort:" = NSValue;
	    "-initWithUnsignedChar:" = NSValue;
	    "-initWithUnsignedInt:" = NSValue;
	    "-initWithUnsignedInteger:" = NSValue;
	    "-initWithUnsignedLong:" = NSValue;
	    "-initWithUnsignedLongLong:" = NSValue;
	    "-initWithUnsignedShort:" = NSValue;
	    "-intValue" = NSValue;
	    "-integerValue" = NSValue;
	    "-isEqualToNumber:" = NSValue;
	    "-longLongValue" = NSValue;
	    "-longValue" = NSValue;
	    "-shortValue" = NSValue;
	    "-stringValue" = NSValue;
	    "-unsignedCharValue" = NSValue;
	    "-unsignedIntValue" = NSValue;
	    "-unsignedIntegerValue" = NSValue;
	    "-unsignedLongLongValue" = NSValue;
	    "-unsignedLongValue" = NSValue;
	    "-unsignedShortValue" = NSValue;
	};
	"NSNumber(NSDecimalNumber)" = {
	    "-decimalValue" = NSDecimalNumber;
	};
	NSNumberFormatter = {
	    "+defaultFormatterBehavior" = NSNumberFormatter;
	    "+localizedStringFromNumber:numberStyle:" = NSNumberFormatter;
	    "+setDefaultFormatterBehavior:" = NSNumberFormatter;
	    "-allowsFloats" = NSNumberFormatter;
	    "-alwaysShowsDecimalSeparator" = NSNumberFormatter;
	    "-attributedStringForNil" = NSNumberFormatter;
	    "-attributedStringForNotANumber" = NSNumberFormatter;
	    "-attributedStringForZero" = NSNumberFormatter;
	    "-currencyCode" = NSNumberFormatter;
	    "-currencyDecimalSeparator" = NSNumberFormatter;
	    "-currencyGroupingSeparator" = NSNumberFormatter;
	    "-currencySymbol" = NSNumberFormatter;
	    "-decimalSeparator" = NSNumberFormatter;
	    "-exponentSymbol" = NSNumberFormatter;
	    "-format" = NSNumberFormatter;
	    "-formatWidth" = NSNumberFormatter;
	    "-formatterBehavior" = NSNumberFormatter;
	    "-generatesDecimalNumbers" = NSNumberFormatter;
	    "-getObjectValue:forString:range:error:" = NSNumberFormatter;
	    "-groupingSeparator" = NSNumberFormatter;
	    "-groupingSize" = NSNumberFormatter;
	    "-hasThousandSeparators" = NSNumberFormatter;
	    "-internationalCurrencySymbol" = NSNumberFormatter;
	    "-isLenient" = NSNumberFormatter;
	    "-isPartialStringValidationEnabled" = NSNumberFormatter;
	    "-locale" = NSNumberFormatter;
	    "-localizesFormat" = NSNumberFormatter;
	    "-maximum" = NSNumberFormatter;
	    "-maximumFractionDigits" = NSNumberFormatter;
	    "-maximumIntegerDigits" = NSNumberFormatter;
	    "-maximumSignificantDigits" = NSNumberFormatter;
	    "-minimum" = NSNumberFormatter;
	    "-minimumFractionDigits" = NSNumberFormatter;
	    "-minimumIntegerDigits" = NSNumberFormatter;
	    "-minimumSignificantDigits" = NSNumberFormatter;
	    "-minusSign" = NSNumberFormatter;
	    "-multiplier" = NSNumberFormatter;
	    "-negativeFormat" = NSNumberFormatter;
	    "-negativeInfinitySymbol" = NSNumberFormatter;
	    "-negativePrefix" = NSNumberFormatter;
	    "-negativeSuffix" = NSNumberFormatter;
	    "-nilSymbol" = NSNumberFormatter;
	    "-notANumberSymbol" = NSNumberFormatter;
	    "-numberFromString:" = NSNumberFormatter;
	    "-numberStyle" = NSNumberFormatter;
	    "-paddingCharacter" = NSNumberFormatter;
	    "-paddingPosition" = NSNumberFormatter;
	    "-perMillSymbol" = NSNumberFormatter;
	    "-percentSymbol" = NSNumberFormatter;
	    "-plusSign" = NSNumberFormatter;
	    "-positiveFormat" = NSNumberFormatter;
	    "-positiveInfinitySymbol" = NSNumberFormatter;
	    "-positivePrefix" = NSNumberFormatter;
	    "-positiveSuffix" = NSNumberFormatter;
	    "-roundingBehavior" = NSNumberFormatter;
	    "-roundingIncrement" = NSNumberFormatter;
	    "-roundingMode" = NSNumberFormatter;
	    "-secondaryGroupingSize" = NSNumberFormatter;
	    "-setAllowsFloats:" = NSNumberFormatter;
	    "-setAlwaysShowsDecimalSeparator:" = NSNumberFormatter;
	    "-setAttributedStringForNil:" = NSNumberFormatter;
	    "-setAttributedStringForNotANumber:" = NSNumberFormatter;
	    "-setAttributedStringForZero:" = NSNumberFormatter;
	    "-setCurrencyCode:" = NSNumberFormatter;
	    "-setCurrencyDecimalSeparator:" = NSNumberFormatter;
	    "-setCurrencyGroupingSeparator:" = NSNumberFormatter;
	    "-setCurrencySymbol:" = NSNumberFormatter;
	    "-setDecimalSeparator:" = NSNumberFormatter;
	    "-setExponentSymbol:" = NSNumberFormatter;
	    "-setFormat:" = NSNumberFormatter;
	    "-setFormatWidth:" = NSNumberFormatter;
	    "-setFormatterBehavior:" = NSNumberFormatter;
	    "-setGeneratesDecimalNumbers:" = NSNumberFormatter;
	    "-setGroupingSeparator:" = NSNumberFormatter;
	    "-setGroupingSize:" = NSNumberFormatter;
	    "-setHasThousandSeparators:" = NSNumberFormatter;
	    "-setInternationalCurrencySymbol:" = NSNumberFormatter;
	    "-setLenient:" = NSNumberFormatter;
	    "-setLocale:" = NSNumberFormatter;
	    "-setLocalizesFormat:" = NSNumberFormatter;
	    "-setMaximum:" = NSNumberFormatter;
	    "-setMaximumFractionDigits:" = NSNumberFormatter;
	    "-setMaximumIntegerDigits:" = NSNumberFormatter;
	    "-setMaximumSignificantDigits:" = NSNumberFormatter;
	    "-setMinimum:" = NSNumberFormatter;
	    "-setMinimumFractionDigits:" = NSNumberFormatter;
	    "-setMinimumIntegerDigits:" = NSNumberFormatter;
	    "-setMinimumSignificantDigits:" = NSNumberFormatter;
	    "-setMinusSign:" = NSNumberFormatter;
	    "-setMultiplier:" = NSNumberFormatter;
	    "-setNegativeFormat:" = NSNumberFormatter;
	    "-setNegativeInfinitySymbol:" = NSNumberFormatter;
	    "-setNegativePrefix:" = NSNumberFormatter;
	    "-setNegativeSuffix:" = NSNumberFormatter;
	    "-setNilSymbol:" = NSNumberFormatter;
	    "-setNotANumberSymbol:" = NSNumberFormatter;
	    "-setNumberStyle:" = NSNumberFormatter;
	    "-setPaddingCharacter:" = NSNumberFormatter;
	    "-setPaddingPosition:" = NSNumberFormatter;
	    "-setPartialStringValidationEnabled:" = NSNumberFormatter;
	    "-setPerMillSymbol:" = NSNumberFormatter;
	    "-setPercentSymbol:" = NSNumberFormatter;
	    "-setPlusSign:" = NSNumberFormatter;
	    "-setPositiveFormat:" = NSNumberFormatter;
	    "-setPositiveInfinitySymbol:" = NSNumberFormatter;
	    "-setPositivePrefix:" = NSNumberFormatter;
	    "-setPositiveSuffix:" = NSNumberFormatter;
	    "-setRoundingBehavior:" = NSNumberFormatter;
	    "-setRoundingIncrement:" = NSNumberFormatter;
	    "-setRoundingMode:" = NSNumberFormatter;
	    "-setSecondaryGroupingSize:" = NSNumberFormatter;
	    "-setTextAttributesForNegativeInfinity:" = NSNumberFormatter;
	    "-setTextAttributesForNegativeValues:" = NSNumberFormatter;
	    "-setTextAttributesForNil:" = NSNumberFormatter;
	    "-setTextAttributesForNotANumber:" = NSNumberFormatter;
	    "-setTextAttributesForPositiveInfinity:" = NSNumberFormatter;
	    "-setTextAttributesForPositiveValues:" = NSNumberFormatter;
	    "-setTextAttributesForZero:" = NSNumberFormatter;
	    "-setThousandSeparator:" = NSNumberFormatter;
	    "-setUsesGroupingSeparator:" = NSNumberFormatter;
	    "-setUsesSignificantDigits:" = NSNumberFormatter;
	    "-setZeroSymbol:" = NSNumberFormatter;
	    "-stringFromNumber:" = NSNumberFormatter;
	    "-textAttributesForNegativeInfinity" = NSNumberFormatter;
	    "-textAttributesForNegativeValues" = NSNumberFormatter;
	    "-textAttributesForNil" = NSNumberFormatter;
	    "-textAttributesForNotANumber" = NSNumberFormatter;
	    "-textAttributesForPositiveInfinity" = NSNumberFormatter;
	    "-textAttributesForPositiveValues" = NSNumberFormatter;
	    "-textAttributesForZero" = NSNumberFormatter;
	    "-thousandSeparator" = NSNumberFormatter;
	    "-usesGroupingSeparator" = NSNumberFormatter;
	    "-usesSignificantDigits" = NSNumberFormatter;
	    "-zeroSymbol" = NSNumberFormatter;
	};
	NSObject = {
	    "+alloc" = NSObject;
	    "+allocWithZone:" = NSObject;
	    "+class" = NSObject;
	    "+initialize" = NSObject;
	    "+instanceMethodForSelector:" = NSObject;
	    "+instanceMethodSignatureForSelector:" = NSObject;
	    "+instancesRespondToSelector:" = NSObject;
	    "+isSubclassOfClass:" = NSObject;
	    "+load" = NSObject;
	    "+new" = NSObject;
	    "+poseAsClass:" = NSObject;
	    "+resolveClassMethod:" = NSObject;
	    "+resolveInstanceMethod:" = NSObject;
	    "+setVersion:" = NSObject;
	    "+version" = NSObject;
	    "-autoContentAccessingProxy" = NSObject;
	    "-awakeAfterUsingCoder:" = NSObject;
	    "-classForArchiver" = NSObject;
	    "-classForCoder" = NSObject;
	    "-className" = NSObject;
	    "-copy" = NSObject;
	    "-dealloc" = NSObject;
	    "-doesNotRecognizeSelector:" = NSObject;
	    "-finalize" = NSObject;
	    "-forwardInvocation:" = NSObject;
	    "-forwardingTargetForSelector:" = NSObject;
	    "-init" = NSObject;
	    "-methodForSelector:" = NSObject;
	    "-methodSignatureForSelector:" = NSObject;
	    "-mutableCopy" = NSObject;
	    "-replacementObjectForArchiver:" = NSObject;
	    "-replacementObjectForCoder:" = NSObject;
	    "-superclass" = NSObject;
	};
	"NSObject(GNUstep)" = {
	    "+enableDoubleReleaseCheck:" = NSObject;
	};
	"NSObject(GSTraceLocks)" = {
	    "+shouldCreateTraceableLocks:" = NSLock;
	    "+tracedCondition" = NSLock;
	    "+tracedConditionLockWithCondition:" = NSLock;
	    "+tracedLock" = NSLock;
	    "+tracedRecursiveLock" = NSLock;
	};
	"NSObject(NEXTSTEP)" = {
	    "-error:,..." = NSObject;
	};
	"NSObject(NSClassDescriptionPrimitives)" = {
	    "-attributeKeys" = NSClassDescription;
	    "-classDescription" = NSClassDescription;
	    "-inverseForRelationshipKey:" = NSClassDescription;
	    "-toManyRelationshipKeys" = NSClassDescription;
	    "-toOneRelationshipKeys" = NSClassDescription;
	};
	"NSObject(NSConnectionDelegate)" = {
	    "-authenticateComponents:withData:" = NSConnection;
	    "-authenticationDataForComponents:" = NSConnection;
	    "-connection:didConnect:" = NSConnection;
	    "-connection:shouldMakeNewConnection:" = NSConnection;
	    "-makeNewConnection:sender:" = NSConnection;
	};
	"NSObject(NSFileManagerDelegate)" = {
	    "-fileManager:shouldCopyItemAtPath:toPath:" = NSFileManager;
	    "-fileManager:shouldCopyItemAtURL:toURL:" = NSFileManager;
	    "-fileManager:shouldLinkItemAtPath:toPath:" = NSFileManager;
	    "-fileManager:shouldLinkItemAtURL:toURL:" = NSFileManager;
	    "-fileManager:shouldMoveItemAtPath:toPath:" = NSFileManager;
	    "-fileManager:shouldMoveItemAtURL:toURL:" = NSFileManager;
	    "-fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:" = NSFileManager;
	    "-fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:" = NSFileManager;
	    "-fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:" = NSFileManager;
	    "-fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:" = NSFileManager;
	    "-fileManager:shouldProceedAfterError:movingItemAtPath:toPath:" = NSFileManager;
	    "-fileManager:shouldProceedAfterError:movingItemAtURL:toURL:" = NSFileManager;
	    "-fileManager:shouldProceedAfterError:removingItemAtPath:" = NSFileManager;
	    "-fileManager:shouldProceedAfterError:removingItemAtURL:" = NSFileManager;
	    "-fileManager:shouldRemoveItemAtPath:" = NSFileManager;
	    "-fileManager:shouldRemoveItemAtURL:" = NSFileManager;
	};
	"NSObject(NSFileManagerHandler)" = {
	    "-fileManager:shouldProceedAfterError:" = NSFileManager;
	    "-fileManager:willProcessPath:" = NSFileManager;
	};
	"NSObject(NSKeyValueCoding)" = {
	    "+accessInstanceVariablesDirectly" = NSKeyValueCoding;
	    "+useStoredAccessor" = NSKeyValueCoding;
	    "-dictionaryWithValuesForKeys:" = NSKeyValueCoding;
	    "-handleQueryWithUnboundKey:" = NSKeyValueCoding;
	    "-handleTakeValue:forUnboundKey:" = NSKeyValueCoding;
	    "-mutableArrayValueForKey:" = NSKeyValueCoding;
	    "-mutableArrayValueForKeyPath:" = NSKeyValueCoding;
	    "-mutableSetValueForKey:" = NSKeyValueCoding;
	    "-mutableSetValueForKeyPath:" = NSKeyValueCoding;
	    "-setNilValueForKey:" = NSKeyValueCoding;
	    "-setValue:forKey:" = NSKeyValueCoding;
	    "-setValue:forKeyPath:" = NSKeyValueCoding;
	    "-setValue:forUndefinedKey:" = NSKeyValueCoding;
	    "-setValuesForKeysWithDictionary:" = NSKeyValueCoding;
	    "-storedValueForKey:" = NSKeyValueCoding;
	    "-takeStoredValue:forKey:" = NSKeyValueCoding;
	    "-takeStoredValuesFromDictionary:" = NSKeyValueCoding;
	    "-takeValue:forKey:" = NSKeyValueCoding;
	    "-takeValue:forKeyPath:" = NSKeyValueCoding;
	    "-takeValuesFromDictionary:" = NSKeyValueCoding;
	    "-unableToSetNilForKey:" = NSKeyValueCoding;
	    "-validateValue:forKey:error:" = NSKeyValueCoding;
	    "-validateValue:forKeyPath:error:" = NSKeyValueCoding;
	    "-valueForKey:" = NSKeyValueCoding;
	    "-valueForKeyPath:" = NSKeyValueCoding;
	    "-valueForUndefinedKey:" = NSKeyValueCoding;
	    "-valuesForKeys:" = NSKeyValueCoding;
	};
	"NSObject(NSKeyValueObserverNotification)" = {
	    "-didChange:valuesAtIndexes:forKey:" = NSKeyValueObserving;
	    "-didChangeValueForKey:" = NSKeyValueObserving;
	    "-didChangeValueForKey:withSetMutation:usingObjects:" = NSKeyValueObserving;
	    "-willChange:valuesAtIndexes:forKey:" = NSKeyValueObserving;
	    "-willChangeValueForKey:" = NSKeyValueObserving;
	    "-willChangeValueForKey:withSetMutation:usingObjects:" = NSKeyValueObserving;
	};
	"NSObject(NSKeyValueObserverRegistration)" = {
	    "-addObserver:forKeyPath:options:context:" = NSKeyValueObserving;
	    "-removeObserver:forKeyPath:" = NSKeyValueObserving;
	};
	"NSObject(NSKeyValueObserving)" = {
	    "-observeValueForKeyPath:ofObject:change:context:" = NSKeyValueObserving;
	};
	"NSObject(NSKeyValueObservingCustomization)" = {
	    "+automaticallyNotifiesObserversForKey:" = NSKeyValueObserving;
	    "+keyPathsForValuesAffectingValueForKey:" = NSKeyValueObserving;
	    "+setKeys:triggerChangeNotificationsForDependentKey:" = NSKeyValueObserving;
	    "-observationInfo" = NSKeyValueObserving;
	    "-setObservationInfo:" = NSKeyValueObserving;
	};
	"NSObject(NSKeyedArchiverDelegate)" = {
	    "-archiver:didEncodeObject:" = NSKeyedArchiver;
	    "-archiver:willEncodeObject:" = NSKeyedArchiver;
	    "-archiver:willReplaceObject:withObject:" = NSKeyedArchiver;
	    "-archiverDidFinish:" = NSKeyedArchiver;
	    "-archiverWillFinish:" = NSKeyedArchiver;
	};
	"NSObject(NSKeyedArchiverObjectSubstitution)" = {
	    "-classForKeyedArchiver" = NSKeyedArchiver;
	    "-replacementObjectForKeyedArchiver:" = NSKeyedArchiver;
	};
	"NSObject(NSKeyedUnarchiverDelegate)" = {
	    "-unarchiver:cannotDecodeObjectOfClassName:originalClasses:" = NSKeyedArchiver;
	    "-unarchiver:didDecodeObject:" = NSKeyedArchiver;
	    "-unarchiver:willReplaceObject:withObject:" = NSKeyedArchiver;
	    "-unarchiverDidFinish:" = NSKeyedArchiver;
	    "-unarchiverWillFinish:" = NSKeyedArchiver;
	};
	"NSObject(NSKeyedUnarchiverObjectSubstitution)" = {
	    "+classForKeyedUnarchiver" = NSKeyedArchiver;
	};
	"NSObject(NSNetServiceBrowserDelegateMethods)" = {
	    "-netServiceBrowser:didFindDomain:moreComing:" = NSNetServices;
	    "-netServiceBrowser:didFindService:moreComing:" = NSNetServices;
	    "-netServiceBrowser:didNotSearch:" = NSNetServices;
	    "-netServiceBrowser:didRemoveDomain:moreComing:" = NSNetServices;
	    "-netServiceBrowser:didRemoveService:moreComing:" = NSNetServices;
	    "-netServiceBrowserDidStopSearch:" = NSNetServices;
	    "-netServiceBrowserWillSearch:" = NSNetServices;
	};
	"NSObject(NSNetServiceDelegateMethods)" = {
	    "-netService:didAcceptConnectionWithInputStream:outputStream:" = NSNetServices;
	    "-netService:didNotPublish:" = NSNetServices;
	    "-netService:didNotResolve:" = NSNetServices;
	    "-netService:didUpdateTXTRecordData:" = NSNetServices;
	    "-netServiceDidPublish:" = NSNetServices;
	    "-netServiceDidResolveAddress:" = NSNetServices;
	    "-netServiceDidStop:" = NSNetServices;
	    "-netServiceWillPublish:" = NSNetServices;
	    "-netServiceWillResolve:" = NSNetServices;
	};
	"NSObject(NSPortCoder)" = {
	    "-classForPortCoder" = NSPortCoder;
	    "-replacementObjectForPortCoder:" = NSPortCoder;
	};
	"NSObject(NSPortDelegateMethods)" = {
	    "-handlePortMessage:" = NSPort;
	};
	"NSObject(NSStreamDelegate)" = {
	    "-stream:handleEvent:" = NSStream;
	};
	"NSObject(NSThreadPerformAdditions)" = {
	    "-performSelector:onThread:withObject:waitUntilDone:" = NSThread;
	    "-performSelector:onThread:withObject:waitUntilDone:modes:" = NSThread;
	    "-performSelectorInBackground:withObject:" = NSThread;
	    "-performSelectorOnMainThread:withObject:waitUntilDone:" = NSThread;
	    "-performSelectorOnMainThread:withObject:waitUntilDone:modes:" = NSThread;
	};
	"NSObject(NSURLClient)" = {
	    "-URL:resourceDataDidBecomeAvailable:" = NSURL;
	    "-URL:resourceDidFailLoadingWithReason:" = NSURL;
	    "-URLResourceDidCancelLoading:" = NSURL;
	    "-URLResourceDidFinishLoading:" = NSURL;
	};
	"NSObject(NSURLConnectionDelegate)" = {
	    "-connection:didFailWithError:" = NSURLConnection;
	    "-connection:didReceiveAuthenticationChallenge:" = NSURLConnection;
	    "-connection:didReceiveData:" = NSURLConnection;
	    "-connection:didReceiveResponse:" = NSURLConnection;
	    "-connection:willCacheResponse:" = NSURLConnection;
	    "-connection:willSendRequest:redirectResponse:" = NSURLConnection;
	    "-connectionDidFinishLoading:" = NSURLConnection;
	};
	"NSObject(NSURLDownloadDelegate)" = {
	    "-download:decideDestinationWithSuggestedFilename:" = NSURLDownload;
	    "-download:didCancelAuthenticationChallenge:" = NSURLDownload;
	    "-download:didCreateDestination:" = NSURLDownload;
	    "-download:didFailWithError:" = NSURLDownload;
	    "-download:didReceiveAuthenticationChallenge:" = NSURLDownload;
	    "-download:didReceiveDataOfLength:" = NSURLDownload;
	    "-download:didReceiveResponse:" = NSURLDownload;
	    "-download:shouldDecodeSourceDataOfMIMEType:" = NSURLDownload;
	    "-download:willResumeWithResponse:fromByte:" = NSURLDownload;
	    "-download:willSendRequest:redirectResponse:" = NSURLDownload;
	    "-downloadDidFinish:" = NSURLDownload;
	};
	"NSObject(NSXMLParserDelegateEventAdditions)" = {
	    "-parser:didEndElement:namespaceURI:qualifiedName:" = NSXMLParser;
	    "-parser:didEndMappingPrefix:" = NSXMLParser;
	    "-parser:didStartElement:namespaceURI:qualifiedName:attributes:" = NSXMLParser;
	    "-parser:didStartMappingPrefix:toURI:" = NSXMLParser;
	    "-parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:" = NSXMLParser;
	    "-parser:foundCDATA:" = NSXMLParser;
	    "-parser:foundCharacters:" = NSXMLParser;
	    "-parser:foundComment:" = NSXMLParser;
	    "-parser:foundElementDeclarationWithName:model:" = NSXMLParser;
	    "-parser:foundExternalEntityDeclarationWithName:publicID:systemID:" = NSXMLParser;
	    "-parser:foundIgnorableWhitespace:" = NSXMLParser;
	    "-parser:foundInternalEntityDeclarationWithName:value:" = NSXMLParser;
	    "-parser:foundNotationDeclarationWithName:publicID:systemID:" = NSXMLParser;
	    "-parser:foundProcessingInstructionWithTarget:data:" = NSXMLParser;
	    "-parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:" = NSXMLParser;
	    "-parser:parseErrorOccurred:" = NSXMLParser;
	    "-parser:resolveExternalEntityName:systemID:" = NSXMLParser;
	    "-parser:validationErrorOccurred:" = NSXMLParser;
	    "-parserDidEndDocument:" = NSXMLParser;
	    "-parserDidStartDocument:" = NSXMLParser;
	};
	"NSObject(RunLoopEvents)" = {
	    "-runLoopShouldBlock:" = NSRunLoop;
	};
	"NSObject(TimedPerformers)" = {
	    "+cancelPreviousPerformRequestsWithTarget:" = NSObject;
	    "+cancelPreviousPerformRequestsWithTarget:selector:object:" = NSObject;
	    "-performSelector:withObject:afterDelay:" = NSObject;
	    "-performSelector:withObject:afterDelay:inModes:" = NSObject;
	};
	NSOutputStream = {
	    "+outputStreamToBuffer:capacity:" = NSStream;
	    "+outputStreamToFileAtPath:append:" = NSStream;
	    "+outputStreamToMemory" = NSStream;
	    "-hasSpaceAvailable" = NSStream;
	    "-initToBuffer:capacity:" = NSStream;
	    "-initToFileAtPath:append:" = NSStream;
	    "-initToMemory" = NSStream;
	    "-write:maxLength:" = NSStream;
	};
	NSPipe = {
	    "+pipe" = NSFileHandle;
	    "-fileHandleForReading" = NSFileHandle;
	    "-fileHandleForWriting" = NSFileHandle;
	};
	NSPointerArray = {
	    "+pointerArrayWithOptions:" = NSPointerArray;
	    "+pointerArrayWithPointerFunctions:" = NSPointerArray;
	    "+strongObjectsPointerArray" = NSPointerArray;
	    "+weakObjectsPointerArray" = NSPointerArray;
	    "-addPointer:" = NSPointerArray;
	    "-compact" = NSPointerArray;
	    "-count" = NSPointerArray;
	    "-initWithOptions:" = NSPointerArray;
	    "-initWithPointerFunctions:" = NSPointerArray;
	    "-insertPointer:atIndex:" = NSPointerArray;
	    "-pointerAtIndex:" = NSPointerArray;
	    "-pointerFunctions" = NSPointerArray;
	    "-removePointerAtIndex:" = NSPointerArray;
	    "-replacePointerAtIndex:withPointer:" = NSPointerArray;
	    "-setCount:" = NSPointerArray;
	};
	"NSPointerArray(NSArrayConveniences)" = {
	    "+pointerArrayWithStrongObjects" = NSPointerArray;
	    "+pointerArrayWithWeakObjects" = NSPointerArray;
	    "-allObjects" = NSPointerArray;
	};
	NSPointerFunctions = {
	    "+pointerFunctionsWithOptions:" = NSPointerFunctions;
	    "-acquireFunction" = NSPointerFunctions;
	    "-descriptionFunction" = NSPointerFunctions;
	    "-hashFunction" = NSPointerFunctions;
	    "-initWithOptions:" = NSPointerFunctions;
	    "-isEqualFunction" = NSPointerFunctions;
	    "-relinquishFunction" = NSPointerFunctions;
	    "-setAcquireFunction:" = NSPointerFunctions;
	    "-setDescriptionFunction:" = NSPointerFunctions;
	    "-setHashFunction:" = NSPointerFunctions;
	    "-setIsEqualFunction:" = NSPointerFunctions;
	    "-setRelinquishFunction:" = NSPointerFunctions;
	    "-setSizeFunction:" = NSPointerFunctions;
	    "-setUsesStrongWriteBarrier:" = NSPointerFunctions;
	    "-setUsesWeakReadAndWriteBarriers:" = NSPointerFunctions;
	    "-sizeFunction" = NSPointerFunctions;
	    "-usesStrongWriteBarrier" = NSPointerFunctions;
	    "-usesWeakReadAndWriteBarriers" = NSPointerFunctions;
	};
	NSPort = {
	    "+port" = NSPort;
	    "+portWithMachPort:" = NSPort;
	    "-addConnection:toRunLoop:forMode:" = NSPort;
	    "-delegate" = NSPort;
	    "-init" = NSPort;
	    "-initWithMachPort:" = NSPort;
	    "-invalidate" = NSPort;
	    "-isValid" = NSPort;
	    "-machPort" = NSPort;
	    "-removeConnection:fromRunLoop:forMode:" = NSPort;
	    "-reservedSpaceLength" = NSPort;
	    "-sendBeforeDate:components:from:reserved:" = NSPort;
	    "-sendBeforeDate:msgid:components:from:reserved:" = NSPort;
	    "-setDelegate:" = NSPort;
	};
	NSPortCoder = {
	    "+portCoderWithReceivePort:sendPort:components:" = NSPortCoder;
	    "-connection" = NSPortCoder;
	    "-decodePortObject" = NSPortCoder;
	    "-dispatch" = NSPortCoder;
	    "-encodePortObject:" = NSPortCoder;
	    "-initWithReceivePort:sendPort:components:" = NSPortCoder;
	    "-isBycopy" = NSPortCoder;
	    "-isByref" = NSPortCoder;
	};
	NSPortMessage = {
	    "-components" = NSPortMessage;
	    "-initWithMachMessage:" = NSPortMessage;
	    "-initWithSendPort:receivePort:components:" = NSPortMessage;
	    "-msgid" = NSPortMessage;
	    "-receivePort" = NSPortMessage;
	    "-sendBeforeDate:" = NSPortMessage;
	    "-sendPort" = NSPortMessage;
	    "-setMsgid:" = NSPortMessage;
	};
	NSPortNameServer = {
	    "+systemDefaultPortNameServer" = NSPortNameServer;
	    "-portForName:" = NSPortNameServer;
	    "-portForName:onHost:" = NSPortNameServer;
	    "-registerPort:forName:" = NSPortNameServer;
	    "-removePortForName:" = NSPortNameServer;
	};
	NSProcessInfo = {
	    "+processInfo" = NSProcessInfo;
	    "-activeProcessorCount" = NSProcessInfo;
	    "-arguments" = NSProcessInfo;
	    "-beginActivityWithOptions:reason:" = NSProcessInfo;
	    "-disableSuddenTermination" = NSProcessInfo;
	    "-enableSuddenTermination" = NSProcessInfo;
	    "-endActivity:" = NSProcessInfo;
	    "-environment" = NSProcessInfo;
	    "-globallyUniqueString" = NSProcessInfo;
	    "-hostName" = NSProcessInfo;
	    "-operatingSystem" = NSProcessInfo;
	    "-operatingSystemName" = NSProcessInfo;
	    "-operatingSystemVersionString" = NSProcessInfo;
	    "-performActivityWithOptions:reason:usingBlock:" = NSProcessInfo;
	    "-performExpiringActivityWithReason:usingBlock:" = NSProcessInfo;
	    "-physicalMemory" = NSProcessInfo;
	    "-processIdentifier" = NSProcessInfo;
	    "-processName" = NSProcessInfo;
	    "-processorCount" = NSProcessInfo;
	    "-setProcessName:" = NSProcessInfo;
	    "-systemUptime" = NSProcessInfo;
	};
	"NSProcessInfo(GNUstep)" = {
	    "+initializeWithArguments:count:environment:" = NSProcessInfo;
	    "-androidCacheDir" = NSProcessInfo;
	    "-androidContext" = NSProcessInfo;
	    "-androidFilesDir" = NSProcessInfo;
	    "-setLogFile:" = NSProcessInfo;
	};
	NSPropertyListSerialization = {
	    "+dataFromPropertyList:format:errorDescription:" = NSPropertyList;
	    "+dataWithPropertyList:format:options:error:" = NSPropertyList;
	    "+propertyList:isValidForFormat:" = NSPropertyList;
	    "+propertyListFromData:mutabilityOption:format:errorDescription:" = NSPropertyList;
	    "+propertyListWithData:options:format:error:" = NSPropertyList;
	    "+propertyListWithStream:options:format:error:" = NSPropertyList;
	    "+writePropertyList:toStream:format:options:error:" = NSPropertyList;
	};
	NSProtocolChecker = {
	    "+protocolCheckerWithTarget:protocol:" = NSProtocolChecker;
	    "-forwardInvocation:" = NSProtocolChecker;
	    "-initWithTarget:protocol:" = NSProtocolChecker;
	    "-protocol" = NSProtocolChecker;
	    "-target" = NSProtocolChecker;
	};
	NSProxy = {
	    "+alloc" = NSProxy;
	    "+allocWithZone:" = NSProxy;
	    "+autorelease" = NSProxy;
	    "+class" = NSProxy;
	    "+description" = NSProxy;
	    "+isKindOfClass:" = NSProxy;
	    "+isMemberOfClass:" = NSProxy;
	    "+load" = NSProxy;
	    "+release" = NSProxy;
	    "+respondsToSelector:" = NSProxy;
	    "+retain" = NSProxy;
	    "+retainCount" = NSProxy;
	    "-autorelease" = NSProxy;
	    "-class" = NSProxy;
	    "-conformsToProtocol:" = NSProxy;
	    "-dealloc" = NSProxy;
	    "-description" = NSProxy;
	    "-forwardInvocation:" = NSProxy;
	    "-hash" = NSProxy;
	    "-init" = NSProxy;
	    "-isEqual:" = NSProxy;
	    "-isKindOfClass:" = NSProxy;
	    "-isMemberOfClass:" = NSProxy;
	    "-isProxy" = NSProxy;
	    "-methodSignatureForSelector:" = NSProxy;
	    "-release" = NSProxy;
	    "-respondsToSelector:" = NSProxy;
	    "-retain" = NSProxy;
	    "-retainCount" = NSProxy;
	    "-self" = NSProxy;
	    "-superclass" = NSProxy;
	    "-zone" = NSProxy;
	};
	NSRecursiveLock = {
	    "-isLockedByCurrentThread" = NSLock;
	    "-lock" = NSLock;
	    "-lockBeforeDate:" = NSLock;
	    "-name" = NSLock;
	    "-setName:" = NSLock;
	    "-tryLock" = NSLock;
	    "-unlock" = NSLock;
	};
	NSRunLoop = {
	    "+currentRunLoop" = NSRunLoop;
	    "+mainRunLoop" = NSRunLoop;
	    "-acceptInputForMode:beforeDate:" = NSRunLoop;
	    "-addTimer:forMode:" = NSRunLoop;
	    "-currentMode" = NSRunLoop;
	    "-limitDateForMode:" = NSRunLoop;
	    "-run" = NSRunLoop;
	    "-runMode:beforeDate:" = NSRunLoop;
	    "-runUntilDate:" = NSRunLoop;
	};
	"NSRunLoop(GNUstepExtensions)" = {
	    "-addEvent:type:watcher:forMode:" = NSRunLoop;
	    "-removeEvent:type:forMode:all:" = NSRunLoop;
	};
	"NSRunLoop(OPENSTEP)" = {
	    "-addPort:forMode:" = NSRunLoop;
	    "-cancelPerformSelector:target:argument:" = NSRunLoop;
	    "-cancelPerformSelectorsWithTarget:" = NSRunLoop;
	    "-configureAsServer" = NSRunLoop;
	    "-performSelector:target:argument:order:modes:" = NSRunLoop;
	    "-removePort:forMode:" = NSRunLoop;
	};
	NSScanner = {
	    "+localizedScannerWithString:" = NSScanner;
	    "+scannerWithString:" = NSScanner;
	    "-caseSensitive" = NSScanner;
	    "-charactersToBeSkipped" = NSScanner;
	    "-initWithString:" = NSScanner;
	    "-isAtEnd" = NSScanner;
	    "-locale" = NSScanner;
	    "-scanCharactersFromSet:intoString:" = NSScanner;
	    "-scanDecimal:" = NSScanner;
	    "-scanDouble:" = NSScanner;
	    "-scanFloat:" = NSScanner;
	    "-scanHexDouble:" = NSScanner;
	    "-scanHexFloat:" = NSScanner;
	    "-scanHexInt:" = NSScanner;
	    "-scanHexLongLong:" = NSScanner;
	    "-scanInt:" = NSScanner;
	    "-scanInteger:" = NSScanner;
	    "-scanLocation" = NSScanner;
	    "-scanLongLong:" = NSScanner;
	    "-scanRadixUnsignedInt:" = NSScanner;
	    "-scanRadixUnsignedLongLong:" = NSScanner;
	    "-scanString:intoString:" = NSScanner;
	    "-scanUpToCharactersFromSet:intoString:" = NSScanner;
	    "-scanUpToString:intoString:" = NSScanner;
	    "-setCaseSensitive:" = NSScanner;
	    "-setCharactersToBeSkipped:" = NSScanner;
	    "-setLocale:" = NSScanner;
	    "-setScanLocation:" = NSScanner;
	    "-string" = NSScanner;
	};
	NSSerializer = {
	    "+serializePropertyList:" = NSSerialization;
	    "+serializePropertyList:intoData:" = NSSerialization;
	};
	"NSSerializer(GNUstep)" = {
	    "+serializePropertyList:intoData:compact:" = NSSerialization;
	    "+shouldBeCompact:" = NSSerialization;
	};
	NSSet = {
	    "+set" = NSSet;
	    "+setWithArray:" = NSSet;
	    "+setWithObject:" = NSSet;
	    "+setWithObjects:,..." = NSSet;
	    "+setWithObjects:count:" = NSSet;
	    "+setWithSet:" = NSSet;
	    "-allObjects" = NSSet;
	    "-anyObject" = NSSet;
	    "-containsObject:" = NSSet;
	    "-count" = NSSet;
	    "-description" = NSSet;
	    "-descriptionWithLocale:" = NSSet;
	    "-enumerateObjectsUsingBlock:" = NSSet;
	    "-enumerateObjectsWithOptions:usingBlock:" = NSSet;
	    "-init" = NSSet;
	    "-initWithArray:" = NSSet;
	    "-initWithObjects:,..." = NSSet;
	    "-initWithObjects:count:" = NSSet;
	    "-initWithSet:" = NSSet;
	    "-initWithSet:copyItems:" = NSSet;
	    "-intersectsSet:" = NSSet;
	    "-isEqualToSet:" = NSSet;
	    "-isSubsetOfSet:" = NSSet;
	    "-makeObjectsPerform:" = NSSet;
	    "-makeObjectsPerform:withObject:" = NSSet;
	    "-makeObjectsPerformSelector:" = NSSet;
	    "-makeObjectsPerformSelector:withObject:" = NSSet;
	    "-member:" = NSSet;
	    "-objectEnumerator" = NSSet;
	    "-objectsPassingTest:" = NSSet;
	    "-objectsWithOptions:passingTest:" = NSSet;
	    "-setByAddingObject:" = NSSet;
	    "-setByAddingObjectsFromArray:" = NSSet;
	    "-setByAddingObjectsFromSet:" = NSSet;
	};
	NSSocketPort = {
	    "+existingPortWithNumber:onHost:" = NSPort;
	    "+portWithNumber:onHost:forceAddress:listener:" = NSPort;
	    "-address" = NSPort;
	    "-getFds:count:" = NSPort;
	    "-handlePortMessage:" = NSPort;
	    "-host" = NSPort;
	    "-portNumber" = NSPort;
	};
	NSSocketPortNameServer = {
	    "+sharedInstance" = NSPortNameServer;
	    "-portForName:onHost:" = NSPortNameServer;
	    "-registerPort:forName:" = NSPortNameServer;
	    "-removePortForName:" = NSPortNameServer;
	};
	NSStream = {
	    "+getStreamsToHost:port:inputStream:outputStream:" = NSStream;
	    "-close" = NSStream;
	    "-delegate" = NSStream;
	    "-open" = NSStream;
	    "-propertyForKey:" = NSStream;
	    "-removeFromRunLoop:forMode:" = NSStream;
	    "-scheduleInRunLoop:forMode:" = NSStream;
	    "-setDelegate:" = NSStream;
	    "-setProperty:forKey:" = NSStream;
	    "-streamError" = NSStream;
	    "-streamStatus" = NSStream;
	};
	NSString = {
	    "+availableStringEncodings" = NSString;
	    "+constantStringClass" = NSString;
	    "+defaultCStringEncoding" = NSString;
	    "+localizedNameOfStringEncoding:" = NSString;
	    "+localizedStringWithFormat:,..." = NSString;
	    "+pathWithComponents:" = NSString;
	    "+string" = NSString;
	    "+stringWithCString:" = NSString;
	    "+stringWithCString:encoding:" = NSString;
	    "+stringWithCString:length:" = NSString;
	    "+stringWithCharacters:length:" = NSString;
	    "+stringWithContentsOfFile:" = NSString;
	    "+stringWithContentsOfFile:encoding:error:" = NSString;
	    "+stringWithContentsOfFile:usedEncoding:error:" = NSString;
	    "+stringWithContentsOfURL:" = NSString;
	    "+stringWithContentsOfURL:encoding:error:" = NSString;
	    "+stringWithContentsOfURL:usedEncoding:error:" = NSString;
	    "+stringWithFormat:,..." = NSString;
	    "+stringWithString:" = NSString;
	    "+stringWithUTF8String:" = NSString;
	    "-UTF8String" = NSString;
	    "-_baseLength" = NSString;
	    "-boolValue" = NSString;
	    "-cString" = NSString;
	    "-cStringLength" = NSString;
	    "-cStringUsingEncoding:" = NSString;
	    "-canBeConvertedToEncoding:" = NSString;
	    "-capitalizedString" = NSString;
	    "-caseInsensitiveCompare:" = NSString;
	    "-characterAtIndex:" = NSString;
	    "-commonPrefixWithString:options:" = NSString;
	    "-compare:" = NSString;
	    "-compare:options:" = NSString;
	    "-compare:options:range:" = NSString;
	    "-compare:options:range:locale:" = NSString;
	    "-completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:" = NSString;
	    "-componentsSeparatedByCharactersInSet:" = NSString;
	    "-componentsSeparatedByString:" = NSString;
	    "-containsString:" = NSString;
	    "-dataUsingEncoding:" = NSString;
	    "-dataUsingEncoding:allowLossyConversion:" = NSString;
	    "-decomposedStringWithCanonicalMapping" = NSString;
	    "-decomposedStringWithCompatibilityMapping" = NSString;
	    "-description" = NSString;
	    "-doubleValue" = NSString;
	    "-fastestEncoding" = NSString;
	    "-fileSystemRepresentation" = NSString;
	    "-floatValue" = NSString;
	    "-getCString:" = NSString;
	    "-getCString:maxLength:" = NSString;
	    "-getCString:maxLength:encoding:" = NSString;
	    "-getCString:maxLength:range:remainingRange:" = NSString;
	    "-getCharacters:" = NSString;
	    "-getCharacters:range:" = NSString;
	    "-getFileSystemRepresentation:maxLength:" = NSString;
	    "-getLineStart:end:contentsEnd:forRange:" = NSString;
	    "-getParagraphStart:end:contentsEnd:forRange:" = NSString;
	    "-hasPrefix:" = NSString;
	    "-hasSuffix:" = NSString;
	    "-hash" = NSString;
	    "-init" = NSString;
	    "-initWithBytes:length:encoding:" = NSString;
	    "-initWithBytesNoCopy:length:encoding:freeWhenDone:" = NSString;
	    "-initWithCString:" = NSString;
	    "-initWithCString:encoding:" = NSString;
	    "-initWithCString:length:" = NSString;
	    "-initWithCStringNoCopy:length:freeWhenDone:" = NSString;
	    "-initWithCharacters:length:" = NSString;
	    "-initWithCharactersNoCopy:length:freeWhenDone:" = NSString;
	    "-initWithContentsOfFile:" = NSString;
	    "-initWithContentsOfFile:encoding:error:" = NSString;
	    "-initWithContentsOfFile:usedEncoding:error:" = NSString;
	    "-initWithContentsOfURL:" = NSString;
	    "-initWithContentsOfURL:encoding:error:" = NSString;
	    "-initWithContentsOfURL:usedEncoding:error:" = NSString;
	    "-initWithData:encoding:" = NSString;
	    "-initWithFormat:,..." = NSString;
	    "-initWithFormat:arguments:" = NSString;
	    "-initWithFormat:locale:,..." = NSString;
	    "-initWithFormat:locale:arguments:" = NSString;
	    "-initWithString:" = NSString;
	    "-initWithUTF8String:" = NSString;
	    "-intValue" = NSString;
	    "-integerValue" = NSString;
	    "-isAbsolutePath" = NSString;
	    "-isEqual:" = NSString;
	    "-isEqualToString:" = NSString;
	    "-lastPathComponent" = NSString;
	    "-length" = NSString;
	    "-lengthOfBytesUsingEncoding:" = NSString;
	    "-lineRangeForRange:" = NSString;
	    "-localizedCaseInsensitiveCompare:" = NSString;
	    "-localizedCompare:" = NSString;
	    "-longLongValue" = NSString;
	    "-lossyCString" = NSString;
	    "-lowercaseString" = NSString;
	    "-maximumLengthOfBytesUsingEncoding:" = NSString;
	    "-paragraphRangeForRange:" = NSString;
	    "-pathComponents" = NSString;
	    "-pathExtension" = NSString;
	    "-precomposedStringWithCanonicalMapping" = NSString;
	    "-precomposedStringWithCompatibilityMapping" = NSString;
	    "-propertyList" = NSString;
	    "-propertyListFromStringsFileFormat" = NSString;
	    "-rangeOfCharacterFromSet:" = NSString;
	    "-rangeOfCharacterFromSet:options:" = NSString;
	    "-rangeOfCharacterFromSet:options:range:" = NSString;
	    "-rangeOfComposedCharacterSequenceAtIndex:" = NSString;
	    "-rangeOfComposedCharacterSequencesForRange:" = NSString;
	    "-rangeOfString:" = NSString;
	    "-rangeOfString:options:" = NSString;
	    "-rangeOfString:options:range:" = NSString;
	    "-rangeOfString:options:range:locale:" = NSString;
	    "-smallestEncoding" = NSString;
	    "-stringByAbbreviatingWithTildeInPath" = NSString;
	    "-stringByAddingPercentEncodingWithAllowedCharacters:" = NSString;
	    "-stringByAddingPercentEscapesUsingEncoding:" = NSString;
	    "-stringByAppendingFormat:,..." = NSString;
	    "-stringByAppendingPathComponent:" = NSString;
	    "-stringByAppendingPathExtension:" = NSString;
	    "-stringByAppendingString:" = NSString;
	    "-stringByDeletingLastPathComponent" = NSString;
	    "-stringByDeletingPathExtension" = NSString;
	    "-stringByExpandingTildeInPath" = NSString;
	    "-stringByPaddingToLength:withString:startingAtIndex:" = NSString;
	    "-stringByRemovingPercentEncoding" = NSString;
	    "-stringByReplacingCharactersInRange:withString:" = NSString;
	    "-stringByReplacingOccurrencesOfString:withString:" = NSString;
	    "-stringByReplacingOccurrencesOfString:withString:options:range:" = NSString;
	    "-stringByReplacingPercentEscapesUsingEncoding:" = NSString;
	    "-stringByResolvingSymlinksInPath" = NSString;
	    "-stringByStandardizingPath" = NSString;
	    "-stringByTrimmingCharactersInSet:" = NSString;
	    "-stringsByAppendingPaths:" = NSString;
	    "-substringFromIndex:" = NSString;
	    "-substringToIndex:" = NSString;
	    "-substringWithRange:" = NSString;
	    "-uppercaseString" = NSString;
	    "-writeToFile:atomically:" = NSString;
	    "-writeToFile:atomically:encoding:error:" = NSString;
	    "-writeToURL:atomically:" = NSString;
	    "-writeToURL:atomically:encoding:error:" = NSString;
	};
	NSTask = {
	    "+launchedTaskWithLaunchPath:arguments:" = NSTask;
	    "-arguments" = NSTask;
	    "-currentDirectoryPath" = NSTask;
	    "-environment" = NSTask;
	    "-interrupt" = NSTask;
	    "-isRunning" = NSTask;
	    "-launch" = NSTask;
	    "-launchPath" = NSTask;
	    "-processIdentifier" = NSTask;
	    "-resume" = NSTask;
	    "-setArguments:" = NSTask;
	    "-setCurrentDirectoryPath:" = NSTask;
	    "-setEnvironment:" = NSTask;
	    "-setLaunchPath:" = NSTask;
	    "-setStandardError:" = NSTask;
	    "-setStandardInput:" = NSTask;
	    "-setStandardOutput:" = NSTask;
	    "-standardError" = NSTask;
	    "-standardInput" = NSTask;
	    "-standardOutput" = NSTask;
	    "-suspend" = NSTask;
	    "-terminate" = NSTask;
	    "-terminationReason" = NSTask;
	    "-terminationStatus" = NSTask;
	    "-usePseudoTerminal" = NSTask;
	    "-validatedLaunchPath" = NSTask;
	    "-waitUntilExit" = NSTask;
	};
	NSThread = {
	    "+callStackReturnAddresses" = NSThread;
	    "+currentThread" = NSThread;
	    "+detachNewThreadSelector:toTarget:withObject:" = NSThread;
	    "+exit" = NSThread;
	    "+isMainThread" = NSThread;
	    "+isMultiThreaded" = NSThread;
	    "+mainThread" = NSThread;
	    "+setThreadPriority:" = NSThread;
	    "+sleepForTimeInterval:" = NSThread;
	    "+sleepUntilDate:" = NSThread;
	    "+threadPriority" = NSThread;
	    "-cancel" = NSThread;
	    "-init" = NSThread;
	    "-initWithTarget:selector:object:" = NSThread;
	    "-isCancelled" = NSThread;
	    "-isExecuting" = NSThread;
	    "-isFinished" = NSThread;
	    "-isMainThread" = NSThread;
	    "-main" = NSThread;
	    "-name" = NSThread;
	    "-setName:" = NSThread;
	    "-setStackSize:" = NSThread;
	    "-stackSize" = NSThread;
	    "-start" = NSThread;
	    "-threadDictionary" = NSThread;
	};
	"NSThread(CallStackSymbols)" = {
	    "+callStackSymbols" = NSThread;
	};
	"NSThread(GSLockInfo)" = {
	    "-mutexDrop:" = NSThread;
	    "-mutexHold:" = NSThread;
	    "-mutexWait:" = NSThread;
	};
	NSTimeZone = {
	    "+abbreviationDictionary" = NSTimeZone;
	    "+abbreviationMap" = NSTimeZone;
	    "+defaultTimeZone" = NSTimeZone;
	    "+knownTimeZoneNames" = NSTimeZone;
	    "+localTimeZone" = NSTimeZone;
	    "+resetSystemTimeZone" = NSTimeZone;
	    "+setDefaultTimeZone:" = NSTimeZone;
	    "+systemTimeZone" = NSTimeZone;
	    "+timeZoneArray" = NSTimeZone;
	    "+timeZoneForSecondsFromGMT:" = NSTimeZone;
	    "+timeZoneWithAbbreviation:" = NSTimeZone;
	    "+timeZoneWithName:" = NSTimeZone;
	    "+timeZoneWithName:data:" = NSTimeZone;
	    "-abbreviation" = NSTimeZone;
	    "-abbreviationForDate:" = NSTimeZone;
	    "-data" = NSTimeZone;
	    "-daylightSavingTimeOffset" = NSTimeZone;
	    "-daylightSavingTimeOffsetForDate:" = NSTimeZone;
	    "-initWithName:" = NSTimeZone;
	    "-initWithName:data:" = NSTimeZone;
	    "-isDaylightSavingTime" = NSTimeZone;
	    "-isDaylightSavingTimeForDate:" = NSTimeZone;
	    "-isEqualToTimeZone:" = NSTimeZone;
	    "-localizedName:locale:" = NSTimeZone;
	    "-name" = NSTimeZone;
	    "-nextDaylightSavingTimeTransition" = NSTimeZone;
	    "-nextDaylightSavingTimeTransitionAfterDate:" = NSTimeZone;
	    "-secondsFromGMT" = NSTimeZone;
	    "-secondsFromGMTForDate:" = NSTimeZone;
	    "-timeZoneDetailArray" = NSTimeZone;
	    "-timeZoneDetailForDate:" = NSTimeZone;
	    "-timeZoneName" = NSTimeZone;
	};
	NSTimeZoneDetail = {
	    "-isDaylightSavingTimeZone" = NSTimeZone;
	    "-timeZoneAbbreviation" = NSTimeZone;
	    "-timeZoneSecondsFromGMT" = NSTimeZone;
	};
	NSTimer = {
	    "+scheduledTimerWithTimeInterval:invocation:repeats:" = NSTimer;
	    "+scheduledTimerWithTimeInterval:repeats:block:" = NSTimer;
	    "+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:" = NSTimer;
	    "+timerWithTimeInterval:invocation:repeats:" = NSTimer;
	    "+timerWithTimeInterval:repeats:block:" = NSTimer;
	    "+timerWithTimeInterval:target:selector:userInfo:repeats:" = NSTimer;
	    "-fire" = NSTimer;
	    "-fireDate" = NSTimer;
	    "-initWithFireDate:interval:repeats:block:" = NSTimer;
	    "-initWithFireDate:interval:target:selector:userInfo:repeats:" = NSTimer;
	    "-invalidate" = NSTimer;
	    "-isValid" = NSTimer;
	    "-setFireDate:" = NSTimer;
	    "-timeInterval" = NSTimer;
	    "-userInfo" = NSTimer;
	};
	NSURL = {
	    "+URLByResolvingAliasFileAtURL:options:error:" = NSURL;
	    "+URLWithString:" = NSURL;
	    "+URLWithString:relativeToURL:" = NSURL;
	    "+fileURLWithPath:" = NSURL;
	    "+fileURLWithPath:isDirectory:" = NSURL;
	    "+fileURLWithPathComponents:" = NSURL;
	    "-URLByAppendingPathComponent:" = NSURL;
	    "-URLByAppendingPathComponent:isDirectory:" = NSURL;
	    "-URLByAppendingPathExtension:" = NSURL;
	    "-URLByDeletingLastPathComponent" = NSURL;
	    "-URLByDeletingPathExtension" = NSURL;
	    "-URLByResolvingSymlinksInPath" = NSURL;
	    "-URLByStandardizingPath" = NSURL;
	    "-URLHandleUsingCache:" = NSURL;
	    "-absoluteString" = NSURL;
	    "-absoluteURL" = NSURL;
	    "-baseURL" = NSURL;
	    "-checkResourceIsReachableAndReturnError:" = NSURL;
	    "-filePathURL" = NSURL;
	    "-fileReferenceURL" = NSURL;
	    "-fragment" = NSURL;
	    "-getResourceValue:forKey:error:" = NSURL;
	    "-host" = NSURL;
	    "-initFileURLWithPath:" = NSURL;
	    "-initFileURLWithPath:isDirectory:" = NSURL;
	    "-initWithScheme:host:path:" = NSURL;
	    "-initWithString:" = NSURL;
	    "-initWithString:relativeToURL:" = NSURL;
	    "-isFileReferenceURL" = NSURL;
	    "-isFileURL" = NSURL;
	    "-lastPathComponent" = NSURL;
	    "-loadResourceDataNotifyingClient:usingCache:" = NSURL;
	    "-parameterString" = NSURL;
	    "-password" = NSURL;
	    "-path" = NSURL;
	    "-pathComponents" = NSURL;
	    "-pathExtension" = NSURL;
	    "-port" = NSURL;
	    "-propertyForKey:" = NSURL;
	    "-query" = NSURL;
	    "-relativePath" = NSURL;
	    "-relativeString" = NSURL;
	    "-resourceDataUsingCache:" = NSURL;
	    "-resourceSpecifier" = NSURL;
	    "-scheme" = NSURL;
	    "-setProperty:forKey:" = NSURL;
	    "-setResourceData:" = NSURL;
	    "-standardizedURL" = NSURL;
	    "-user" = NSURL;
	};
	NSURLAuthenticationChallenge = {
	    "-error" = NSURLAuthenticationChallenge;
	    "-failureResponse" = NSURLAuthenticationChallenge;
	    "-initWithAuthenticationChallenge:sender:" = NSURLAuthenticationChallenge;
	    "-initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:" = NSURLAuthenticationChallenge;
	    "-previousFailureCount" = NSURLAuthenticationChallenge;
	    "-proposedCredential" = NSURLAuthenticationChallenge;
	    "-protectionSpace" = NSURLAuthenticationChallenge;
	    "-sender" = NSURLAuthenticationChallenge;
	};
	NSURLCache = {
	    "+setSharedURLCache:" = NSURLCache;
	    "+sharedURLCache" = NSURLCache;
	    "-cachedResponseForRequest:" = NSURLCache;
	    "-currentDiskUsage" = NSURLCache;
	    "-currentMemoryUsage" = NSURLCache;
	    "-diskCapacity" = NSURLCache;
	    "-initWithMemoryCapacity:diskCapacity:diskPath:" = NSURLCache;
	    "-memoryCapacity" = NSURLCache;
	    "-removeAllCachedResponses" = NSURLCache;
	    "-removeCachedResponseForRequest:" = NSURLCache;
	    "-setDiskCapacity:" = NSURLCache;
	    "-setMemoryCapacity:" = NSURLCache;
	    "-storeCachedResponse:forRequest:" = NSURLCache;
	};
	"NSURLCache(NSURLSessionTaskAdditions)" = {
	    "-cachedResponseForDataTask:" = NSURLCache;
	    "-removeCachedResponseForDataTask:" = NSURLCache;
	    "-storeCachedResponse:forDataTask:" = NSURLCache;
	};
	NSURLComponents = {
	    "+componentsWithString:" = NSURL;
	    "+componentsWithURL:resolvingAgainstBaseURL:" = NSURL;
	    "-URL" = NSURL;
	    "-URLRelativeToURL:" = NSURL;
	    "-fragment" = NSURL;
	    "-host" = NSURL;
	    "-init" = NSURL;
	    "-initWithString:" = NSURL;
	    "-initWithURL:resolvingAgainstBaseURL:" = NSURL;
	    "-password" = NSURL;
	    "-path" = NSURL;
	    "-percentEncodedFragment" = NSURL;
	    "-percentEncodedHost" = NSURL;
	    "-percentEncodedPassword" = NSURL;
	    "-percentEncodedPath" = NSURL;
	    "-percentEncodedQuery" = NSURL;
	    "-percentEncodedQueryItems" = NSURL;
	    "-percentEncodedUser" = NSURL;
	    "-port" = NSURL;
	    "-query" = NSURL;
	    "-queryItems" = NSURL;
	    "-rangeOfFragment" = NSURL;
	    "-rangeOfHost" = NSURL;
	    "-rangeOfPassword" = NSURL;
	    "-rangeOfPath" = NSURL;
	    "-rangeOfPort" = NSURL;
	    "-rangeOfQuery" = NSURL;
	    "-rangeOfScheme" = NSURL;
	    "-rangeOfUser" = NSURL;
	    "-scheme" = NSURL;
	    "-setFragment:" = NSURL;
	    "-setHost:" = NSURL;
	    "-setPassword:" = NSURL;
	    "-setPath:" = NSURL;
	    "-setPercentEncodedFragment:" = NSURL;
	    "-setPercentEncodedHost:" = NSURL;
	    "-setPercentEncodedPassword:" = NSURL;
	    "-setPercentEncodedPath:" = NSURL;
	    "-setPercentEncodedQuery:" = NSURL;
	    "-setPercentEncodedQueryItems:" = NSURL;
	    "-setPercentEncodedUser:" = NSURL;
	    "-setPort:" = NSURL;
	    "-setQuery:" = NSURL;
	    "-setQueryItems:" = NSURL;
	    "-setScheme:" = NSURL;
	    "-setString:" = NSURL;
	    "-setURL:" = NSURL;
	    "-setUser:" = NSURL;
	    "-string" = NSURL;
	    "-user" = NSURL;
	};
	NSURLConnection = {
	    "+canHandleRequest:" = NSURLConnection;
	    "+connectionWithRequest:delegate:" = NSURLConnection;
	    "-cancel" = NSURLConnection;
	    "-initWithRequest:delegate:" = NSURLConnection;
	    "-initWithRequest:delegate:startImmediately:" = NSURLConnection;
	    "-scheduleInRunLoop:forMode:" = NSURLConnection;
	    "-start" = NSURLConnection;
	    "-unscheduleFromRunLoop:forMode:" = NSURLConnection;
	};
	"NSURLConnection(NSURLConnectionSynchronousLoading)" = {
	    "+sendSynchronousRequest:returningResponse:error:" = NSURLConnection;
	};
	NSURLCredential = {
	    "+credentialWithUser:password:persistence:" = NSURLCredential;
	    "-hasPassword" = NSURLCredential;
	    "-initWithUser:password:persistence:" = NSURLCredential;
	    "-isEqual:" = NSURLCredential;
	    "-password" = NSURLCredential;
	    "-persistence" = NSURLCredential;
	    "-user" = NSURLCredential;
	};
	NSURLCredentialStorage = {
	    "+sharedCredentialStorage" = NSURLCredentialStorage;
	    "-allCredentials" = NSURLCredentialStorage;
	    "-credentialsForProtectionSpace:" = NSURLCredentialStorage;
	    "-defaultCredentialForProtectionSpace:" = NSURLCredentialStorage;
	    "-removeCredential:forProtectionSpace:" = NSURLCredentialStorage;
	    "-setCredential:forProtectionSpace:" = NSURLCredentialStorage;
	    "-setDefaultCredential:forProtectionSpace:" = NSURLCredentialStorage;
	};
	NSURLDownload = {
	    "+canResumeDownloadDecodedWithEncodingMIMEType:" = NSURLDownload;
	    "-cancel" = NSURLDownload;
	    "-deletesFileUponFailure" = NSURLDownload;
	    "-initWithRequest:delegate:" = NSURLDownload;
	    "-initWithResumeData:delegate:path:" = NSURLDownload;
	    "-request" = NSURLDownload;
	    "-resumeData" = NSURLDownload;
	    "-setDeletesFileUponFailure:" = NSURLDownload;
	    "-setDestination:allowOverwrite:" = NSURLDownload;
	};
	NSURLHandle = {
	    "+URLHandleClassForURL:" = NSURLHandle;
	    "+cachedHandleForURL:" = NSURLHandle;
	    "+canInitWithURL:" = NSURLHandle;
	    "+registerURLHandleClass:" = NSURLHandle;
	    "-addClient:" = NSURLHandle;
	    "-availableResourceData" = NSURLHandle;
	    "-backgroundLoadDidFailWithReason:" = NSURLHandle;
	    "-beginLoadInBackground" = NSURLHandle;
	    "-cancelLoadInBackground" = NSURLHandle;
	    "-didLoadBytes:loadComplete:" = NSURLHandle;
	    "-endLoadInBackground" = NSURLHandle;
	    "-failureReason" = NSURLHandle;
	    "-flushCachedData" = NSURLHandle;
	    "-initWithURL:cached:" = NSURLHandle;
	    "-loadInBackground" = NSURLHandle;
	    "-loadInForeground" = NSURLHandle;
	    "-propertyForKey:" = NSURLHandle;
	    "-propertyForKeyIfAvailable:" = NSURLHandle;
	    "-removeClient:" = NSURLHandle;
	    "-resourceData" = NSURLHandle;
	    "-setDebug:" = NSURLHandle;
	    "-setReturnAll:" = NSURLHandle;
	    "-setURL:" = NSURLHandle;
	    "-status" = NSURLHandle;
	    "-writeData:" = NSURLHandle;
	    "-writeProperty:forKey:" = NSURLHandle;
	};
	NSURLProtectionSpace = {
	    "-authenticationMethod" = NSURLProtectionSpace;
	    "-distinguishedNames" = NSURLProtectionSpace;
	    "-host" = NSURLProtectionSpace;
	    "-initWithHost:port:protocol:realm:authenticationMethod:" = NSURLProtectionSpace;
	    "-initWithProxyHost:port:type:realm:authenticationMethod:" = NSURLProtectionSpace;
	    "-isProxy" = NSURLProtectionSpace;
	    "-port" = NSURLProtectionSpace;
	    "-protocol" = NSURLProtectionSpace;
	    "-proxyType" = NSURLProtectionSpace;
	    "-realm" = NSURLProtectionSpace;
	    "-receivesCredentialSecurely" = NSURLProtectionSpace;
	};
	NSURLProtocol = {
	    "+propertyForKey:inRequest:" = NSURLProtocol;
	    "+registerClass:" = NSURLProtocol;
	    "+setProperty:forKey:inRequest:" = NSURLProtocol;
	    "+unregisterClass:" = NSURLProtocol;
	    "-cachedResponse" = NSURLProtocol;
	    "-client" = NSURLProtocol;
	    "-initWithRequest:cachedResponse:client:" = NSURLProtocol;
	    "-initWithTask:cachedResponse:client:" = NSURLProtocol;
	    "-request" = NSURLProtocol;
	    "-task" = NSURLProtocol;
	};
	"NSURLProtocol(Subclassing)" = {
	    "+canInitWithRequest:" = NSURLProtocol;
	    "+canonicalRequestForRequest:" = NSURLProtocol;
	    "+requestIsCacheEquivalent:toRequest:" = NSURLProtocol;
	    "-startLoading" = NSURLProtocol;
	    "-stopLoading" = NSURLProtocol;
	};
	NSURLQueryItem = {
	    "+queryItemWithName:value:" = NSURL;
	    "-initWithName:value:" = NSURL;
	    "-name" = NSURL;
	    "-value" = NSURL;
	};
	NSURLRequest = {
	    "+requestWithURL:" = NSURLRequest;
	    "+requestWithURL:cachePolicy:timeoutInterval:" = NSURLRequest;
	    "-URL" = NSURLRequest;
	    "-cachePolicy" = NSURLRequest;
	    "-initWithURL:" = NSURLRequest;
	    "-initWithURL:cachePolicy:timeoutInterval:" = NSURLRequest;
	    "-mainDocumentURL" = NSURLRequest;
	    "-timeoutInterval" = NSURLRequest;
	};
	"NSURLRequest(NSHTTPURLRequest)" = {
	    "-HTTPBody" = NSURLRequest;
	    "-HTTPBodyStream" = NSURLRequest;
	    "-HTTPMethod" = NSURLRequest;
	    "-HTTPShouldHandleCookies" = NSURLRequest;
	    "-allHTTPHeaderFields" = NSURLRequest;
	    "-valueForHTTPHeaderField:" = NSURLRequest;
	};
	NSURLResponse = {
	    "-MIMEType" = NSURLResponse;
	    "-URL" = NSURLResponse;
	    "-expectedContentLength" = NSURLResponse;
	    "-initWithURL:MIMEType:expectedContentLength:textEncodingName:" = NSURLResponse;
	    "-initWithURL:statusCode:HTTPVersion:headerFields:" = NSURLResponse;
	    "-suggestedFilename" = NSURLResponse;
	    "-textEncodingName" = NSURLResponse;
	};
	NSUnarchiver = {
	    "+classNameDecodedForArchiveClassName:" = NSArchiver;
	    "+decodeClassName:asClassName:" = NSArchiver;
	    "+unarchiveObjectWithData:" = NSArchiver;
	    "+unarchiveObjectWithFile:" = NSArchiver;
	    "-classNameDecodedForArchiveClassName:" = NSArchiver;
	    "-decodeClassName:asClassName:" = NSArchiver;
	    "-initForReadingWithData:" = NSArchiver;
	    "-isAtEnd" = NSArchiver;
	    "-objectZone" = NSArchiver;
	    "-replaceObject:withObject:" = NSArchiver;
	    "-setObjectZone:" = NSArchiver;
	    "-systemVersion" = NSArchiver;
	};
	"NSUnarchiver(GNUstep)" = {
	    "-cursor" = NSArchiver;
	    "-deserializeHeaderAt:version:classes:objects:pointers:" = NSArchiver;
	    "-directDataAccess" = NSArchiver;
	    "-resetUnarchiverWithData:atIndex:" = NSArchiver;
	};
	NSUndoManager = {
	    "-beginUndoGrouping" = NSUndoManager;
	    "-canRedo" = NSUndoManager;
	    "-canUndo" = NSUndoManager;
	    "-disableUndoRegistration" = NSUndoManager;
	    "-enableUndoRegistration" = NSUndoManager;
	    "-endUndoGrouping" = NSUndoManager;
	    "-forwardInvocation:" = NSUndoManager;
	    "-groupingLevel" = NSUndoManager;
	    "-groupsByEvent" = NSUndoManager;
	    "-isRedoing" = NSUndoManager;
	    "-isUndoRegistrationEnabled" = NSUndoManager;
	    "-isUndoing" = NSUndoManager;
	    "-levelsOfUndo" = NSUndoManager;
	    "-prepareWithInvocationTarget:" = NSUndoManager;
	    "-redo" = NSUndoManager;
	    "-redoActionName" = NSUndoManager;
	    "-redoMenuItemTitle" = NSUndoManager;
	    "-redoMenuTitleForUndoActionName:" = NSUndoManager;
	    "-registerUndoWithTarget:selector:object:" = NSUndoManager;
	    "-removeAllActions" = NSUndoManager;
	    "-removeAllActionsWithTarget:" = NSUndoManager;
	    "-runLoopModes" = NSUndoManager;
	    "-setActionName:" = NSUndoManager;
	    "-setGroupsByEvent:" = NSUndoManager;
	    "-setLevelsOfUndo:" = NSUndoManager;
	    "-setRunLoopModes:" = NSUndoManager;
	    "-undo" = NSUndoManager;
	    "-undoActionName" = NSUndoManager;
	    "-undoMenuItemTitle" = NSUndoManager;
	    "-undoMenuTitleForUndoActionName:" = NSUndoManager;
	    "-undoNestedGroup" = NSUndoManager;
	};
	NSUserDefaults = {
	    "+resetStandardUserDefaults" = NSUserDefaults;
	    "+setUserLanguages:" = NSUserDefaults;
	    "+standardUserDefaults" = NSUserDefaults;
	    "+userLanguages" = NSUserDefaults;
	    "-addSuiteNamed:" = NSUserDefaults;
	    "-arrayForKey:" = NSUserDefaults;
	    "-boolForKey:" = NSUserDefaults;
	    "-dataForKey:" = NSUserDefaults;
	    "-dictionaryForKey:" = NSUserDefaults;
	    "-dictionaryRepresentation" = NSUserDefaults;
	    "-doubleForKey:" = NSUserDefaults;
	    "-floatForKey:" = NSUserDefaults;
	    "-init" = NSUserDefaults;
	    "-initWithUser:" = NSUserDefaults;
	    "-integerForKey:" = NSUserDefaults;
	    "-objectForKey:" = NSUserDefaults;
	    "-persistentDomainForName:" = NSUserDefaults;
	    "-persistentDomainNames" = NSUserDefaults;
	    "-registerDefaults:" = NSUserDefaults;
	    "-removeObjectForKey:" = NSUserDefaults;
	    "-removePersistentDomainForName:" = NSUserDefaults;
	    "-removeSuiteNamed:" = NSUserDefaults;
	    "-removeVolatileDomainForName:" = NSUserDefaults;
	    "-searchList" = NSUserDefaults;
	    "-setBool:forKey:" = NSUserDefaults;
	    "-setDouble:forKey:" = NSUserDefaults;
	    "-setFloat:forKey:" = NSUserDefaults;
	    "-setInteger:forKey:" = NSUserDefaults;
	    "-setObject:forKey:" = NSUserDefaults;
	    "-setPersistentDomain:forName:" = NSUserDefaults;
	    "-setSearchList:" = NSUserDefaults;
	    "-setVolatileDomain:forName:" = NSUserDefaults;
	    "-stringArrayForKey:" = NSUserDefaults;
	    "-stringForKey:" = NSUserDefaults;
	    "-synchronize" = NSUserDefaults;
	    "-volatileDomainForName:" = NSUserDefaults;
	    "-volatileDomainNames" = NSUserDefaults;
	};
	NSValue = {
	    "+value:withObjCType:" = NSValue;
	    "+valueWithBytes:objCType:" = NSValue;
	    "+valueWithNonretainedObject:" = NSValue;
	    "+valueWithPoint:" = NSValue;
	    "+valueWithPointer:" = NSValue;
	    "+valueWithRange:" = NSValue;
	    "+valueWithRect:" = NSValue;
	    "+valueWithSize:" = NSValue;
	    "-getValue:" = NSValue;
	    "-initWithBytes:objCType:" = NSValue;
	    "-isEqualToValue:" = NSValue;
	    "-nonretainedObjectValue" = NSValue;
	    "-objCType" = NSValue;
	    "-pointValue" = NSValue;
	    "-pointerValue" = NSValue;
	    "-rangeValue" = NSValue;
	    "-rectValue" = NSValue;
	    "-sizeValue" = NSValue;
	};
	"NSValue(Subclassing)" = {
	    "+valueClassWithObjCType:" = NSValue;
	};
	NSValueTransformer = {
	    "+allowsReverseTransformation" = NSValueTransformer;
	    "+setValueTransformer:forName:" = NSValueTransformer;
	    "+transformedValueClass" = NSValueTransformer;
	    "+valueTransformerForName:" = NSValueTransformer;
	    "+valueTransformerNames" = NSValueTransformer;
	    "-reverseTransformedValue:" = NSValueTransformer;
	    "-transformedValue:" = NSValueTransformer;
	};
	NSXMLDTD = {
	    "+predefinedEntityDeclarationForName:" = NSXMLDTD;
	    "-addChild:" = NSXMLDTD;
	    "-attributeDeclarationForName:elementName:" = NSXMLDTD;
	    "-elementDeclarationForName:" = NSXMLDTD;
	    "-entityDeclarationForName:" = NSXMLDTD;
	    "-initWithContentsOfURL:options:error:" = NSXMLDTD;
	    "-initWithData:options:error:" = NSXMLDTD;
	    "-insertChild:atIndex:" = NSXMLDTD;
	    "-insertChildren:atIndex:" = NSXMLDTD;
	    "-notationDeclarationForName:" = NSXMLDTD;
	    "-publicID" = NSXMLDTD;
	    "-removeChildAtIndex:" = NSXMLDTD;
	    "-replaceChildAtIndex:withNode:" = NSXMLDTD;
	    "-setChildren:" = NSXMLDTD;
	    "-setPublicID:" = NSXMLDTD;
	    "-setSystemID:" = NSXMLDTD;
	    "-systemID" = NSXMLDTD;
	};
	NSXMLDTDNode = {
	    "-DTDKind" = NSXMLDTDNode;
	    "-initWithXMLString:" = NSXMLDTDNode;
	    "-isExternal" = NSXMLDTDNode;
	    "-notationName" = NSXMLDTDNode;
	    "-publicID" = NSXMLDTDNode;
	    "-setDTDKind:" = NSXMLDTDNode;
	    "-setNotationName:" = NSXMLDTDNode;
	    "-setPublicID:" = NSXMLDTDNode;
	    "-setSystemID:" = NSXMLDTDNode;
	    "-systemID" = NSXMLDTDNode;
	};
	NSXMLDocument = {
	    "+replacementClassForClass:" = NSXMLDocument;
	    "-DTD" = NSXMLDocument;
	    "-MIMEType" = NSXMLDocument;
	    "-XMLData" = NSXMLDocument;
	    "-XMLDataWithOptions:" = NSXMLDocument;
	    "-addChild:" = NSXMLDocument;
	    "-characterEncoding" = NSXMLDocument;
	    "-documentContentKind" = NSXMLDocument;
	    "-initWithContentsOfURL:options:error:" = NSXMLDocument;
	    "-initWithData:options:error:" = NSXMLDocument;
	    "-initWithRootElement:" = NSXMLDocument;
	    "-initWithXMLString:options:error:" = NSXMLDocument;
	    "-insertChild:atIndex:" = NSXMLDocument;
	    "-insertChildren:atIndex:" = NSXMLDocument;
	    "-isStandalone" = NSXMLDocument;
	    "-objectByApplyingXSLT:arguments:error:" = NSXMLDocument;
	    "-objectByApplyingXSLTAtURL:arguments:error:" = NSXMLDocument;
	    "-objectByApplyingXSLTString:arguments:error:" = NSXMLDocument;
	    "-removeChildAtIndex:" = NSXMLDocument;
	    "-replaceChildAtIndex:withNode:" = NSXMLDocument;
	    "-rootElement" = NSXMLDocument;
	    "-setCharacterEncoding:" = NSXMLDocument;
	    "-setChildren:" = NSXMLDocument;
	    "-setDTD:" = NSXMLDocument;
	    "-setDocumentContentKind:" = NSXMLDocument;
	    "-setMIMEType:" = NSXMLDocument;
	    "-setRootElement:" = NSXMLDocument;
	    "-setStandalone:" = NSXMLDocument;
	    "-setVersion:" = NSXMLDocument;
	    "-validateAndReturnError:" = NSXMLDocument;
	    "-version" = NSXMLDocument;
	};
	NSXMLElement = {
	    "-addAttribute:" = NSXMLElement;
	    "-addChild:" = NSXMLElement;
	    "-addNamespace:" = NSXMLElement;
	    "-attributeForLocalName:URI:" = NSXMLElement;
	    "-attributeForName:" = NSXMLElement;
	    "-attributes" = NSXMLElement;
	    "-elementsForLocalName:URI:" = NSXMLElement;
	    "-elementsForName:" = NSXMLElement;
	    "-initWithName:" = NSXMLElement;
	    "-initWithName:URI:" = NSXMLElement;
	    "-initWithName:stringValue:" = NSXMLElement;
	    "-initWithXMLString:error:" = NSXMLElement;
	    "-insertChild:atIndex:" = NSXMLElement;
	    "-insertChildren:atIndex:" = NSXMLElement;
	    "-namespaceForPrefix:" = NSXMLElement;
	    "-namespaces" = NSXMLElement;
	    "-normalizeAdjacentTextNodesPreservingCDATA:" = NSXMLElement;
	    "-removeAttributeForName:" = NSXMLElement;
	    "-removeChildAtIndex:" = NSXMLElement;
	    "-removeNamespaceForPrefix:" = NSXMLElement;
	    "-replaceChildAtIndex:withNode:" = NSXMLElement;
	    "-resolveNamespaceForName:" = NSXMLElement;
	    "-resolvePrefixForNamespaceURI:" = NSXMLElement;
	    "-setAttributes:" = NSXMLElement;
	    "-setAttributesAsDictionary:" = NSXMLElement;
	    "-setAttributesWithDictionary:" = NSXMLElement;
	    "-setChildren:" = NSXMLElement;
	    "-setNamespaces:" = NSXMLElement;
	};
	NSXMLNode = {
	    "+DTDNodeWithXMLString:" = NSXMLNode;
	    "+attributeWithName:URI:stringValue:" = NSXMLNode;
	    "+attributeWithName:stringValue:" = NSXMLNode;
	    "+commentWithStringValue:" = NSXMLNode;
	    "+document" = NSXMLNode;
	    "+documentWithRootElement:" = NSXMLNode;
	    "+elementWithName:" = NSXMLNode;
	    "+elementWithName:URI:" = NSXMLNode;
	    "+elementWithName:children:attributes:" = NSXMLNode;
	    "+elementWithName:stringValue:" = NSXMLNode;
	    "+localNameForName:" = NSXMLNode;
	    "+namespaceWithName:stringValue:" = NSXMLNode;
	    "+predefinedNamespaceForPrefix:" = NSXMLNode;
	    "+prefixForName:" = NSXMLNode;
	    "+processingInstructionWithName:stringValue:" = NSXMLNode;
	    "+textWithStringValue:" = NSXMLNode;
	    "-URI" = NSXMLNode;
	    "-XMLString" = NSXMLNode;
	    "-XMLStringWithOptions:" = NSXMLNode;
	    "-XPath" = NSXMLNode;
	    "-canonicalXMLStringPreservingComments:" = NSXMLNode;
	    "-childAtIndex:" = NSXMLNode;
	    "-childCount" = NSXMLNode;
	    "-children" = NSXMLNode;
	    "-detach" = NSXMLNode;
	    "-index" = NSXMLNode;
	    "-initWithKind:" = NSXMLNode;
	    "-initWithKind:options:" = NSXMLNode;
	    "-kind" = NSXMLNode;
	    "-level" = NSXMLNode;
	    "-localName" = NSXMLNode;
	    "-name" = NSXMLNode;
	    "-nextNode" = NSXMLNode;
	    "-nextSibling" = NSXMLNode;
	    "-nodesForXPath:error:" = NSXMLNode;
	    "-objectValue" = NSXMLNode;
	    "-objectsForXQuery:constants:error:" = NSXMLNode;
	    "-objectsForXQuery:error:" = NSXMLNode;
	    "-parent" = NSXMLNode;
	    "-prefix" = NSXMLNode;
	    "-previousNode" = NSXMLNode;
	    "-previousSibling" = NSXMLNode;
	    "-rootDocument" = NSXMLNode;
	    "-setName:" = NSXMLNode;
	    "-setObjectValue:" = NSXMLNode;
	    "-setStringValue:" = NSXMLNode;
	    "-setStringValue:resolvingEntities:" = NSXMLNode;
	    "-setURI:" = NSXMLNode;
	    "-stringValue" = NSXMLNode;
	};
	NSXMLParser = {
	    "-abortParsing" = NSXMLParser;
	    "-delegate" = NSXMLParser;
	    "-initWithContentsOfURL:" = NSXMLParser;
	    "-initWithData:" = NSXMLParser;
	    "-initWithStream:" = NSXMLParser;
	    "-parse" = NSXMLParser;
	    "-parserError" = NSXMLParser;
	    "-setDelegate:" = NSXMLParser;
	    "-setShouldProcessNamespaces:" = NSXMLParser;
	    "-setShouldReportNamespacePrefixes:" = NSXMLParser;
	    "-setShouldResolveExternalEntities:" = NSXMLParser;
	    "-shouldProcessNamespaces" = NSXMLParser;
	    "-shouldReportNamespacePrefixes" = NSXMLParser;
	    "-shouldResolveExternalEntities" = NSXMLParser;
	};
	"NSXMLParser(NSXMLParserLocatorAdditions)" = {
	    "-columnNumber" = NSXMLParser;
	    "-lineNumber" = NSXMLParser;
	    "-publicID" = NSXMLParser;
	    "-systemID" = NSXMLParser;
	};
    };
    variable = {
	NSCocoaErrorDomain = TypesAndConstants;
	NSDeallocateZombies = TypesAndConstants;
	NSDefaultRunLoopMode = TypesAndConstants;
	NSMACHErrorDomain = TypesAndConstants;
	NSOSStatusErrorDomain = TypesAndConstants;
	NSPOSIXErrorDomain = TypesAndConstants;
	NSRunLoopCommonModes = TypesAndConstants;
	NSZombieEnabled = TypesAndConstants;
	"_NSConstantStringClassReference" = TypesAndConstants;
	"_NSLock_error_handler" = TypesAndConstants;
	"_NSLogDescriptor" = TypesAndConstants;
	"_NSLog_printf_handler" = TypesAndConstants;
	"enum _NSDirectoryEnumerationOptions" = TypesAndConstants;
	"gnustep_global_lock" = TypesAndConstants;
	"struct NSZoneStats" = TypesAndConstants;
	"struct _NSMapTableValueCallBacks" = TypesAndConstants;
	"struct _NSNotificationQueueList" = TypesAndConstants;
	"struct _NSPoint" = TypesAndConstants;
	"struct _NSRange" = TypesAndConstants;
	"struct _NSRect" = TypesAndConstants;
	"struct _NSSize" = TypesAndConstants;
	"struct _NSZone" = TypesAndConstants;
    };
}