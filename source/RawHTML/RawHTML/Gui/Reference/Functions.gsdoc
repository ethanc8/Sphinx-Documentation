<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="Functions" up="Gui">
  <head>
    <title>Functions</title>
    <author name="Generated by pi"></author>
  </head>
  <body>
    <front><contents /></front>
  <!--StartFunctions-->
<!--StartNSApplicationFunctions-->
    <chapter>
      <heading>NSApplication functions</heading>
      <p></p>
      <function type="id" name="GSContactApplication" ovadd="0.0.0" ovrem="0.0.0">
        <arg type="NSString*">appName</arg>
        <arg type="NSString*">port</arg>
        <arg type="NSDate*">expire</arg>
        <desc>
          <p>
            Establishes an NSConnection to the application
            listening at <var>port</var> (by convention
            usually the application name), launching
            <var>appName</var> if necessary. Returns the proxy to
            the remote application, or <code>nil</code> on failure.
          </p>
          <p>
            The value of <var>port</var> specifies the name of the
            distributed objects service to which the
            connection is to be made. If this is
            <code>nil</code> it will be inferred from
            <var>appName</var>... by convention, applications use
            their own name (minus any path or extension) for
            this.
          </p>
          <p>
            If <var>appName</var> is <code>nil</code> or cannot be
            launched, this attempts to locate any application
            in a standard location whose name matches
            <var>port</var> and launch that application.
          </p>
          <p>
            The value of <var>expire</var> provides a timeout in
            case the application cannot be contacted promptly. If
            it is omitted, a thirty second timeout is used.
          </p>
        </desc>
      </function>
      <function type="int" name="NSApplicationMain" ovadd="1.0.0">
        <arg type="int">argc</arg>
        <arg type="const char**">argv</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="BOOL" name="NSPerformService" ovadd="1.0.0">
        <arg type="NSString*">serviceItem</arg>
        <arg type="NSPasteboard*">pboard</arg>
        <desc>
          <p>
            Given the name of a <var>serviceItem</var>, and some
            data in a pasteboard this function sends the data to
            the service provider (launching another application if
            necessary) and retrieves the result of the
            service in the pastebaord.
          </p>
          Returns <code>YES</code> on success, <code>NO</code>
          otherwise.
        </desc>
      </function>
      <function type="void" name="NSRegisterServicesProvider" ovadd="1.0.0">
        <arg type="id">provider</arg>
        <arg type="NSString*">name</arg>
        <desc>
          Registers a services providing object using the
          specified port <var>name</var>. <br /> Applications
          should not need to use this, as they can use the
          <ref type="method" id="-setServicesProvider:" class="NSApplication">[NSApplication -setServicesProvider:]</ref> method instead. The NSApplication method will use the <var>name</var> of the application rather than an other port <var>name</var>.
        </desc>
      </function>
      <function type="int" name="NSSetShowsServicesMenuItem" ovadd="1.0.0">
        <arg type="NSString*">name</arg>
        <arg type="BOOL">enabled</arg>
        <desc>
          <p>
            Controls whether the item <var>name</var> should
            be included in the services menu.
          </p>
          <p>
            If <var>enabled</var> is <code>YES</code> then the
            services menu for each application will include
            the named item, if <var>enabled</var> is
            <code>NO</code> then the service will not be shown
            in application services menus.
          </p>
          <p>
            Returns 0 if the setting is successfuly changed.
            Non-zero otherwise.
          </p>
        </desc>
      </function>
      <function type="void" name="NSShowSystemInfoPanel" ovadd="1.0.0">
        <arg type="NSDictionary*">options</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="BOOL" name="NSShowsServicesMenuItem" ovadd="1.0.0">
        <arg type="NSString*">name</arg>
        <desc>
          Returns a flag indicating whether the named service
          is supposed to be displayed in application services menus.
        </desc>
      </function>
      <function type="void" name="NSUnRegisterServicesProvider" ovadd="1.0.0">
        <arg type="NSString*">name</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSUpdateDynamicServices" ovadd="1.0.0">
        <desc>
          A services providing application may use this to update the
          list of services it provides. <br /> In order to update
          the services advertised, the application must create a
          <em>.service</em> bundle and place it in
          <code>~/Library/Services</code> before invoking this
          function.
        </desc>
      </function>
    </chapter>
<!--EndNSApplicationFunctions-->
<!--StartNSDataLinkManagerFunctions-->
    <chapter>
      <heading>NSDataLinkManager functions</heading>
      <p></p>
      <function type="void" name="NSFrameLinkRect" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <arg type="BOOL">isDestination</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="float" name="NSLinkFrameThickness" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSDataLinkManagerFunctions-->
<!--StartNSEventFunctions-->
    <chapter>
      <heading>NSEvent functions</heading>
      <p></p>
      <function type="NSEventMask" name="NSEventMaskFromType" ovadd="1.0.0">
        <arg type="NSEventType">type</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSEventFunctions-->
<!--StartNSFontFunctions-->
    <chapter>
      <heading>NSFont functions</heading>
      <p></p>
      <function type="int" name="NSConvertGlyphsToPackedGlyphs" ovadd="10.0.0">
        <arg type="NSGlyph*">glBuf</arg>
        <arg type="int">count</arg>
        <arg type="NSMultibyteGlyphPacking">packing</arg>
        <arg type="char*">packedGlyphs</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSFontFunctions-->
<!--StartNSGraphicsContextFunctions-->
    <chapter>
      <heading>NSGraphicsContext functions</heading>
      <p></p>
      <function type="NSGraphicsContext*" name="GSCurrentContext" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSGraphicsContextFunctions-->
<!--StartNSInterfaceStyleFunctions-->
    <chapter>
      <heading>NSInterfaceStyle functions</heading>
      <p></p>
      <function type="NSInterfaceStyle" name="NSInterfaceStyleForKey" ovadd="10.0.0">
        <arg type="NSString*">key</arg>
        <arg type="NSResponder*">responder</arg>
        <desc>
          <p>
            Returns the interface style the
            <var>responder</var> should use, which affects how a
            UI element (such as a button or menu) is displayed. If
            the <var>responder</var> has an interface style set,
            the <var>key</var> is ignored and the responder's
            interface style is returned. Otherwise the style
            associated with the <var>key</var> is returned
            (if set), otherwise the default style is returned. In
            no case will the style <code>NSNoInterfaceStyle</code>
            be returned.
          </p>
          <p>
            Styles can be set using the user defaults system.
            Currently available styles are
          </p>
          <list>
            <item>NSNextStepInterfaceStyle</item>
            <item>NSMacintoshInterfaceStyle</item>
            <item>NSWindows95InterfaceStyle</item>
            <item>GSWindowMakerInterfaceStyle</item>
          </list>
          <p>
            You can set a default style for all UI elements using
            the <code>NSInterfaceStyleDefault</code> key:
          </p>
<example>
   defaults write NSGlobalDomain NSInterfaceStyleDefault GSWindowMakerInterfaceStyle 
   </example>
        </desc>
      </function>
    </chapter>
<!--EndNSInterfaceStyleFunctions-->
<!--StartNSPanelFunctions-->
    <chapter>
      <heading>NSPanel functions</heading>
      <p></p>
      <function type="NSInteger" name="GSRunExceptionPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSException*">exception</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSBeginAlertSheet" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <arg type="NSWindow*">docWindow</arg>
        <arg type="id">modalDelegate</arg>
        <arg type="SEL">willEndSelector</arg>
        <arg type="SEL">didEndSelector</arg>
        <arg type="void*">contextInfo</arg>
        <arg type="NSString*">msg</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSBeginCriticalAlertSheet" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <arg type="NSWindow*">docWindow</arg>
        <arg type="id">modalDelegate</arg>
        <arg type="SEL">willEndSelector</arg>
        <arg type="SEL">didEndSelector</arg>
        <arg type="void*">contextInfo</arg>
        <arg type="NSString*">msg</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSBeginInformationalAlertSheet" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <arg type="NSWindow*">docWindow</arg>
        <arg type="id">modalDelegate</arg>
        <arg type="SEL">willEndSelector</arg>
        <arg type="SEL">didEndSelector</arg>
        <arg type="void*">contextInfo</arg>
        <arg type="NSString*">msg</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="id" name="NSGetAlertPanel" ovadd="1.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="id" name="NSGetCriticalAlertPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="id" name="NSGetInformationalAlertPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSReleaseAlertPanel" ovadd="1.0.0">
        <arg type="id">panel</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSRunAlertPanel" ovadd="1.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSRunCriticalAlertPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSRunInformationalAlertPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSRunLocalizedAlertPanel" ovadd="0.0.0" ovrem="0.0.0">
        <arg type="NSString*">table</arg>
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSPanelFunctions-->
<!--StartNSPasteboardFunctions-->
    <chapter>
      <heading>NSPasteboard functions</heading>
      <p></p>
      <function type="NSString*" name="NSCreateFileContentsPboardType" ovadd="1.0.0">
        <arg type="NSString*">fileType</arg>
        <desc>
          <p>
            Returns a standardised pasteboard type for file
            contents, formed from the supplied file
            extension.
          </p>
          <p>
            Data written to a pasteboard with a file contents type
            should be written using the
            <ref type="method" id="-writeFileContents:" class="NSPasteboard">[NSPasteboard -writeFileContents:]</ref> or <ref type="method" id="-writeFileWrapper:" class="NSPasteboard">[NSPasteboard -writeFileWrapper:]</ref> method. Similarly, the data should be read using the <ref type="method" id="-readFileContentsType:toFile:" class="NSPasteboard">[NSPasteboard -readFileContentsType:toFile:]</ref> or <ref type="method" id="-readFileWrapper" class="NSPasteboard">[NSPasteboard -readFileWrapper]</ref> method.
          </p>
        </desc>
      </function>
      <function type="NSString*" name="NSCreateFilenamePboardType" ovadd="1.0.0">
        <arg type="NSString*">fileType</arg>
        <desc>
          <p>
            Returns a standardised pasteboard type for file
            names, formed from the supplied file extension.
          </p>
          <p>
            Data written to a pasteboard with a file names type
            should be a single name written using
            <ref type="method" id="-setString:forType:" class="NSPasteboard">[NSPasteboard -setString:forType:]</ref> or an array of strings written using <ref type="method" id="-setPropertyList:forType:" class="NSPasteboard">[NSPasteboard -setPropertyList:forType:]</ref>. <br /> Similarly, the data should be read using the <ref type="method" id="-stringForType:" class="NSPasteboard">[NSPasteboard -stringForType:]</ref> or <ref type="method" id="-propertyListForType:" class="NSPasteboard">[NSPasteboard -propertyListForType:]</ref> method.
          </p>
          <p>
            See also the
            <ref type="function" id="NSGetFileType">
              NSGetFileType()
            </ref>
            and
            <ref type="function" id="NSGetFileTypes">
              NSGetFileTypes()
            </ref>
            functions.
          </p>
        </desc>
      </function>
      <function type="NSString*" name="NSGetFileType" ovadd="1.0.0">
        <arg type="NSString*">pboardType</arg>
        <desc>
          Returns the file type (fileType extension)
          corresponding to the pasteboard type given.
          <br /> This is a counterpart to the
          <ref type="function" id="NSCreateFilenamePboardType">
            NSCreateFilenamePboardType()
          </ref>
          function.
        </desc>
      </function>
      <function type="NSArray*" name="NSGetFileTypes" ovadd="1.0.0">
        <arg type="NSArray*">pboardTypes</arg>
        <desc>
          Returns the file types (filename extensions)
          corresponding to the pasteboard types given.
        </desc>
      </function>
    </chapter>
<!--EndNSPasteboardFunctions-->
<!--StartNSSoundFunctions-->
    <chapter>
      <heading>NSSound functions</heading>
      <p></p>
      <function type="NSArray*" name="PlaybackDeviceIdentifiers" ovadd="1.0.0">
        <desc>
          Function used to retrieve all available playback
          devices.
          <p>
            This function is the only way to retrieve possible
            playback device identifiers understood by [NSSound
            -setPlaybackDeviceIdentifier:].
          </p>
        </desc>
      </function>
    </chapter>
<!--EndNSSoundFunctions-->
<!--StartNSViewFunctions-->
    <chapter>
      <heading>NSView functions</heading>
      <p></p>
      <function type="NSArray*" name="GSGetDragTypes" ovadd="1.0.0">
        <arg type="NSView*">aView</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSViewFunctions-->
<!--EndFunctions-->
</body>
</gsdoc>
